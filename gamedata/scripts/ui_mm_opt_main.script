-- Меню настроек для Теней Чернобыля.
-- KRodin (c) 2018
-- Вырезал поддержку загрузки патчей, первого рендера (т.к. он не поддерживается движком) и прочий мусор.
-- Сделано специально для использования с движком OGSR.

class "options_dialog" (CUIScriptWnd)
function options_dialog:__init() super()
	self:SetFont(GetFontMedium())

	self.hint_name = nil
	self.hint_caption = nil
	self.current_view = nil

	self:InitControls()
	self:InitCallBacks()
	self:UpdateOptValues()
end

function options_dialog:__finalize()
	--log1("--options_dialog:__finalize() called!")
end

function options_dialog:InitControls()
	self:Init(0,0,1024,768)
	self:Enable(true)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_mm_opt.xml")

	--xml:InitStatic("back_video", self)
	xml:InitStatic("background", self)
	--xml:InitStatic("rug_video", self)
	self.dialog = xml:InitStatic("main_dialog:dialog", self)

	xml:InitFrame("frame_hint", self)
	self.hint_name = xml:InitStatic("hint_name", self)
	self.hint_caption = xml:InitStatic("hint_caption", self)	
	self.current_view = 1

	xml:InitStatic("main_dialog:cap_options", self.dialog)

	self.dlg_video = ui_mm_opt_video.opt_video()
	self.dlg_video:InitControls(55, 74, xml, self)
	self.dialog:AttachChild(self.dlg_video)

	self.dlg_sound = ui_mm_opt_sound.opt_sound()
	self.dlg_sound:InitControls(55, 74, xml, self)
	self.dlg_sound:Show(false)
	self.dialog:AttachChild(self.dlg_sound)

	self.dlg_gameplay = ui_mm_opt_gameplay.opt_gameplay()
	self.dlg_gameplay:InitControls(55, 74, xml, self)
	self.dlg_gameplay:Show(false)
	self.dialog:AttachChild(self.dlg_gameplay)

	self.dlg_controls = ui_mm_opt_controls.opt_controls()
	self.dlg_controls:InitControls(55, 74, xml, self)
	self.dlg_controls:Show(false)
	self.dialog:AttachChild(self.dlg_controls)

	self.dlg_video_adv = ui_mm_opt_video_adv.opt_video_adv()
	self.dlg_video_adv:InitControls(55, 74, xml, self)
	self.dlg_video_adv:Show(false)
	self.dialog:AttachChild(self.dlg_video_adv)

	self.dlg_sol_adv = ui_mm_opt_sol_adv.opt_sol_adv()
	self.dialog:AttachChild(self.dlg_sol_adv)
	self.dlg_sol_adv:InitControls(55,74, xml, self)
	self.dlg_sol_adv:Show(false)

	local btn = xml:Init3tButton("main_dialog:btn_accept", self.dialog)
	self:Register(btn, "btn_accept")

	btn = xml:Init3tButton("main_dialog:btn_cancel", self.dialog)
	self:Register(btn, "btn_cancel")

	self.tab = xml:InitTab("main_dialog:tab", self.dialog)
	self:Register(self.tab, "tab")

	self.message_box = CUIMessageBoxEx()
	self.message_box:Init("message_box_restart_game")
end

function options_dialog:UpdateOptValues(flag) --true - применить настройки, false - отменить настройки, nil - просто обновить дефолтные значения
	local OptMgr = COptionsManager()
	local opt_tbl = {"mm_opt_video_preset", "mm_opt_video", "mm_opt_video_adv", "mm_opt_gameplay", "mm_opt_sound", "mm_opt_controls", "key_binding"}
	for _, opt_name in ipairs(opt_tbl) do
		if flag == true then
			OptMgr:SaveValues(opt_name)
		elseif flag == false then
			OptMgr:UndoGroup(opt_name)
		end
	end
	if flag == true then
		OptMgr:OptionsPostAccept()
	end
	for _, opt_name in ipairs(opt_tbl) do
		OptMgr:SetCurrentValues(opt_name)
		OptMgr:SaveBackupValues(opt_name)
	end
end

function options_dialog:InitCallBacks()
	self:AddCallback("tab", ui_events.TAB_CHANGED, self.OnTabChange, self)
	self:AddCallback("btn_advanced_graphic", ui_events.BUTTON_CLICKED, self.OnBtnAdvGraphic, self)
	self:AddCallback("btn_accept", ui_events.BUTTON_CLICKED, self.OnBtnAccept, self)
	self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.OnBtnCancel, self)
	self:AddCallback("combo_preset", ui_events.LIST_ITEM_SELECT, self.OnPresetChanged, self)	
	self:AddCallback("btn_simply_graphic", ui_events.BUTTON_CLICKED, self.OnSimplyGraphic, self)	
	self:AddCallback("btn_keyb_default", ui_events.BUTTON_CLICKED, self.Onbtn_keyb_default, self)
	self:AddCallback("btn_advanced_graphic", ui_events.STATIC_FOCUS_RECEIVED, self.HintRefresh, self)
	self:AddCallback("btn_accept",           ui_events.STATIC_FOCUS_RECEIVED, self.HintRefresh, self)
	self:AddCallback("btn_cancel",           ui_events.STATIC_FOCUS_RECEIVED, self.HintRefresh, self)
	self:AddCallback("btn_default_graphic",  ui_events.STATIC_FOCUS_RECEIVED, self.HintRefresh, self)
	self:AddCallback("btn_default_sound",    ui_events.STATIC_FOCUS_RECEIVED, self.HintRefresh, self)
	self:AddCallback("btn_simply_graphic",   ui_events.STATIC_FOCUS_RECEIVED, self.HintRefresh, self)
	self:AddCallback("radio_HUDChange",      ui_events.TAB_CHANGED, self.OnHUDChange, self)
	self:AddCallback("radio_ScopeChange",    ui_events.TAB_CHANGED, self.OnScopeChange, self)
	self:AddCallback("radio_InvChange",      ui_events.TAB_CHANGED, self.OnInvChange, self)
end

function options_dialog:HintRefresh()
	self.hint_name:SetText(game.translate_string("hint_name_text"))
	if self.current_view == 1 then
		self.hint_caption:SetText(game.translate_string("hint_caption_text"))
	else
		self.hint_caption:SetText(game.translate_string("hint_caption_adv_text"))
	end
end

function options_dialog:Onbtn_keyb_default()
	cmd("unbindall")

	local opt = COptionsManager()
	opt:SetCurrentValues("mm_opt_controls")
	opt:SetCurrentValues("key_binding")
end

function options_dialog:OnPresetChanged()
	local opt = COptionsManager()
	opt:SetCurrentValues("mm_opt_video")
	opt:SetCurrentValues("mm_opt_video_adv")

	self:show_need_restart_wnd()
end

function options_dialog:OnBtnAccept()
	self:UpdateOptValues(true)

	self:GetHolder():start_stop_menu(self, true)
	self.owner:Show(true)

	self:HintRefresh()

	cmd("cfg_save") -- сохраняем файл настроек на диск

	local i = self.tab:GetActiveIndex()
	if i == 4 then
		self:OnHUDAccept()
		self:OnInvAccept()
		self:OnScopeAccept()
	end	
end

function options_dialog:OnBtnCancel()
	self:UpdateOptValues(false)

	self:GetHolder():start_stop_menu(self, true)
	self.owner:Show(true)

	self:HintRefresh()
end

function options_dialog:OnTabChange()
	self.dlg_video:Show(false)
	self.dlg_sound:Show(false)
	self.dlg_gameplay:Show(false)
	self.dlg_controls:Show(false)
	self.dlg_video_adv:Show(false)
	self.dlg_sol_adv:Show(false)
	self.current_view = 1

	self:HintRefresh()

	local i = self.tab:GetActiveIndex()
	if i == 0 then
		self.dlg_video:Show(true)		
	elseif i == 1 then
		self.dlg_sound:Show(true)
	elseif i == 2 then
		self.dlg_gameplay:Show(true)
	elseif i == 3 then
		self.dlg_controls:Show(true)
	elseif i == 4 then
		self.dlg_sol_adv:Show(true)
	end
end

function options_dialog:OnBtnAdvGraphic()
	self.dlg_video:Show(false)
	self.dlg_video_adv:Show(true)

	self.current_view = 2
	self:HintRefresh()
end

function options_dialog:OnSimplyGraphic()
	self.dlg_video:Show(true)
	self.dlg_video_adv:Show(false)

	self.current_view = 1
	self:HintRefresh()
end

function options_dialog:OnKeyboard(dik, keyboard_action)
	if CUIScriptWnd.OnKeyboard( self, dik, keyboard_action ) then
		return true
	end
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik_to_bind(dik) == key_bindings.kQUIT then
			if self.dlg_video_adv:IsShown() then
				self.dlg_video_adv:Show(false)
				self.dlg_video:Show(true)
				self.current_view = 1
			else
				self:GetHolder():start_stop_menu(self, true)
				self.owner:Show(true)
			end
			self:HintRefresh()
		end
		return true
	end

	return false
end

function options_dialog:show_need_restart_wnd()
	self:GetHolder():start_stop_menu(self.message_box, true)
end



--*****************************[ОПЦИИ НС]***************************************
function options_dialog:OnHUDChange()
	local ActiveTab = self.radio_HUD:GetActiveIndex()

	local picture = self:GetStatic("screen_pict")	
	if ActiveTab == 0 then 
		picture:Init("sol_mods\\ui_sol_options_pic0",170,10,300,200)
	elseif ActiveTab == 1 then 
		picture:Init("sol_mods\\ui_sol_options_pic1",170,10,300,200)
	elseif ActiveTab == 2 then 
		picture:Init("sol_mods\\ui_sol_options_pic2",170,10,300,200)
	elseif ActiveTab == 3 then 
		picture:Init("sol_mods\\ui_sol_options_pic3",170,10,300,200)
	elseif ActiveTab == 4 then 
		picture:Init("sol_mods\\ui_sol_options_pic4",170,10,300,200)
	end
end

function options_dialog:OnInvChange()
	local ActiveTab = self.radio_inv:GetActiveIndex()

	local picture = self:GetStatic("screen_pict")	
	if ActiveTab == 0 then 
		picture:Init("sol_mods\\ui_sol_options_inv_org",170,10,300,200)
	elseif ActiveTab == 1 then 
		picture:Init("sol_mods\\ui_sol_options_inv_pda",170,10,300,200)
	end
end

function options_dialog:OnScopeChange()
	if not self.radio_scope then return end

	local ActiveTab = self.radio_scope:GetActiveIndex()

	local picture = self:GetStatic("screen_pict")	
	if ActiveTab == 0 then 
		picture:Init("sol_mods\\ui_sol_options_orig",170,10,300,200)
	elseif ActiveTab == 1 then 
		picture:Init("sol_mods\\ui_sol_options_wide",170,10,300,200)
	elseif ActiveTab == 2 then 
		picture:Init("sol_mods\\ui_sol_options_wide2",170,10,300,200)
	end
end

local tcFiles = {
	"config\\misc\\ui_rad.ltx",
	"config\\ui\\maingame.xml",
	"config\\ui\\maingame_16.xml",
	"config\\ui\\motion_icon.xml",
	"config\\ui\\motion_icon_16.xml",
	"config\\ui\\ui_custom_msgs.xml",
	"config\\ui\\ui_custom_msgs_16.xml",
	"config\\ui\\zone_map.xml",
	"config\\ui\\zone_map_16.xml",
	"config\\ui\\actor_statistic.xml",
	"config\\ui\\amk_ui_base.xml",
	"config\\ui\\carbody_item.xml",
	"config\\ui\\carbody_item_16.xml",
	"config\\ui\\carbody_new.xml",
	"config\\ui\\carbody_new_16.xml",
	"config\\ui\\encyclopedia.xml",
	"config\\ui\\encyclopedia_item.xml",
	"config\\ui\\events_new.xml",
	"config\\ui\\inventory_item.xml",
	"config\\ui\\inventory_item_16.xml",
	"config\\ui\\inventory_new.xml",
	"config\\ui\\inventory_new_16.xml",
	"config\\ui\\news.xml",
	"config\\ui\\pda.xml",
	"config\\ui\\pda_contacts_new.xml",
	"config\\ui\\pda_events.xml",
	"config\\ui\\pda_map.xml",
	"config\\ui\\stalkers_ranking.xml",
	"config\\ui\\talk.xml",
	"config\\ui\\talk_16.xml",
	"config\\ui\\trade.xml",
	"config\\ui\\trade_16.xml",
	"config\\ui\\trade_character.xml",
	"config\\ui\\trade_character_16.xml",
	"config\\ui\\trade_item.xml",
	"config\\ui\\trade_item_16.xml",
	"config\\ui\\ui_pda.xml",
	"scripts\\ui_rad.script",
	"textures\\wpn\\crosshairs\\1p21.dds",
	"textures\\wpn\\crosshairs\\4dot.dds",
	"textures\\wpn\\crosshairs\\acog.dds",
	"textures\\wpn\\crosshairs\\arbalet.dds",
	"textures\\wpn\\crosshairs\\b94.dds",
	"textures\\wpn\\crosshairs\\eagle.dds",
	"textures\\wpn\\crosshairs\\fn2000.dds",
	"textures\\wpn\\crosshairs\\fn2000p.dds",
	"textures\\wpn\\crosshairs\\g36.dds",
	"textures\\wpn\\crosshairs\\gauss.dds",
	"textures\\wpn\\crosshairs\\hakko15.dds",
	"textures\\wpn\\crosshairs\\hk417.dds",
	"textures\\wpn\\crosshairs\\iglomet.dds",
	"textures\\wpn\\crosshairs\\l85.dds",
	"textures\\wpn\\crosshairs\\m16a2.dds",
	"textures\\wpn\\crosshairs\\norman.dds",
	"textures\\wpn\\crosshairs\\oc14.dds",
	"textures\\wpn\\crosshairs\\pka.dds",
	"textures\\wpn\\crosshairs\\pso1.dds",
	"textures\\wpn\\crosshairs\\pso1m1t.dds",
	"textures\\wpn\\crosshairs\\pso1m1z.dds",
	"textures\\wpn\\crosshairs\\pu.dds",
	"textures\\wpn\\crosshairs\\rpg.dds",
	"textures\\wpn\\crosshairs\\susat.dds",
	"textures\\wpn\\crosshairs\\toz34.dds",
	"textures\\ui\\ui_pda.dds"
}

-- запись настроек в файл. Изменен 06.03.2020. * solvador
local function fCopy(SourcePath)
	local fs = getFS()
	for k, v in pairs (tcFiles) do 
		local cp = tcFiles[k]
		local cf = fs:update_path("$game_data$", cp)
		local sf = fs:update_path("$game_textures$", "sol_mods\\"..SourcePath.."\\"..cp)
		if fs:exist(sf) then
			fs:file_copy(sf, cf)
		end
	end
end

function options_dialog:OnHUDAccept()
	local ActiveTab = self.radio_HUD:GetActiveIndex()

	if ActiveTab == 0 then 
		fCopy("hud_org")
	elseif ActiveTab == 1 then 
		fCopy("hud_num")
	elseif ActiveTab == 2 then 
		fCopy("hud_gsc")
	elseif ActiveTab == 3 then 
		fCopy("hud_min")
	elseif ActiveTab == 4 then 
		fCopy("hud_s12")
	end
	
	sOpt("hud", ActiveTab)
end

function options_dialog:OnInvAccept()
	local ActiveTab = self.radio_inv:GetActiveIndex()

	if ActiveTab == 0 then 
		fCopy("org_style")
	elseif ActiveTab == 1 then 
		fCopy("pda_style")
	end
	
	sOpt("inv", ActiveTab)
end

function options_dialog:OnScopeAccept()
	if not self.radio_scope then return end

	local ActiveTab = self.radio_scope:GetActiveIndex()
	
	if ActiveTab == 0 then 
		fCopy("scope_orig")
	elseif ActiveTab == 1 then 
		fCopy("scope_wide")
	elseif ActiveTab == 2 then 
		fCopy("scope_wide2")
	end

	sOpt("sco", ActiveTab)
end


-- запись таблицы в файл
local function table_val_to_str( v )
   if "string" == type( v ) then
      v = string.gsub( v, "\n", "\\n" )
      if string.match( string.gsub(v,"[^'\"]",""), '^"+$' ) then
         return "'" .. v .. "'"
      end
      return '"' .. string.gsub(v,'"', '\\"' ) .. '"'
   end
   return "table" == type( v ) and table_tostring( v ) or tostring( v )
end

local function table_key_to_str( k )
   if "string" == type( k ) and string.match( k, "^[_%a][_%a%d]*$" ) then
      return k
   end
   return "[" .. table_val_to_str( k ) .. "]"
end

function table_tostring( tbl )
   local result, done = {}, {}
   for k, v in ipairs( tbl ) do
      table.insert( result, table_val_to_str( v ) )
      done[ k ] = true
   end
   for k, v in pairs( tbl ) do
      if not done[ k ] then
         table.insert( result, table_key_to_str( k ) .. "=" .. table_val_to_str( v ) )
      end
   end
   return "{\n" .. table.concat( result, ",\n" ) .. "\n}"
end

local function table_save(tbl, filename)
   local f, err = io.open(filename, "w")
   assert(f, err)
   f:write(table_tostring(tbl))
   f:close()
   return true
end

-- чтение таблицы из файла
local function table_read(filename)
   local f, err = io.open(filename, "r")
   if not f then
      stdfs.VerifyPath(filename) --создаём папку, если вдруг её нет.
      f, err = io.open(filename, "w")
      assert(f, err)
      f:write("{\nsco=0,\nhud=0,\ninv=0\n}")
      f:close()
      f, err = io.open(filename, "r")
      assert(f, err)
   end
   local tbl = assert(loadstring("return " .. f:read("*a")))
   f:close()
   return tbl()
end


-- запись выбранных настроек
function sOpt(sn,sv)
	local fs = getFS()
	local fn = fs:update_path("$game_config$", "sol_options.ltx")
	local t = table_read(fn)
	for k, v in pairs(t) do 
		t[sn] = sv
	end
	table_save(t,fn)
end

-- чтение выбранных настроек
function rOpt(sn)
	local sv = "0"
	local fs = getFS()
	local fn = fs:update_path("$game_config$", "sol_options.ltx")
	local t = table_read(fn)
	for k, v in pairs(t) do 
		sv = t[sn]
	end
	return sv
end
--********************************************************************************
