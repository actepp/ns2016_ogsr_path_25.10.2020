local math_random = math.random
local math_ceil = math.ceil
local math_floor = math.floor
local string_find = string.find
local string_format = string.format
local string_sub = string.sub
local string_len = string.len


inited = false

--' «ависимости в спауне предметов. ѕредмет спаунитьс€ только если есть хот€ бы один из зависимых.
local item_by_comms = {}	--  люч - группировка персонажа. «начение - таблица, содержаща€ имена секций предметов.
local item_dependence = {}	-- «ависимости в спауне предметов. ѕредмет спаунитьс€ только если есть хот€ бы один из зависимых.

--' ћножители и минимаксы дл€ выпадени€ вещей в зависимости от уровн€
local mul_by_level = {}
local count_by_level = {}
local gm_dfcy = { [1] = "default", [2] = "stalker", [3] = "veteran", [4] = "master" }	-- все-таки лениво мне разбиратьс€ с преобразованием ключей в индексы
local ammo_dfcy = { default = 1, stalker = 0.8, veteran = 0.6, master = 0.3 }	-- какую часть патронов оставл€ть в стволах в зависимости от сложности игры
local item_dfcy = { default = 1, stalker = 0.8, veteran = 0.55, master = 0.25 }	-- какую часть патронов оставл€ть в стволах в зависимости от сложности игры

local always_keep_item = {}	-- ѕредметы, которые нельз€ удал€ть (квестовые например)
local always_delete = {}	-- эти - удал€ть в об€зательном пор€дке.
local offs_items = {}		-- эти провер€ть на protected.

local names_info = {}		-- “аблица выдачи инфопорций по части имени погибшего непис€.

-- “аблица дл€ проверки в лоб. ѕор€док не имеет значени€.
local visuals = {
	["stalker_bandit"] = "bandit_outfit",
	["stalker_bandit_4"] = "bandit_outfit_red",
	["stalker_bandit_2"] = "bandit_outfit_red",
	["stalker_bandit_5"] = "bandit_outfit_blue",
	["stalker_bandit_9"] = "bandit_outfit_blue",
	["stalker_bandit_1"] = "bandit_outfit_red1",
	["stalker_bandit_drunk"] = "outfit_bandit_m1",
	["stalker_bandit_8"] = "bandit_gaz_outfit_m1",
	["stalker_bandit_veteran"] = "bandit_veteran_outfit",
	["stalker_bandit_borov"] = "bandit_master_outfit",
	["stalker_bandit_master"] = "bandit_master_outfit",
	["stalker_bandit_exoskeleton"] = "exo_bandit_outfit",
	["stalker_do_antigas"] = "dolg_gaz_outfit_m1",
	["stalker_do_komandir"] = "outfit_dolg_m1",
	["stalker_do_nauchniy"] = "dolg_scientific_outfit",
	["stalker_do_exoskeleton"] = "dolg_black_exoskeleton",
	["stalker_nebo_balon_1"] = "nebo_heavy_outfit",
	["stalker_nebo_rukzak"] = "nebo_light_outfit",
	["stalker_nebo_nauchniy"] = "nebo_scientific_outfit",
	["stalker_nebo_exoskeleton"] = "nebo_exo_outfit",		
	["stalker_ecolog"] = "ecolog_outfit",
	["nauchniy_1"] = "ecolog_outfit",
	["protect_suit2"] = "ecolog_outfit",
	["stalker_ecolog_military"] = "protection_outfit",
	["stalker_chemical"] = "protection_outfit",
	["nauchniy_0"] = "protection_outfit",
	["protect_suit1"] = "protection_outfit",
	["izgoy"] = "bandit_veteran_outfit",
	["stalker_ki_head_1"] = "outfit_killer_m1",
	["stalker_ki_antigas"] = "killer_gaz_outfit_m1",
	["stalker_ki_nauchniy"] = "merc_scientific_outfit",
	["stalker_ki_exoskeleton"] = "killer_blue_exoskeleton",
	["stalker_militari_1"] = "military_outfit",
	["stalker_militari_antigas_1"] = "military_outfit",
	["stalker_military"] = "military_outfit",
	["stalker_military_green"] = "military_outfit",
	["stalker_militari_2"] = "militaryspec_outfit",
	["stalker_militari_antigas_2"] = "militaryspec_outfit",
	["stalker_commander"] = "militaryspec_outfit",
	["stalker_military_black"] = "militaryspec_outfit",
	["stalker_monolit"] = "monolit_outfit",
	["stalker_mo_hood_9"] = "monolit_gaz_outfit_m1",
	["stalker_mo_nauchniy"] = "monolit_scientific_outfit",
	["stalker_mo_exo"] = "monolit_exoskeleton",
	["stalker_mo_elite"] = "monolit_black_outfit",	
	["stalker_hood"] = "stalker_outfit", 
	["stalker_bar_security"] = "stalker_guard_outfit",
	["stalker_neytral_hood_9"] = "neytral_gaz_outfit_m1",  			
	["stalker_2_gas"] = "neytral_gaz_outfit_v1",
	["stalker_3_gas"] = "neytral_gaz_outfit_v2",
	["stalker_4_gas"] = "neytral_gaz_outfit_v3",
	["stalker_2_mask"] = "stalker_outfit_v1",
	["lisiy"] = "stalker_outfit_v1",
	["stalker_2_mask"] = "stalker_outfit_v1",
	["stalker_2_ochki"] = "stalker_outfit_v1",
	["stalker_2_rozh1"] = "stalker_outfit_v1",
	["stalker_2_usi"] = "stalker_outfit_v1",
	["stalker_3_mask"] = "stalker_outfit_v2",
	["hellcar" ] = "stalker_outfit_v2",
	["stalker_3_mask"] = "stalker_outfit_v2",
	["stalker_3_rozh2"] = "stalker_outfit_v2",
	["stalker_3_usi"] = "stalker_outfit_v2",
	["stalker_4_rozh3"] = "stalker_outfit_v3",
	["serega"]  = "stalker_outfit_v3",
	["stalker_4_ochki"] = "stalker_outfit_v3",
	["stalker_prizrak"] = "outfit_stalker_m1",
	["stalker_neytral_nauchniy"] = "scientific_outfit",
	["stalker_scien"] = "scientific_outfit",
	["stalker_neytral_exoskeleton"] = "exo_outfit",
	["stalker_exoskeleton"] = "exo_outfit",
	["green_stalker_1"] = "neytral_novice_outfit_m1",
	["green_stalker_2"] = "novice_outfit",
	["stalker_novice"] = "outfit_novice_m1",
	["green_stalker_3"] = "novice_outfit_rain_1",
	["green_stalker_4"] = "neytral_novice_outfit_cam",
	["green_stalker_5"] = "novice_outfit_new_2",
	["green_stalker_6"] = "novice_outfit_rain_2",
	["green_stalker_7"] = "neytral_novice_outfit_cam_2",
	["green_stalker_8"] = "neytral_novice_outfit_cam_3",
	["green_stalker_9"] = "novice_outfit_new_1",
	["green_stalker_10"] = "neytral_novice_outfit_cam_1",
	["green_stalker_11"] = "neytral_novice_outfit_new",
	["green_stalker_antigas"] = "neytral_novice_gaz_outfit_m1",
	["soldier_mask"] = "outfit_soldier_m1", 
	["soldier_obichniy"] = "outfit_soldier_m1", 
	["stalker_soldier"] = "outfit_soldier_m1", 
	["soldier_spetsnaz"] = "specops_outfit",
	["stalker_specops"] = "specops_outfit",
	["soldier_antigas"] = "outfit_specnaz_m1",
	["stalker_zombie1"] = "bandit_outfit",
	["stalker_zombie2"] = "dolg_outfit",
	["zombie_fresh_1"] = "dolg_outfit",
	["stalker_zombie3"] = "stalker_outfit",
	["stalker_zombie6"] = "stalker_outfit",
	["zombie_fresh_2"] = "stalker_outfit", 
	["stalker_zombie4"] = "killer_outfit",
	["stalker_zombie5"] = "stalker_guard_outfit",
	["stalker_zombie7"] = "novice_outfit",
	["stalker_zombie8"] = "neytral_novice_outfit_m1",
	["stalker_zombie_specnaz"] = "specops_outfit",
	["zombie_fresh_0"] = "svoboda_heavy_outfit",
	["zombie_exoskeleton"] = "broken_exoskeleton",
	["stalker_sv_rukzak_1_1"] = "svoboda_light_outfit",
	["stalker_sv_rukzak_3"] = "svoboda_light_outfit",
	["stalker_svoboda_light"] = "svoboda_light_outfit",
	["stalker_sv_rukzak_1"] = "svoboda_heavy_outfit",
	["stalker_sv_rukzak_2"] = "svoboda_heavy_outfit",
	["stalker_sv_rukzak_3_1"] = "svoboda_heavy_outfit",
	["stalker_sv_cook"] = "svoboda_heavy_outfit",
	["stalker_sv_max"] = "svoboda_heavy_outfit",
	["stalker_svoboda_heavy"] = "svoboda_heavy_outfit",
	["stalker_sv_hood_91"] = "svoboda_gaz_outfit_m1",
	["stalker_sv_hood_9"] = "svoboda_heavy_gaz_outfit_m1",
	["stalker_sv_nauchniy"] = "freedom_scientific_outfit",
	["stalker_sv_exoskeleton"] = "svoboda_exoskeleton",
	["stalker_sv_leader"] = "outfit_svoboda_m1"
}

-- ≈сли ничего не нашло по пр€мому соответствию, то будет поиск по части названи€
-- ѕор€док следовани€ в таблице имеет значение!! —ортировать еЄ нельз€!
-- Ѕессмысленно сначала искать по "neytral", а потом - по "stalker_neytral"!
-- ћожно только наоборот.
-- ѕодтаблица npc_names даЄт возможность указывать пр€мо им€ непис€ и его индивидуальный броник
local sect_by_visual_part = {
	["stalker_bandit"] = {
		sect = "bandit_outfit"
	},
	["stalker_do"] = {
		sect = "dolg_outfit"
	},
	["stalker_ki"] = {
		sect = "killer_outfit"
	},
	["stalker_mo"] = {
		sect = "monolit_outfit"
	},
	["neytral"] = {
		npc_names = {
			["esc_wolf"] = "neytral_gaz_outfit_m2",
			["esc_stalker_fanat"] = "neytral_gaz_outfit_m2",
			["esc_fox"] = "neytral_gaz_outfit_m2",
			["esc_provodnik"] = "neytral_gaz_outfit_m2",
			["gar_hellcar"] = "neytral_gaz_outfit_m2",
			["gar_seryi"] = "neytral_gaz_outfit_m2",
			["agr_krot"] = "neytral_gaz_outfit_m2"
		},
	},
	["stalker_neytral_rukzak"] = {
		sect = "outfit_stalker_m2"
	},
	["stalker_neytral"] = {
		sect = "stalker_outfit"
	},
	["soldier_bandana"] = {
		sect = "outfit_soldier_m1"
	},
	["soldier_beret"] = {
		sect = "outfit_soldier_m1"
	},
	["stalker_sv_balon_1"] = {
		sect = "svoboda_heavy_outfit"
	}
}

-- веро€тность выпадени€ бронежилетов и диапазон состо€ний выпавших бронежилетов и оружи€
-- condition - диапазон состо€ний выпавших бронежилетов и оружи€
-- probability_outfit - веро€тность выпадени€ бронежилетов
item_cond = {default = { prob = 0.15, min = 5, max = 95 }}

local iniFileName = "misc\\death_generic.ltx"
local death_ini = g_ini_file(iniFileName)


function init()
	local n, community, result, id, value, t, ammo
	local dfcy = gm_dfcy[level.get_game_difficulty()+1]
	n = death_ini:line_count("wpn_loaded_by_difficulty")
	for i=0,n-1 do
		result, id, value = death_ini:r_line("wpn_loaded_by_difficulty",i,"","")
		ammo_dfcy[id] = tonumber(value)
	end
	ammo_dfcy.current = ammo_dfcy[dfcy]

	n = death_ini:line_count("item_prob_by_difficulty")
	for i=0,n-1 do
		result, id, value = death_ini:r_line("item_prob_by_difficulty",i,"","")
		item_dfcy[id] = tonumber(value)
	end
	item_dfcy.current = item_dfcy[dfcy]

	local item_count_section = string_format("item_count_%s",dfcy)	-- зависимость от сложности игры
	n = death_ini:line_count(item_count_section)

	for i=0,n-1 do
		result, id, value = death_ini:r_line(item_count_section,i,"","")
		if string_sub( id, 1, 5 ) == "ammo_" then ammo = getIniValueU32Simple(id, "box_size")
		else ammo = nil
		end
		count_by_level[id] = {ammo = ammo}
		t = parse_nums(value)	-- Ќужно распарсить value в минимум и максимум
		if t[1] then count_by_level[id].min = tonumber(t[1])
			if t[2] then count_by_level[id].max = tonumber(t[2])
			else count_by_level[id].max = count_by_level[id].min
			end
		else
			count_by_level[id].min, count_by_level[id].max = 0, 0
	end	end


	n = death_ini:line_count("item_cond_by_comms")	-- веро€тность выпадени€ брони у члена группировки и качество брони и оружи€
	for i=0,n-1 do
		result, community, value = death_ini:r_line("item_cond_by_comms",i,"","")
		t = parse_nums(value)	-- Ќужно распарсить value в веро€тность и мин. и макс. годность.
		if t[1] and t[2] and t[3] then item_cond[community] = {prob = tonumber(t[1]), min = tonumber(t[2]), max = tonumber(t[3])}
		end
		if death_ini:section_exist(community) then
			item_by_comms[community] = {}	-- веро€тность встретить вещь у члена группировки
			local l = death_ini:line_count(community)
			for i=0,l-1 do
				result, id, value = death_ini:r_line(community,i,"","")
				if count_by_level[id] then item_by_comms[community][id] = tonumber(value) end
	end	end	end

	local level_name = level.name()	-- веро€тность встретить вещь на локации
	-- todo: вернуть зависимость от ѕќ—≈ў≈ЌЌџ’ локаций.
	if not death_ini:section_exist(level_name) then level_name = "default" end
	n = death_ini:line_count(level_name)
	for i=0,n-1 do
		result, id, value = death_ini:r_line(level_name,i,"","")
		if count_by_level[id] then mul_by_level[id] = tonumber(value) end
	end

	n = death_ini:line_count("item_dependence")	-- таблица зависимостей боеприпасов к оружию
	-- todo: сделать нормальный кэш конфигов отдельным скриптом, и ¬≈«ƒ≈ брать из него.
	local vvv
	for i=0,n-1 do
		result, id, value = death_ini:r_line("item_dependence",i,"","")
		item_dependence[id] = {}
		vvv = parse_names(value)
		for k,v in pairs(vvv) do
			item_dependence[id][v] = true
		end
	end


	n = death_ini:line_count("delete_items")	-- ѕредметы, которые следует удал€ть
	for i=0,n-1 do
		result, id, value = death_ini:r_line("delete_items",i,"","")
		always_delete[id] = true
	end
	
	for k,v in pairs(babah.mines.sect) do
		if v["addExplosive"] then
			always_delete[v["addExplosive"]] = true
		end
	end

	n = death_ini:line_count("keep_items")	-- ѕредметы, которые нельз€ удал€ть (квестовые например)
	for i=0,n-1 do
		result, id, value = death_ini:r_line("keep_items",i,"","")
		if value == "true" then	always_keep_item[id] = true end
	end

	n = death_ini:line_count("names_info")	-- инфопорции дл€ трупов
	for i=0,n-1 do
		result, id, value = death_ini:r_line("names_info",i,"","")
		if value then names_info[id] = value end
	end

	inited = true
end

local	inv_list = {}
function on_death(npc_id)
	if not inited then init() end
	local npc
	if npc_id then npc = level.object_by_id(npc_id) end
	if npc == nil then return end
	--' —прашиваем у серверного объекта: генерились ли предметы
	local sim = alife()
	if not sim then
		abort("—ервер сдох !!!")
		return
	end
--	watcher_act.removeKnife(npc)
	local se_obj = sim:object(npc:id())
	if se_obj == nil or se_obj.death_droped == true then return end
	se_obj.death_droped = true

	local community = npc:character_community()
	
	local icnd = item_cond[community]
	if not icnd then icnd = item_cond.default end
	
	local item_in_slot, loaded_ammo
	for slot = 1,2 do
		item_in_slot = npc:item_in_slot(slot)
		if item_in_slot and IAmAWeaponFireOnly[item_in_slot:clsid()] then
			loaded_ammo = item_in_slot:get_ammo_in_magazine()
			item_in_slot:unload_magazine()
			item_in_slot:set_ammo_elapsed(math_ceil(ammo_dfcy.current * loaded_ammo))
	end	end

	local grant_item = {}
	local ini = npc:spawn_ini()	-- ѕроверка на отсутствие спауна лута
	if ini and ini:section_exist("dont_spawn_loot") then
		grant_item = nil
		npc:iterate_inventory(removeAlways, npc)
	else
		npc:iterate_inventory(check_inv, npc)

		-- список предметов, которые остаютс€ или будут добавлены в трупик
		local spawn_items = item_by_comms[community]
		if spawn_items then
			for k,v in pairs(spawn_items) do
				-- ѕо каждому виду объектов необходимо получить зависимости
				if check_item_dependence(npc, k) and mul_by_level[k] then
					-- решаем: будет, или нет, todo: добавить зависимость от уровн€ непис€
					if (mul_by_level[k] * v * item_dfcy.current) > math_random() then
						grant_item[k] = math_ceil(math_random(count_by_level[k].min, count_by_level[k].max))
		end	end	end	end

		for i=1,#inv_list do
			local section = inv_list[i].section
			if grant_item[section] then
				if grant_item[section] > 0 then
					if not count_by_level[section].ammo then
						grant_item[section] = grant_item[section] - 1
					end
				elseif not inv_list[i].protected then
					release_item(inv_list[i].id, npc)
				end
			elseif not inv_list[i].protected then
				release_item(inv_list[i].id, npc)
			end
			--
			--”дал€ем рандомное кол-во патронов из пачки
			local obj = level.object_by_id(inv_list[i].id)
			if obj:is_ammo() then
				local ammo_sz = get_ammo_size(obj)
				set_ammo_size(obj, ammo_sz > 0 and math.random(ammo_sz) or 1)
			end
		end

		local count_ceil
		local count_ammo = 0
		for k,v in pairs(grant_item) do
			for i=1,v do
				if count_by_level[k] and count_by_level[k].ammo then
					--count_ceil = math_ceil(count_by_level[k].ammo*ammo_dfcy.current)
					--if count_ceil > 0 then
					--	count_ammo = math_ceil(math_random( count_ceil/2, count_ceil ))
					--end
					--create_ammo(npc, k, count_ammo ) --KRodin: спавн патронов излишен, т.к. огср их из непис€ не удал€ет.
				else create_item(npc, k)
		end	end	end

	end

	local vis, sect
	local npc_name = protected_items.get_obj_name(npc)
	if grant_item and string_sub(npc:section(), 1, 5) ~= "arena" and community ~= "arena_enemy" and
	  npc_name ~= "yan_specnaz_dead" and npc_name ~= "x16_stalker_ghost" then 
		local t = amk.read_stalker_params(se_obj)
		if t then
			vis = t.visual
			vis = Parse_StrToTbl(vis,"\\")
			vis = vis[#vis]
		if vis then
			sect = visuals[vis]
			if not sect then
				for k,v in pairs(sect_by_visual_part) do
					if string_find(vis, k) then
						if v.sect then
							sect = v.sect
							break
						elseif v.npc_names then
							sect = v.npc_names[npc_name]
							if sect then break end
	end	end	end	end	end	end	end
			
	if sect and icnd.prob * item_dfcy.current > math_random() then
		local obj = create_item(npc, sect)
		if obj then amk.start_timer("set_condition",1,{obj.id, math_random(icnd.min, icnd.max)})
	end	end

	if names_info[npc_name] then
		if db.actor:dont_has_info(names_info[npc_name]) then
			db.actor:give_info_portion(names_info[npc_name])
	end	end
	grant_item, inv_list = {}, {}	
end

function removeAlways(npc, item)
    if not npc or not item then return end
	local se_npc = alife():object(npc:id())
	local se_obj = alife():object(item:id())
	if se_npc and se_obj then
		local section = item:section()
		if always_delete[section]
			or (section == "device_torch_clon" or section == "device_torch") and not se_npc.torch_on
		then
			release_item(item:id(), npc)
		end
	end
end

function check_inv(npc, item)
    if not npc or not item then return end
	local se_npc = alife():object(npc:id())
	local se_obj = alife():object(item:id())
	if se_npc and se_obj then
		local section = item:section()
		if always_delete[section]
			or not (always_keep_item[section] or protected_items.doNotTouchAnything(item))
			or (section == "device_torch_clon" or section == "device_torch") and not se_npc.torch_on
		then
			inv_list[#inv_list+1] = {id = item:id(), section = section, protected = false}
		else
			inv_list[#inv_list+1] = {id = item:id(), section = section, protected = true}
		end
	end
end

function set_weapon_drop_condition(item)
	-- local condition  = (math.random(15)+75)/100
	-- item:set_condition(condition)	
end

function check_item_dependence(npc, section)	-- есть ли хоть один из зависимых объектов у персонажа ?
	if npc then
		if item_dependence[section] == nil then return true end
		for k,v in pairs(item_dependence[section]) do
			local obj = npc:object(k)
			if obj and npc:marked_dropped(obj) ~= true then return true end
		end
	end
	return false
end

function release_item(id, npc)
    local found = level.object_by_id( id )
    if found then
      if not found:parent() then
        local sobj = alife():object( id )
        if sobj then
          alife():release( sobj )
        end
      elseif found:parent():id() == npc:id() then
	    npc:mark_item_dropped( found )
		local sobj = alife():object( id )
		if sobj then
			alife():release( sobj )
		end
      end
    end
end

function create_item(npc, section)
	return alife():create(section, npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
end

function create_ammo(npc, section, size)
	if size < 1 then size = 1 end
	return se_respawn.create_ammo(section, npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id(), size)
end


-- количество патронов в пачке
function get_ammo_size(obj)
	return obj:get_current_ammo()
end

function set_ammo_size(obj, size)
	obj:set_ammo_box_curr(size)
end
