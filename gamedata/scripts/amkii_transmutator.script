--[[
Developed by AMK-Team
File:  amkII_transmutator.script
Copyright:  ©  AMK-Team 2009
Author: Refresh
Since: 14.01.2009 1:04
--]]

oDevice = nil
local aArtsInfo = nil      -- table данные артов в инвентаре
local aArtsInventory = nil -- table список объектов артов в инвентаре
local aInterval = nil      -- integer кол-во ячеек в инв. скролле
local aRecInterval = nil   -- integer кол-во ячеек в рецептном скролле
local aAnomaly = nil       -- string секция аномалии вблизи
local anomaly_name = nil   -- string название аномалии
local txtNotkomp = ""      -- string название недостающих компонентов
local txtVremya = ""       -- string время варки
local aRecipts = nil       -- table все рецепты для аномалии
local aReciptsHave = nil   -- table имеющиеся у ГГ рецепты для аномалии
local aRecsInfo = nil      -- table данные результатов варки для рецептного скролла
local aRecSections = nil   -- table список секций артов в рецептном скролле
local aAnomId = nil        -- integer id аномалии вблизи
local iInfo = nil          -- string название инфопоршня рецепта
local aAa = nil
local oRes = nil
local oNotkomp = nil


-- Инфа для кнопок на скроллбаре.
local aScrollBar = {
	{x =  73, y = 155,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 128, y = 155,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 183, y = 155,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 238, y = 155,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 293, y = 155,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 348, y = 155,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil}
}

-- Инфа для кнопок на панели артефактов.
local aCmpnSlots = {
	{x =  73, y = 58,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 128, y = 58,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 183, y = 58,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 238, y = 58,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 293, y = 58,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 348, y = 58,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil}
}

-- Инфа для кнопок на рецептбаре.
local aRecBar = {
	{x =  92,  y = 235,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 171,  y = 235,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 251,  y = 235,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 329,  y = 235,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil}
}

-- Заспавнить предмет в инвентарь к актору.
function amkCreateItemActor( sItemSection )
	local oSim = alife()
	if oSim and sItemSection then
		return oSim:create( sItemSection, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id() )
	end
end

-- Удалить предмет.
function amkDelObj( iId )
	local oSim = alife()
	if iId and oSim then
		local sobj = oSim:object( iId )
		if sobj then
			oSim:release( sobj )
		end
	end
end

-- Включить девайс.
function amkEnableDevice( iLevelDevice )
	local actor = db.actor
	if oDevice or not actor or not actor:alive() then
		return
	end
	level.start_stop_menu( level.main_input_receiver(), true )
	amkCreateItemActor( "amk_transmutator" )
	aAa = {}
	aArtsInfo = {}
	aRecsInfo = {}
	aRecSections = {}
	aArtsInventory = {}
	aInterval = {1, 6}
	aRecInterval = {1, 4}
	local aid, apos, arad, adist = amk_anoms.get_nearest_anomaly( actor ) 
	if aid and arad - adist > -2 then
		local an = level.object_by_id( aid )
		if an then
			aAnomaly = an:section()
			aAnomId = aid
		end
	end
	-- если вблизи есть аномалия, заполняем таблицу с рецептами
	if aAnomaly then
		aRecipts, anomaly_name, aAa = amk_mod.fill_recepti_est( aAnomaly )
		aReciptsHave = {}
		if type( aRecipts ) == "table" then
			for info, recept in pairs( aRecipts ) do
				-- у ГГ есть такой рецепт: заносим в таблицу
				if actor:has_info( info ) then
					aReciptsHave[info] = {}
					for k, v in pairs( recept ) do
						if type(v) == "table" then
							aReciptsHave[info][k] = {}
							for i, j in pairs( v ) do
								aReciptsHave[info][k][i] = j
							end
						else
							aReciptsHave[info][k] = v
						end
						if k == "cel" then
							for m, n in pairs( v ) do
								local uje_est = false
								for i = 1, table.getn( aRecSections ) do
									if aRecSections[i] == m then
										uje_est = true
									end
								end
								if not uje_est then
									table.insert( aRecSections, m )
								end
							end
						end
					end
				end
			end
		end
	end
	CAmkMergerArtefact()
	oDevice = CAmkDeviceTransmutator( iLevelDevice )
	level.start_stop_menu( oDevice, true )
end

--	Выключить девайс.
function amkDisableDevice()
	if oRes then
		oDevice:DetachChild( oRes )
	end
	if oNotkomp then
		oDevice:DetachChild( oNotkomp )
	end
	oDevice	= nil
	aArtsInfo  = nil
	aRecsInfo = nil
	aRecSections = nil
	aArtsInventory 	= nil
	aInterval = nil
	aRecInterval = nil
	aAnomaly = nil
	aAnomId = nil
	iInfo = nil
	aAa = nil
	aReciptsHave = nil
	aRecipts = nil
	oRes = nil
	oNotkomp = nil
	for k, tbl in pairs( aScrollBar ) do
		tbl.oSlot = nil
		tbl.iSectIndex = nil
	end
	for k, tbl in pairs( aCmpnSlots ) do
		tbl.oSlot = nil
		tbl.iSectIndex = nil
	end
	for k, tbl in pairs( aRecBar ) do
		tbl.oSlot = nil
		tbl.iSectIndex = nil
	end
end

-- Использовать трансмутатор
function amkUseTransmutator( oItem )
	if oItem:section() == "amk_transmutator" then
		amk.start_timer( "amkUseTransmutator", 0.2, oItem:id() )
	end
end

function get_anom_name()
	local s_name = "Рецепты пока в разработке"
	if anomaly_name then
		s_name = anomaly_name
	end
	return s_name
end


---' CAmkMergerArtefact
class "CAmkMergerArtefact"

function CAmkMergerArtefact:__init()
	self:IterateInventory()
	if table.getn(aArtsInventory) > 0 then
		self:SaveInfo( "Inv" )
	end
	if table.getn( aRecSections ) > 0 then
		self:SaveInfo( "Rec" )
	end
end

--	Итерация по инвентарю актора и поиск в нем артов.
function CAmkMergerArtefact:IterateInventory()
	local actor = db.actor
	local itemsToDelete = {}
	actor:inventory_for_each(
		function( item, npc )
			if amk_mod.is_komponent( item:section() ) then
				table.insert( aArtsInventory, item )
				itemsToDelete[item:id()] = true
			end
		end
	)
	actor:iterate_inventory(
	function( obj, item )
		if amk_mod.is_komponent( item:section() ) then
			if not itemsToDelete[item:id()] then
				table.insert( aArtsInventory, item )
			end
		end
	end,
	actor
	)
end

-- SaveInfo(имя скроллбара)
-- Собираем и сохраняем в нужном нам виде информацию об артах и рецептах.
-- Тип скролла для сохранения (инвентарный - "Inv" / рецептный - "Rec").
function CAmkMergerArtefact:SaveInfo( iBarName )
	local aTmpTbl = {}
	local searchTbl, fillTbl
	if iBarName == "Inv" then
		searchTbl = aArtsInventory
		fillTbl = aArtsInfo
	else
		searchTbl = aRecSections
		fillTbl = aRecsInfo
	end
	for iKey, oArt in pairs( searchTbl ) do
		local sSection = nil
		if iBarName == "Inv" then
			sSection = oArt:section()
		else
			sSection = oArt
		end
		if iniSectionExistSimple( sSection ) then
			if not aTmpTbl[sSection] then
				aTbl = {}
				aTbl.iCount = 1
				aTbl.sSection = sSection
				aTbl.x = getIniValueU32Simple( sSection, "inv_grid_x" )
				aTbl.y = getIniValueU32Simple( sSection, "inv_grid_y" )
				aTbl.aArts = {}
				table.insert( aTbl.aArts, oArt )
				aTmpTbl[sSection] = aTbl
			elseif iBarName == "Inv" then
				aTbl = aTmpTbl[sSection]
				aTbl.iCount = aTbl.iCount + 1
				table.insert( aTbl.aArts, oArt )
			end
		end
	end
	for sKey, aValue in pairs( aTmpTbl ) do
		table.insert( fillTbl, aValue )
	end
end

---' CAmkDeviceTransmutator
class "CAmkDeviceTransmutator" ( CUIScriptWnd )

function CAmkDeviceTransmutator:__init( iLevelDevice ) super()
	self.iLevelDevice = iLevelDevice
	self:InitInterface()
	self:UpdScrollBar( aInterval[1], aInterval[2], "Inv" )
	self:UpdScrollBar( aRecInterval[1], aRecInterval[2], "Rec" )
end

function CAmkDeviceTransmutator:__finalize() 
end

-- Инициализация окна и статических элементов управления.
function CAmkDeviceTransmutator:InitInterface()
	self:Init(50,50,531,359)
	-- CUIStatic() Прикрепляем статический элемент 'фон'.
	self.oBackGround = CUIStatic()
	self.oBackGround:SetWindowName( "oBackGround" )
	self.oBackGround:SetAutoDelete( true )
	self.oBackGround:InitTexture( "ui\\amk_transmutator" )
	self.oBackGround:SetOriginalRect( 3, 7, 531, 359 )
	self.oBackGround:Init( 3, 7, 531, 359 )
	self:AttachChild( self.oBackGround )
	--CUIButton() Прикрепляем кнопку очистки панели компонентов для варки.
	self.oButtonClear = CUIButton()
	self.oButtonClear:SetWindowName( "oButtonClear" )
	self.oButtonClear:SetAutoDelete( true )
	self.oButtonClear:InitTexture( "ui\\amk_transmutator" )
	self.oButtonClear:SetOriginalRect( 248, 365, 23, 39 )
	self.oButtonClear:Init( 420, 62, 23, 39 )
	self:AttachChild( self.oButtonClear )
	self:AddCallback( "oButtonClear", ui_events.BUTTON_CLICKED, self.ClearSlots, self )
	-- CUIButton() Прикрепляем текстовый индикатор аномалии.
	self.oaAnomaly = CUIStatic()
	self.oaAnomaly:SetWindowName( "oaAnomaly" )
	self.oaAnomaly:SetAutoDelete( true )
	if aAnomaly then
		self.oaAnomaly:SetText( "Аномалия: "..get_anom_name() )
	else
		self.oaAnomaly:SetText( "" )
	end
	self.oaAnomaly:SetTextColor( 255, 168, 230, 29 )
	self.oaAnomaly:SetFont( GetFontGraffiti22Russian() )
	self.oaAnomaly:Init( 71, 133, 500,25 )
	self:AttachChild( self.oaAnomaly )
	-- CUIButton() Прикрепляем кнопку завершения работы'выход'.
	self.oButtonQuit = CUIButton()
	self.oButtonQuit:SetWindowName( "oButtonQuit" )
	self.oButtonQuit:SetAutoDelete( true )
	self.oButtonQuit:InitTexture( "ui\\amk_transmutator" )
	self.oButtonQuit:SetOriginalRect( 124, 393, 92, 25 )
	self.oButtonQuit:SetText( "Выход" )
	self.oButtonQuit:SetTextColor( 255, 0, 0, 0 )
	self.oButtonQuit:SetFont( GetFontGraffiti19Russian() )
	self.oButtonQuit:Init( 406, 302, 92, 25 )
	self:AttachChild( self.oButtonQuit )
	self:AddCallback( "oButtonQuit", ui_events.BUTTON_CLICKED, self.Quit, self )
	-- CUIButton() Прикрепляем кнопку на старт трансмутации'старт'.
	self.oButtonStart = CUIButton()
	self.oButtonStart:SetWindowName( "oButtonStart" )
	self.oButtonStart:SetAutoDelete( true )
	self.oButtonStart:InitTexture( "ui\\amk_transmutator" )
	self.oButtonStart:SetOriginalRect( 124, 393, 92, 25 )
	self.oButtonStart:SetText( "Запуск" )
	self.oButtonStart:SetTextColor( 255, 0, 0, 0 )
	self.oButtonStart:SetFont( GetFontGraffiti19Russian() )
	self.oButtonStart:Init( 189, 302, 92, 25 )
	self:AttachChild( self.oButtonStart )
	self:AddCallback( "oButtonStart", ui_events.BUTTON_CLICKED, self.Start, self )
	-- CUIButton() Прикрепляем кнопку управления СкроллБаром 'налево'.
	self.oButtonPrevLeft = CUIButton()
	self.oButtonPrevLeft:SetWindowName( "oButtonPrevLeft" )
	self.oButtonPrevLeft:SetAutoDelete( true )
	self.oButtonPrevLeft:InitTexture( "ui\\amk_transmutator" )
	self.oButtonPrevLeft:SetOriginalRect( 9, 393, 39, 23 )
	self.oButtonPrevLeft:Init( 24, 167, 39, 23 )
	self:AttachChild( self.oButtonPrevLeft )
	self:AddCallback( "oButtonPrevLeft", ui_events.BUTTON_CLICKED, self.PreviewScrollLeft, self )
	-- CUIButton() Прикрепляем кнопку управления СкроллБаром 'направо'.
	self.oButtonPrevRight = CUIButton()
	self.oButtonPrevRight:SetWindowName( "oButtonPrevRight" )
	self.oButtonPrevRight:SetAutoDelete( true )
	self.oButtonPrevRight:InitTexture( "ui\\amk_transmutator" )
	self.oButtonPrevRight:SetOriginalRect( 52, 393, 39, 23 )
	self.oButtonPrevRight:Init( 404, 167, 39, 23 )
	self:AttachChild( self.oButtonPrevRight )
	self:AddCallback( "oButtonPrevRight", ui_events.BUTTON_CLICKED, self.PreviewScrollRight, self )
	-- CUIButton() Прикрепляем кнопку управления РецептБаром 'налево'.
	self.oButtonRecLeft = CUIButton()
	self.oButtonRecLeft:SetWindowName( "oButtonRecLeft" )
	self.oButtonRecLeft:SetAutoDelete( true )
	self.oButtonRecLeft:InitTexture( "ui\\amk_transmutator" )
	self.oButtonRecLeft:SetOriginalRect( 9, 393, 39, 23 )
	self.oButtonRecLeft:Init( 24, 246, 39, 23 )
	self:AttachChild( self.oButtonRecLeft )
	self:AddCallback( "oButtonRecLeft", ui_events.BUTTON_CLICKED, self.ReceptScrollLeft, self )
	-- CUIButton() Прикрепляем кнопку управления РецептБаром 'направо'.
	self.oButtonRecRight = CUIButton()
	self.oButtonRecRight:SetWindowName( "oButtonRecRight" )
	self.oButtonRecRight:SetAutoDelete(true)
	self.oButtonRecRight:InitTexture( "ui\\amk_transmutator" )
	self.oButtonRecRight:SetOriginalRect( 52, 393, 39, 23 )
	self.oButtonRecRight:Init( 404, 246, 39, 23 )
	self:AttachChild( self.oButtonRecRight )
	self:AddCallback( "oButtonRecRight", ui_events.BUTTON_CLICKED, self.ReceptScrollRight, self )
end

-- Инициализируем элементы нашего псевдо СкроллБара.
function CAmkDeviceTransmutator:UpdScrollBar( iStartIndex, iFinalIndex, iBarName )
	local iCurrentButton = 0
	for iSectIndex = iStartIndex, iFinalIndex do
		local aButton, aSectInfo
		iCurrentButton = iCurrentButton + 1
		if iBarName == "Inv" then
			aButton = aScrollBar[iCurrentButton]
			aSectInfo = aArtsInfo[iSectIndex]
		elseif iBarName == "Rec" then
			aButton = aRecBar[iCurrentButton]
			aSectInfo = aRecsInfo[iSectIndex]
		end
		-- Очищаем обьект кнопки из таблицы видимых элементов.
		if aButton.oSlot then
			self:DetachChild( aButton.oSlot )
			aButton.oSlot = nil
		end
		-- Завершаем апдейт скролла если уже нет элементов для инициализации.
		if not aSectInfo then
			return
		end
		-- Получаем позицию иконки.
		local x = aSectInfo.x * 50
		local y = aSectInfo.y * 50
		-- Создаем псевдо слот для арта.
		local oScrollButton = CUIButton()
		oScrollButton:SetWindowName( "oScrollButton"..iSectIndex..iBarName )
		oScrollButton:SetAutoDelete( true )
		if aSectInfo.iCount ~= 0 then
			oScrollButton:InitTexture( "ui\\ui_icon_equipment" )
			oScrollButton:SetOriginalRect( x, y, aButton.wt, aButton.hg )
		end
		if aSectInfo.iCount > 1 then
			oScrollButton:SetText( tostring( aSectInfo.iCount ) )
			oScrollButton:SetTextColor( 255, 168, 230, 29 )
			oScrollButton:SetFont( GetFontGraffiti32Russian() )
		end
		oScrollButton:Init( aButton.x, aButton.y, aButton.wt, aButton.hg )
		self:AttachChild( oScrollButton )
		local sFuncString = "amkII_transmutator.oDevice:AddArtefact("..iSectIndex..",\""..iBarName.."\")"
		self:AddCallback( "oScrollButton"..iSectIndex..iBarName, ui_events.BUTTON_CLICKED, loadstring(sFuncString), self )
		aButton.oSlot = oScrollButton
	end
end

-- Полистать СкроллБар влево.
function CAmkDeviceTransmutator:PreviewScrollLeft()
	if aArtsInfo[aInterval[1] - 1] and aArtsInfo[aInterval[2] - 1] then
		aInterval = {aInterval[1] - 1, aInterval[2] - 1}
		self:UpdScrollBar( aInterval[1], aInterval[2], "Inv" )
	end
end

-- Полистать СкроллБар вправо.
function CAmkDeviceTransmutator:PreviewScrollRight()
	if aArtsInfo[aInterval[1] + 1] and aArtsInfo[aInterval[2] + 1] then
		aInterval = {aInterval[1] + 1, aInterval[2] + 1}
		self:UpdScrollBar( aInterval[1], aInterval[2], "Inv" )
	end
end

-- Полистать РецептБар влево.
function CAmkDeviceTransmutator:ReceptScrollLeft()
	if aRecsInfo[aRecInterval[1] - 1] and aRecsInfo[aRecInterval[2] - 1] then
		aRecInterval = {aRecInterval[1] - 1, aRecInterval[2] - 1}
		self:UpdScrollBar( aRecInterval[1], aRecInterval[2], "Rec" )
	end
end

-- Полистать РецептБар вправо.
function CAmkDeviceTransmutator:ReceptScrollRight()
	if aRecsInfo[aRecInterval[1] + 1] and aRecsInfo[aRecInterval[2] + 1] then
		aRecInterval = {aRecInterval[1] + 1, aRecInterval[2] + 1}
		self:UpdScrollBar( aRecInterval[1], aRecInterval[2], "Rec")
	end
end

-- Виндим клавиши для управления.
function CAmkDeviceTransmutator:OnKeyboard( DIK, KeyboardAction )
	CUIScriptWnd.OnKeyboard( self, DIK, KeyboardAction )
	if KeyboardAction == ui_events.WINDOW_KEY_PRESSED then
		if DIK == DIK_keys.DIK_ESCAPE then
			self:Quit()
		end
	end
	return true
end

-- Инициализация слота для результата трансмутации.
function CAmkDeviceTransmutator:InitResultButton( sArtSection )
	if iniSectionExistSimple( sArtSection ) then
		-- Получаем координаты для иконки.
		local x = getIniValueU32Simple( sArtSection, "inv_grid_x" ) * 50
		local y = getIniValueU32Simple( sArtSection, "inv_grid_y" ) * 50
		-- Инициализация слота.
		oRes = CUIButton()
		oRes:SetWindowName( "oButtonResult" )
		oRes:SetAutoDelete( true )
		oRes:InitTexture( "ui\\ui_icon_equipment" )
		oRes:SetOriginalRect( x, y, 50, 50 )
		oRes:Init( 430, 69, 50, 50 )
		self:AttachChild( oRes )
		self:AddCallback( "oButtonResult", ui_events.BUTTON_CLICKED, self.UpdateDevice, self )
	end
end

function CAmkDeviceTransmutator:UpdateDevice()
	aArtsInfo      = {}
	aArtsInventory = {}
	aRecsInfo      = {}
	aRecSections   = {}
	aInterval      = {1, 6}
	aRecInterval   = {1, 4}
	CAmkMergerArtefact()
	self:DetachChild( oRes )
	oRes = nil
	self:DetachChild( oNotkomp )
	oNotkomp = nil
	for k, tbl in pairs( aScrollBar ) do
		if tbl.oSlot then
			self:DetachChild( tbl.oSlot )
			tbl.oSlot = nil
		end
		tbl.iSectIndex = nil
	end
	for k, tbl in pairs( aCmpnSlots ) do
		if tbl.oSlot then
			self:DetachChild( tbl.oSlot )
			tbl.oSlot = nil
		end
		tbl.iSectIndex = nil
	end
	for k, tbl in pairs( aRecBar ) do
		if tbl.oSlot then
			self:DetachChild( tbl.oSlot )
			tbl.oSlot = nil
		end
		tbl.iSectIndex = nil
	end
	amk.oAmkLauncher:AddFunc( "UseTransmutator", "amkII_transmutator.amkEnableDevice(2)" )
	self:UpdScrollBar( aInterval[1], aInterval[2], "Inv" )
	self:UpdScrollBar( aRecInterval[1], aRecInterval[2], "Rec" )
end

-- Добавить артефакт на панель активных компонентов.
function CAmkDeviceTransmutator:AddArtefact( iSectIndex, iBarName )
	if oRes then
		self:UpdateDevice()
		return
	end
	local aSectInfo
	if iBarName == "Inv" then
		aSectInfo = aArtsInfo[iSectIndex]
	else
		amkII_transmutator.oDevice:ClearSlots()
		txtNotkomp = ""
		txtVremya  = ""
		if oNotkomp then
			oDevice:DetachChild( oNotkomp )
		end
		oNotkomp = nil
		aSectInfo = aRecsInfo[iSectIndex]
	end
	if aSectInfo.iCount == 0 then
		return
	end
	-- Итерируем по панели компонентов и ищем свободный слот.
	if iBarName == "Inv" then
		for iKey, aButton in pairs( aCmpnSlots ) do
			if not aButton.oSlot then
				aSectInfo.iCount = aSectInfo.iCount - 1
				-- Получаем координаты иконки.
				local x = aSectInfo.x * 50
				local y = aSectInfo.y * 50
				-- Инициализируем псевдо слот. (кнопку)
				local oCmpnSlot = CUIButton()
				oCmpnSlot:SetWindowName( "oCmpnSlot"..iKey )
				oCmpnSlot:SetAutoDelete( true )
				oCmpnSlot:InitTexture( "ui\\ui_icon_equipment" )
				oCmpnSlot:SetOriginalRect( x, y, 50, 50 )
				oCmpnSlot:Init( aButton.x, aButton.y, aButton.wt, aButton.hg )
				self:AttachChild( oCmpnSlot )
				local sFuncString = "amkII_transmutator.oDevice:DelArtefact("..iKey..")"
				self:AddCallback( "oCmpnSlot"..iKey, ui_events.BUTTON_CLICKED, loadstring(sFuncString), self )
				-- Сохраняем данные.
				aButton.oSlot = oCmpnSlot
				aButton.iSectIndex = iSectIndex
				-- Апдейтим СкроллБар.
				self:UpdScrollBar( aInterval[1], aInterval[2], "Inv" )
				break
			end
		end
	else
		local aCel
		local celName = ""
		local aRemove = false
		for info, recept in pairs( aReciptsHave ) do
			aCel = aReciptsHave[info]["cel"]
			if aCel and aCel[aSectInfo.sSection] then
				celName = game.translate_string( amk.get_inv_name( aSectInfo.sSection ) )
				if aReciptsHave[info]["remove_anomaly"] then
					aRemove = true
				end
				for aSect, k in pairs( aReciptsHave[info]["komp"] ) do
					if iniSectionExistSimple( aSect ) then
						for i = 1, table.getn( aArtsInfo ) do
							if aArtsInfo[i]["sSection"] == aSect and aArtsInfo[i]["iCount"] ~= 0 then
								self:AddArtefact( i, "Inv" )
								aReciptsHave[info]["komp"][aSect] = "added"
							end
						end
					end
				end
				local tblNotKomp = {}
				local CountLostKomp = 0
				for cSect, m in pairs( aReciptsHave[info]["komp"] ) do
					if aReciptsHave[info]["komp"][cSect] ~= "added" then
						table.insert( tblNotKomp, game.translate_string( amk.get_inv_name( cSect ) ) )
					end
				end
				-- есть все компоненты и есть рецепт, смотрим время варки
				if CountLostKomp == 0 then
					local txTime = ""
					local time_var = amk_mod.get_af_transform_param( "vremya", aReciptsHave[info], aReciptsHave )
					if type(time_var) == "table" then
						if time_var[1] ~= 0 then
							txTime = time_var[1].." дн "
						end
						if time_var[2] ~= 0 then
							txTime = txTime.." "..time_var[2].." час "
						end
						if time_var[3] ~= 0 then
							txTime = txTime.." "..time_var[3].." мин"
						end
					end
					txtVremya = txTime
				end
				if type(tblNotKomp) == "table" then
					txtNotkomp = table.concat(tblNotKomp, ", ")
				end
			end
		end
		-- показываем строку недостающих компонентов
		if string.len( txtNotkomp ) > 0 then
			oNotkomp = CUIStatic()
			oNotkomp:SetWindowName( "oNotkomp" )
			oNotkomp:SetAutoDelete( true )
			oNotkomp:SetText( "Для варки "..celName.." еще нужно: "..tostring( txtNotkomp ) )
			oNotkomp:SetTextColor( 255, 255, 0, 0 )
			oNotkomp:SetFont( GetFontGraffiti19Russian() )
			oNotkomp:Init( 30, 118, 470, 20 )
			self:AttachChild(oNotkomp)
		-- показываем строку времени варки по рецепту
		elseif string.len( txtVremya ) > 0 then
			oNotkomp = CUIStatic()
			oNotkomp:SetWindowName( "oNotkomp" )
			oNotkomp:SetAutoDelete( true )
			if aRemove then
				oNotkomp:SetText( celName..": удалит аномалию" )
			else
				oNotkomp:SetText( "Время варки "..celName..": "..tostring( txtVremya ) )
			end
			oNotkomp:SetTextColor( 255, 0, 255, 0 )
			oNotkomp:SetFont( GetFontGraffiti19Russian() )
			oNotkomp:Init( 140, 118, 470, 20 )
			self:AttachChild( oNotkomp )
		end
	end
end

-- Очистка панели компонентов для варки.
function CAmkDeviceTransmutator:ClearSlots()
	for iKey, aButton in pairs( aCmpnSlots ) do
		if aCmpnSlots[iKey] ~= nil then
			amkII_transmutator.oDevice:DelArtefact( iKey )
		end
	end
end

-- Удалить артефакт из панели компонентов.
function CAmkDeviceTransmutator:DelArtefact( iCmpnSlotIndex )
	aButton = aCmpnSlots[iCmpnSlotIndex]
	aSectInfo = aArtsInfo[aButton.iSectIndex]
	-- Если слот активный, то отключаем его.
	if aButton.oSlot then
		self:DetachChild( aButton.oSlot )
		aSectInfo.iCount = aSectInfo.iCount + 1
		aButton.iSectIndex = nil
		aButton.oSlot = nil
		self:UpdScrollBar( aInterval[1], aInterval[2], "Inv" )
	end
	if oNotkomp then
		self:DetachChild( oNotkomp )
		oNotkomp = nil
		txtNotkomp = ""
		txtVremya  = ""
	end
end

-- Выход.
function CAmkDeviceTransmutator:Quit()
	amkDisableDevice()
	self:GetHolder():start_stop_menu( self, true )
end

-- Старт трансмутации.
function CAmkDeviceTransmutator:Start()
	-- с пустыми слотами компонентов и вне аномалии не стартуем
	if not aAnomaly then
		return
	end
	local count = 0
	for i = 1, table.getn( aCmpnSlots ) do
		if aCmpnSlots[i] and aCmpnSlots[i].oSlot and aCmpnSlots[i].iSectIndex then
			count = count + 1
		end
	end
	if count == 0 then
		return
	end
	-- Попытаться трансмутировать артефакты.
	CAmkTransmutacion()
end

---' CAmkTransmutacion
class "CAmkTransmutacion"

-- Конструктор класса.
function CAmkTransmutacion:__init()
	self.sTransmutants = self:SearchSchemes()
	if self.sTransmutants ~= nil then
		self:CreateAtrefact()
	else
		self:Shooting()
	end
end

-- Поиск подходящей схемы трансмутации.
function CAmkTransmutacion:SearchSchemes()
	local sTransmutants
	local aCmpnSects = {}
	for iKey, aButton in pairs( aCmpnSlots ) do
		if aCmpnSlots[iKey].iSectIndex then
			table.insert( aCmpnSects, aArtsInfo[aCmpnSlots[iKey].iSectIndex].sSection )
		end
	end
		numArts = table.getn( aCmpnSects )
		for info, recept in pairs( aRecipts ) do
			local count = 0
			for k,v in pairs( aRecipts[info]["komp"] ) do
				-- считаем ,сколько компонентов в рецепте
				count = count + 1
			end
			if count == numArts then
				for i = 1, numArts do
					local af = aCmpnSects[i]
					if not aRecipts[info]["komp"][af] then
						break
					end
					if i == count then
						--перебрали все арты и есть результат
						if aRecipts[info]["cel"] then
							sTransmutants = aRecipts[info]["cel"]
						else
							sTransmutants = false
						end
						iInfo = info
					end
				end
			end
		end
	return sTransmutants
end

--	Создание артефакта трансмутанта.
function CAmkTransmutacion:CreateAtrefact()
	local actor = db.actor
	-- собираем табличку подготовленных для варки компонентов
	local komp = {}
	komp       = aRecipts[iInfo]["komp"]
	local cel               = self.sTransmutants
	local v_udachi          = amk_mod.get_af_transform_param( "v_udachi", aRecipts[iInfo], aAa )
	local v_virogd          = amk_mod.get_af_transform_param( "v_virogd", aRecipts[iInfo], aAa )
	local virogd            = amk_mod.get_af_transform_param( "virogd", aRecipts[iInfo], aAa )
	local vremya            = amk_mod.get_af_transform_param( "vremya", aRecipts[iInfo], aAa )
	local remove_anomaly    = amk_mod.get_af_transform_param( "remove_anomaly", aRecipts[iInfo], aAa )
	local remove_anomaly_id = aAnomId
	local result, udacha    = amk_mod.af_select_result( v_udachi, v_virogd, virogd, cel, komp )
	local info              = iInfo
	local lv = actor:level_vertex_id()
	local gv = actor:game_vertex_id()
	local pos = actor:position()
	if aAnomId then
		local lAnom = level.object_by_id( aAnomId )
		if lAnom then
			pos = vector():set(0,0,0)
			pos.x = lAnom:position().x + math.random( -50, 50 ) / 100
			pos.z = lAnom:position().z + math.random( -50, 50 ) / 100
			pos.y = lAnom:position().y + math.random( 30, 50 ) / 100
			lv = lAnom:level_vertex_id()
			gv = lAnom:game_vertex_id()
		end
	end
	if ( not cel and remove_anomaly == false ) or remove_anomaly == nil
		or not v_udachi or not v_virogd or not virogd or not vremya
		or v_udachi + v_virogd > 100
	then
		-- кривой рецепт  - выходим
		self:Shooting()
		return
	else
		if remove_anomaly then
			vremya = nil
		end	
		-- неудача
		if udacha == false then
			remove_anomaly = false
			info = nil
		end
		level.add_pp_effector( "teleport.ppe", 1524, false )
		amk_mod.as_start_universal_transform_timer( komp, result, pos, vremya, gv, lv, info, remove_anomaly, remove_anomaly_id )
		for i = 1, table.getn( aCmpnSlots ) do
			if aCmpnSlots[i].iSectIndex then
				local aButton = aCmpnSlots[i]
				local aArtInfo = aArtsInfo[aButton.iSectIndex]
				-- убрать артефакт из базы компонентов.
				local oObject
				for k, v in pairs( aArtInfo.aArts ) do
					oObject = v
					table.remove( aArtInfo.aArts, k )
					break
				end
				-- Удалить артефакт и очистить слот.
				if oObject then
					amkDelObj( oObject:id() )
				end
				oDevice:DetachChild( aButton.oSlot )
				aCmpnSlots[i].iSectIndex = nil
				aCmpnSlots[i].oSlot = nil
			end
		end
		-- на случай если захотим сварить такой же арт (для корректной строки недостающих компонентов)
		if aReciptsHave[iInfo] then
			for cSect, m in pairs( aReciptsHave[iInfo]["komp"] ) do
				if aReciptsHave[iInfo]["komp"][cSect] == "added" then
					aReciptsHave[iInfo]["komp"][cSect] = true
				end
			end
		end
	end
	if remove_anomaly then
		oDevice:Quit()
	end
end

-- Долбонуть актора из-за того что пихает в девайс все, что попало.
function CAmkTransmutacion:Shooting()
	oDevice:Quit()
	level.add_pp_effector( "blink.ppe", 234, false )
	local actor = db.actor
	local posActor = actor:position()
	particles_object( "anomaly2\\electra2_blast" ):play_at_pos( posActor )
	sound_object( "anomaly\\electra_blast1" ):play_at_pos( actor, posActor )
	local h = hit()
	h.impulse = 0
	h.draftsman = actor
	h.direction = vector():set( 0, 0, 0 )
	h:bone( "bip01_spine" )
	h.power = 0.3
	h.type = hit.shock 
	actor:hit( h )
end