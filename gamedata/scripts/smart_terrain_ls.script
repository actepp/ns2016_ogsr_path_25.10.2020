log_level = 12	-- уровень значимости для вывода в лог. Спрашивается из xr_gulag, se_stalker, se_monster
		-- 0 - выводить все (ОЧЕНЬ тормозит при завершении и переходе между локами,
		-- 9 - выводить самый минимум, и отключить часть проверок
		-- осмысленные значения сейчас: 0, 1, 2, 9, 10, 11, 12, 19, 20
local string_find, string_format, string_gsub = string.find, string.format, string.gsub
local table_getn = table.getn

function log(ct, ...)
	get_console():execute( string_format("load ~%s~: [smart_terrain] %s",ct, string_format(...)))
	if ct == "error" then get_console():execute("flush") end
end

function list_table(v, name, t_level)
	local name = name or "item"
	if t_level then
		for i = 1, t_level do name = string_format("__%s", name) end
	else t_level = 0
	end
	for kk,vv in pairs(v) do
		if vv and type(vv) == "table" then
			log("info", "%s: %s, type: table", name, kk)
			list_table(vv, kk, t_level + 1)
		else log("info", "%s: %s, type: %s, value: %s", name, kk, type(vv), tostring((type(vv)=="userdata" and "*") or vv))
	end	end
end

--[[------------------------------------------------------------------------------------------------------------------
Smart Terrain (механизм, организовывающий всех сталкеров и некоторых монстров в сцены)
Чугай Александр
!без симуляции не работает!
--------------------------------------------------------------------------------------------------------------------]]

local check_period

if not editor() then
	check_period = game.CTime()
	check_period:setHMSms( 0, 0, 0, 50000 )
	CTime_0 = game.CTime()
end

local monster_classes

local disagreed, agreed, agreed_exclusive = 0, 1, 2

local smart_section = "smart_terrains"

local smart_terrains = {}
local smart_terrains_by_name = {}
smart_for_wounded = {}
exclusives = {}

--[[ список всех серверных объектов смартов, которые зарегистрированы в симуляторе
Формат:
  smart_terrains = {
    level_name = { id=obj, id=obj, ... },
    level_name = { id=obj, id=obj, ... },
    ...
  }
]]

----------------------------------------------------------------------------------------------------------------------
-- Разные полезные функции
----------------------------------------------------------------------------------------------------------------------
-------------- помощники для чтения ini (custom data) -------------------
-- TODO убрать их
function r_str( spawn_ini, section, line, default )
	if spawn_ini:line_exist( section, line ) then
		return spawn_ini:r_string( section, line )
	else return default
	end
end

function r_num( spawn_ini, section, line, default )
	if spawn_ini:line_exist( section, line ) then
		return spawn_ini:r_float( section, line )
	else return default
	end
end

function r_2nums( spawn_ini, section, line, def1, def2 )
	if spawn_ini:line_exist( section, line ) then
		-- если default-ов больше, чем значений в ini, то забить недостающие последним значением из ini
		local t = parse_nums( spawn_ini:r_string( section, line ) )
		local n = table_getn( t )

		if n == 0 then return def1, def2
		elseif n == 1 then return t[1], def2
		else return t[1], t[2]
		end
	end
	return def1, def2
end

----------------------------------------------------------------------------------------------------------------------
-- Класс "se_smart_terrain". Обеспечивает поддержку smart terrain в ОФЛАЙНЕ.
-- Унаследован от скриптовой зоны.
----------------------------------------------------------------------------------------------------------------------
class "se_smart_terrain" ( cse_alife_smart_zone )

function se_smart_terrain:__init( section ) super( section )
	self.initialized = false
	self.registred = false
end

function se_smart_terrain:detect_probability()
	return 0
end

-- сохранение
function se_smart_terrain:STATE_Write( packet )
	cse_alife_smart_zone.STATE_Write( self, packet )
	utils.w_CTime( packet, self.duration_end )
	utils.w_CTime( packet, self.idle_end )
	if self.gulag_working then
		packet:w_bool( true )
		self.gulag:save_common( packet )
		local n = 0
		for id, v in pairs( self.npc_info ) do n = n + 1 end
		packet:w_u8( n )
		for id, v in pairs( self.npc_info ) do
			packet:w_u16( id )
			packet:w_u8( v.o_group )
			packet:w_u8 ( v.o_squad )
			packet:w_bool( v.exclusive )
			utils.w_CTime ( packet, v.stay_end )
			self.gulag:save_obj( packet, id )
		end
		packet:w_bool( self.population_locked )
	else packet:w_bool( false )
	end
end

-- восстановление
function se_smart_terrain:STATE_Read( packet, size )
	cse_alife_smart_zone.STATE_Read( self, packet, size )
	-- printf( "before read_params" )
	self:read_params()
	-- под LevelEditor не пытаться читать из пакета ничего
	if editor() then return end
	--  printf( "name=%s, script_version=%d", self:name(), self.script_version )
	self.duration_end = utils.r_CTime( packet )
	self.idle_end = utils.r_CTime( packet )
	self.gulag_working = packet:r_bool()

	if self.gulag_working then	-- если есть работающий гулаг
		self.check_time = CTime_0
		self.gulag:load_common( packet )
		local n = packet:r_u8()
		-- printf( "npc_info=%s", tostring( n ) )
		local o_id, o
		for i = 1, n do
			o_id = packet:r_u16()
			self.npc_info[o_id] = {}
			o = self.npc_info[o_id]
			o.o_group = packet:r_u8()
			o.o_squad = packet:r_u8()
			o.exclusive = packet:r_bool()
			o.stay_end = utils.r_CTime( packet )
			self.gulag:load_obj( packet, o_id )
		end
		self.population_locked = packet:r_bool()
	end
	--  printf( "after read [%s]", self:name())
	--  self:print()
end

-- инициализировать работу смарт террейна.
-- после этой функции смарт ПОЛНОСТЬЮ работоспособен.
-- вызывается из всех мест, которые могут вызвать другие объекты:
--   se_smart_terrain:enabled()
--   se_smart_terrain:update()
--   xr_gulag.setup_gulag_and_logic_on_spawn()
--   xr_gulag.get_npc_gulag()
--   xr_gulag.get_gulag_by_name()
--   xr_gulag.get_gulag_by_sid()

function se_smart_terrain:initialize_if_needed()
	if not self.initialized then
		self:get_se_objs()
		self:preserve_exclusives()
		self.initialized = true
	end
end


-- зарезервировать места для эксклюзивных персонажей
function se_smart_terrain:preserve_exclusives()
	local e = exclusives[self.nm]
	if e then
		self.exclusives = e
		self.gulag.capacity_non_exclusive = self.gulag.capacity_non_exclusive - e
		if not (self.gulag.capacity_non_exclusive >= 0) then
			-- Думали, не бывает ? Еще как бывает !!!
			--log("error", "%s:preserve_exclusives: self.gulag.capacity_non_exclusive = %s !", self.nm, self.gulag.capacity_non_exclusive)
			--get_console():execute("flush")
			self.gulag.capacity_non_exclusive = 0
		end
		exclusives[self.nm] = nil
	else self.exclusives = 0
	end
end

-- получить серверные объекты персонажей
function se_smart_terrain:get_se_objs()
	local sim = alife()
	local obj
	for id, v in pairs( self.npc_info ) do
		obj = sim:object( id )
		if not obj then
			abort( "[smart_terrain %s] can't get server object id=%d", self.nm, id )
		end
		--sim_statistic.add( obj )
		self:fill_npc_info( obj, v )
	end
end

-- заполнить информацию о персонаже
-- у монстров нету метода profile_name()
-- TODO передавать в предикаты не npc_info, а объект
function se_smart_terrain:fill_npc_info( obj, npc_info )
	if not npc_info then npc_info = {} end
	npc_info.se_obj = obj
	npc_info.class_id = obj:clsid()
	npc_info.section_name = obj:section_name()
	npc_info.name = obj:name()
	npc_info.story_id = obj.m_story_id
	npc_info.community = self:get_obj_community( obj )
	npc_info.profile_name = obj.profile_name and obj:profile_name()
	npc_info.rank = obj:rank()
	npc_info.group = obj:g_group()
	npc_info.squad = obj:g_squad()
	npc_info.team = obj:g_team()
	if npc_info.profile_name then
		npc_info.is_sniper = string_find( npc_info.profile_name, "sniper", 1, true ) ~= nil
	end
	npc_info.is_sniper_name = string_find( npc_info.name, "sniper", 1, true ) ~= nil
	local t = obj.smart_terrain_conditions
	if t then t = t[self.nm] end
	npc_info.cond = t
	return npc_info
end

--lsclon
--' Возращает: группировку сталкера/true или вид монстра/false.
-- на входе серверный объект.
-- вызывается из: fill_npc_info(),smart_terrain_accepts_obj(),update_obj_rank()
function se_smart_terrain:get_obj_community(obj)
	local cls = obj:clsid()
	local sect = obj:section_name()
	if cls == clsid.script_stalker then
		return obj:community(),true
	end
	if string_find(sect,"_arena", 1, true) or string_find(sect,"aem_", 1, true) then
		return "arena_monstr"
	end
	if monster_classes[cls] == "boar" and string_find(sect,"medwed", 1, true) then
		return "medwed",false
	end
	if monster_classes[cls] == "boar" and string_find(sect,"spider", 1, true) then
		return "spider",false
	end
	if monster_classes[cls] == "fracture" and string_find(sect,"bibliotekar", 1, true) then
		return "bibliotekar",false
	end
	if monster_classes[cls] == "tushkano" and string_find(sect,"eltush", 1, true) then
		return "eltush",false
	end
	if monster_classes[cls] == "tushkano" and string_find(sect,"mouse", 1, true) then
		return "mouses",false
	end
	if monster_classes[cls] == "tushkano" and string_find(sect,"ratlike", 1, true) then
		return "ratlike",false
	end
	if monster_classes[cls] == "tushkano" and string_find(sect,"rat", 1, true) then
		return "rat",false
	end
	if monster_classes[cls] == "tushkano" and string_find(sect,"swamp", 1, true) then
		return "swamp",false
	end
	if monster_classes[cls] == "tushkano" and string_find(sect,"tarakan", 1, true) then
		return "tarakan",false
	end
	return monster_classes[cls],false
end

-- инициализация.
-- чтение custom data.
function se_smart_terrain:read_params()
	local ini  = self:spawn_ini()
	local sect = "smart_terrain"

	if not ini:section_exist( sect ) then
		sect = "gulag1"
		if not ini:section_exist( sect ) then
			-- abort( "[smart_terrain %s] no configuration!", self:name() )
			self.disabled = true
			return
		end
	end
	if not ini:line_exist( sect, "type" ) then abort( "[smart_terrain %s] type is not specified", self.nm) end

	local gp	= {}
	self.npc_info	= {}	-- group и squad для каждого npc
	self.gparams	= gp	-- настройки гулага

	gp.type = ini:r_string( sect, "type" )
	gp.preset_name = r_str ( ini, sect, "preset" )
	gp.capacity = r_num ( ini, sect, "capacity", 100 ) -- ёмкость. а настоящая ёмкость = min(эта_ёмкость, ёмкость гулага)
	gp.squad = r_num ( ini, sect, "squad" )

	gp.idle_min,     gp.idle_max      = r_2nums( ini, sect, "idle",       0,     0 )
	gp.duration_min, gp.duration_max  = r_2nums( ini, sect, "duration",   10000, 10001 )
	gp.stay_min,     gp.stay_max      = smart_terrain_params.get_stay_time_interval( r_str( ini, sect, "stay", "default" ) )
	gp.respawn     = r_str ( ini, sect, "respawn" )

	gp.cond = r_str( ini, sect, "cond" )
	if gp.cond then gp.cond = xr_logic.parse_condlist( nil, sect, "cond", gp.cond) end
	gp.groups = r_str( ini, sect, "groups" )
	if gp.groups then gp.groups = parse_nums( gp.groups ) end

	self.accepted_communities = nil

	local t = r_str( ini, sect, "communities" )
	if t then
		t = parse_names( t )
		self.accepted_communities = {}
		for i, v in ipairs( t ) do
			self.accepted_communities[v] = true
			if not smart_for_wounded[v] then
				smart_for_wounded[v] = {}
			end
			if self.id ~= 65535 and not smart_for_wounded[v][self.id] then
				smart_for_wounded[v][self.id] = self:name()
			end
		end
	end

	self.rank_inc_min = sys_ini:r_string( "smart_terrain_rank_change", "min" ) or 1
	self.rank_inc_max = sys_ini:r_string( "smart_terrain_rank_change", "max" ) or 30
	self.population_locked = false
	self.gulag = xr_gulag.gulag( self, self.gparams.type, self.gparams.squad, self.gparams.groups, self.npc_info, self.gparams.capacity )
	self.gulag_working = false
end

-- подходит ли персонаж по предустановкам.
-- если такой предустановки нету, то он всегда подходит.
function se_smart_terrain:check_preset( npc_community, npc_rank, preset_name )
	local preset = smart_terrain_params.get_preset( preset_name )
	if preset == false then return true
	else
		local t = preset[npc_community]
		if t and ( npc_rank >= t[1] and npc_rank <= t[2] ) then return true
		else return false
		end
	end
end


--[[ подходит ли объект гулагу?
1) если объект не согласен сюда идти, то smart terrain его не возьмёт
2) если объект согласен идти куда угодно, то проверить, есть ли ещё места, подходит ли он гулагу,
   подходит ли он хоть на одну работу
3) если объект согласен идти только в этот смарт, то принимаем даже если нету места (он вытеснит кого-то), проверить,
   подходит ли он гулагу, подходит ли он хоть на одну работу
]]

-- Распределение локаций по группам, определяет на какие локации может затянуть объект
local level_groups = {
	l01_escape = "group1",
	l02_garbage = "group1",
	l03_agroprom = "group1",
	l03u_agr_underground = "group1",
	l04_darkvalley = "group1",
	l04u_labx18 = "group1",
	l05_bar = "group1",
	la15_darkscape = "group1",
	marsh = "group1",
	peshera = "group1",
	puzir = "group1",
	aver = "group2",
	av_peshera = "group2",
	atp_for_test22 = "group2",
	dead_city = "group2",
	jupiter = "group2",
	jupiter_underground = "group2",
	labx8 = "group2",
	l06_rostok = "group1",
	l07_military = "group2",
	l08_yantar = "group1",
	l08u_brainlab = "group2",
	l10_radar = "group2",
	l10u_bunker = "group2",
	limansk = "group2",
	mine = "group2",
	red_forest = "group2",
	warlab = "group2",
	zaton = "group4",
	generators = "group3",
	hospital = "group3",
	l11_pripyat = "group3",
	l12_stancia = "group3",
	l12u_sarcofag = "group3",
	l12u_control_monolith = "group3",
	l12_stancia_2 = "group3",
	lost_village = "group3",
	pripyat = "group3"
}

function se_smart_terrain:smart_terrain_accepts_obj(sobj,agreement)
	if agreement == disagreed then
		return false
	end
	local community,is_stalker = self:get_obj_community(sobj)
	if self.accepted_communities and not self.accepted_communities[community] then
		return false
	end
	if not xr_gulag.checkNpc(community,is_stalker,self.gparams.type,sobj:rank(),sobj) then
		return false
	end
	-- Если эксклюзивный просто поищем работу
	if agreement == agreed_exclusive then
		return self.gulag:is_there_any_suitable_job(self:fill_npc_info(sobj),agreement == agreed_exclusive)
	end
	-- Для остальных если только есть свободные места
	if self.gulag:get_non_exclusive_population() < self.gulag.capacity_non_exclusive then
		-- Подходит, ли ранг по коммьюнити
		if not self:check_preset(community,sobj:rank(),self.gparams.preset_name) then
			return false
		end
		-- Проверка что смарт и нпс находятся в разрешенном кластере уровней
		local gg = game_graph()
		local sim = alife()
		local smart_group = level_groups[self.level_name]
		local actor_group = level_groups[level.name()]
		-- на случай загрузки
		if not actor_group then
			local actor = sim:object(0)
			local actor_gv = actor and actor.m_game_vertex_id
			if actor_gv then
				actor_group = level_groups[sim:level_name(gg:vertex(actor_gv):level_id())]
			end
		end
		local gv = sobj.m_game_vertex_id
		local npc_group = ""
		if actor_group and gg:valid_vertex_id(gv) then
			npc_group = level_groups[sim:level_name(gg:vertex(gv):level_id())]
			if npc_group < smart_group or (npc_group > smart_group and npc_group > actor_group) then
				return false
			end
		else
			return false
		end
		return self.gulag:is_there_any_suitable_job(self:fill_npc_info(sobj),agreement == agreed_exclusive )
	end
	return false
end


--[[ подходит ли гулаг объекту?
у объекта в custom data прописаны условия для некоторых smart_terrains:
  <smart_terrain_name1> = <condlist1>
  <smart_terrain_name2> = <condlist2>
  ...
Если для какого-то smart_terrain условие выполнилось, он называется эксклюзивным.
Если у объекта появился хоть один эксклюзивный smart terrain, то он будет согласен идти только в него.
Если не появилось ни одного эксклюзивного, то он согласен идти в любой.
]]
-- TODO а если в начале эксклюзивный, а потом в любой? вариант: any=condlist

function se_smart_terrain:obj_accepts_smart_terrain( obj )
	if obj.smart_terrain_conditions then
		local any_exclusive = false
		local s
		for name, condlist in pairs(obj.smart_terrain_conditions) do
			s = xr_logic.pick_section_from_condlist( db.actor_proxy, obj, condlist )
			if s then

--if obj:name() == "bar_bar_drunk_dolg" then
--log("инфо_лог", "нпс: %s, назначен смарт %s", obj:name(), name )
--end
				if name == "none" then

--if obj:name() == "bar_bar_drunk_dolg" then
--log("инфо_лог", "нпс: %s, none смарт %s", obj:name(), name )
--end
					return disagreed
				elseif name == self.nm then

--if obj:name() == "bar_bar_drunk_dolg" then
--log("инфо_лог", "нпс: %s, Эксклюзивный смарт %s", obj:name(), name )
--end
					return agreed_exclusive
				end
			--' Если текущий смарттеррейн эксклюзивный и недоступен
			else
			      if name == self.nm then
--if obj:name() == "bar_bar_drunk_dolg" then
--log("инфо_лог", "нпс: %s, смарт %s еще недоступный", obj:name(), name )
--end
					return disagreed
				end	

		end	end

		-- Если объекту запрещено переходить в online и эксклюзивные смарты недоступны,
		-- то не пускаем его никуда. Это исключает переброску отключенных до (или после)
		-- определённого события людей и мутантов в другой неэксклюзивный смарт.
		if obj:can_switch_online() == false then return disagreed end
	end

	return agreed
end


-- может ли объект быть добавлен в smart terrain?
-- вызывается симулятором при поиске задания для объекта/группы.
-- если объект - группа, то вернёт true только если все объекты в группе вернут true

function se_smart_terrain:enabled( obj )
	if self.disabled then return false end

	self:register_if_needed()
	self:initialize_if_needed()
	if self:is_gulag_available() and not self.population_locked then
		local b = self:obj_accepts_smart_terrain( obj )
		local a = self:smart_terrain_accepts_obj( obj, b )
--if obj:name() == "bar_bar_drunk_dolg" then
--log("инфо_лог", "нпс: %s, смарт %s доступность %s", obj:name(), self.nm, tostring(a) )
--end
		return a
	end
	return false
end


--' Возвращает меру подходящести персонажа смарттерейну.
-- вызывается для всех смартов, которые вернули true из enabled
function se_smart_terrain:suitable(obj)
	-- Если смарт эксклюзивный:
	if self:obj_accepts_smart_terrain(obj) == agreed_exclusive then
		return 1000
	end
	local cap = self.gulag.capacity_non_exclusive
	local pop = self.gulag.population_non_exclusive
	-- Если нерабочий смарт или еще нет неэксклюзивного населения:
	if not self.gulag_working or (cap >= 0 and pop == 0) then
		return 100
	end
	-- Для остальных найдем смарт с наибольшим соотношением неэксклюзивной вместимости к популяции
	return cap / pop
end


-- добавить npc в smart terrain.
-- если места нету или нету свободных подходящих работ, то вытолкнуть из этого smart terrain с подходящей работы
-- объект, который попал в него не эксклюзивно.
function se_smart_terrain:register_npc( obj )
	local npc_info = {
		o_group = obj:g_group(), o_squad = obj:g_squad(),
		exclusive = self:obj_accepts_smart_terrain( obj ) == agreed_exclusive,
		stay_end = game.CTime()
	}

	self:fill_npc_info( obj, npc_info )

	if self.gulag_working and -- ( self.gulag:get_population() == self.gulag.capacity or
	  not self.gulag:is_there_any_suitable_job( npc_info, false ) --)
	    then
		self:kick_someone_non_exclusive( npc_info )
	end

	self:update_obj_rank( obj )
	self.npc_info[obj.id] = npc_info

	t = self.npc_info[obj.id].stay_end
	t:setHMSms( math.random( self.gparams.stay_min, self.gparams.stay_max ), 0, 0, 0 )
	t:add( game.get_game_time() )

	if not self.gulag_working then
		self:create_gulag()
	end
	self.gulag:addObject( obj.id )
	self.gulag:update()
end


-- отпустить npc
-- TODO а если такого объекта уже нету?
function se_smart_terrain:unregister_npc(obj)
	local n = self.npc_info[obj.id]

	if not n then
log("инфо_лог","[unregister_npc]: нпс: %s smart: %s not npc",tostring(obj:name()),tostring(self:name()))
		obj:clear_smart_terrain()
		return
	end

	--' Если анрегистрим мертвого эксклюзивного НПС, нужно уменьшить счетчик эксклюзивности
	if not obj:alive() and obj.smart_terrain_conditions then
		local s
		for name, condlist in pairs(obj.smart_terrain_conditions) do
			s = xr_logic.pick_section_from_condlist( db.actor_proxy, obj, condlist )
			if s and name == self:name() then
				--' уменьшаем счетчик
				self.exclusives = self.exclusives - 1
				self.gulag.capacity_non_exclusive = self.gulag.capacity_non_exclusive + 1
			end
		end
	end

	self.gulag:removeObject( obj.id )

	obj.squad = n.o_squad
	obj.group = n.o_group

	self.npc_info[obj.id] = nil

	obj:clear_smart_terrain()
end



-- изменить ранг сталкера при регистрации в смарт
function se_smart_terrain:update_obj_rank( obj )
	local community, is_stalker = self:get_obj_community( obj )
	if is_stalker then
		local old_rank = obj:rank()
		obj:set_rank( old_rank + math.random( self.rank_inc_min, self.rank_inc_max ) )
	end
end

-- выгнать из-под смарттеррейна первого попавшегося неэксклюзивного персонажа,
-- который занимает работу, подходящую новому персонажу.
-- TODO а если я выгоню кого-то, а его работа не подойдёт по idle ?
function se_smart_terrain:kick_someone_non_exclusive( new_npc_info )
	for obj_id, npc_info in pairs( self.npc_info ) do
		if not npc_info.exclusive and self.gulag:obj1_job_suits_obj2( obj_id, new_npc_info ) then
			self:unregister_npc( npc_info.se_obj )
			return
		end
	end
	log("error", "(%s):kick_someone_non_exclusive: no suitable jobs", self.nm)
end

-- выдать объекту задание.
function se_smart_terrain:task( obj )
	if self.gulag then
		local path_name = self.gulag:get_obj_job_path_name( obj.id )
		if not path_name then
			log("error", "(%s):task, obj=%s job_path=nil, CLEARING !", self.nm, (obj:name() or "===nil==="))
			self:unregister_npc(obj) --'Затычка против вылета.
			return CALifeSmartTerrainTask("simulation_default_path")
		end

		return CALifeSmartTerrainTask( path_name )
	end
	log("error", "(%s):task, gulag not exist !")
end

--current
-- может ли данный гулаг создаться в данный момент?
function se_smart_terrain:is_gulag_available()
	local flag = true
	if self.gparams.cond then
		flag = xr_logic.pick_section_from_condlist(db.actor_proxy,self,self.gparams.cond) ~= nil
	end
	self:show_smart_debug_spot(flag)
	return flag
end
function se_smart_terrain:show_smart_debug_spot(avail)
  if sim_statistic.show_smart_spot == true and self.gulag.lvlid == 14 then
    --' Показать отметку
    local str = string_format("%s state(%s)\\n pop = %s(ne:%s c:%s) comed = %s",self:name(), tostring(self.gulag.state), tostring(self.gulag:get_population()), tostring(self.gulag.capacity_non_exclusive), tostring(self.gulag.capacity), tostring(self.gulag:get_population_comed()))

    if self.debug_avail ~= avail then
      if self.debug_avail == true then
        level.map_remove_object_spot(self.id, "alife_presentation_smart_on")
      elseif self.debug_avail == false then
        level.map_remove_object_spot(self.id, "alife_presentation_smart_off")
      end
      if avail == true then
        level.map_add_object_spot(self.id, "alife_presentation_smart_on", str)
      else
        level.map_add_object_spot(self.id, "alife_presentation_smart_off", str)
      end
      self.debug_avail = avail
    else
      if avail == true then
        level.map_change_spot_hint(self.id, "alife_presentation_smart_on", str)
      else
        level.map_change_spot_hint(self.id, "alife_presentation_smart_off", str)
      end
    end
     self.spot_showed = true
  else
    --' Убрать отметку
    if self.spot_showed == nil then
      return
    end
    self.spot_showed = nil
    if self.debug_avail == true then
      level.map_remove_object_spot(self.id, "alife_presentation_smart_on")
    else
      level.map_remove_object_spot(self.id, "alife_presentation_smart_off")
    end   
  end
end

-- установка/снятие блокировки приёма персонажей
function se_smart_terrain:lock_population( need_lock )
	self.population_locked = need_lock
end

-- в гулаг поступил первый персонаж и он начинает работать
function se_smart_terrain:create_gulag()
	self.duration_end = game.CTime()
	-- self.duration_end:setHMSms( 0, 0, 0, math.random( self.gparams.duration_min * h2ms, self.gparams.duration_max * h2ms ) )
	self.duration_end:setHMSms( math.random( self.gparams.duration_min, self.gparams.duration_max ), 0, 0, 0 )
	self.duration_end:add( game.get_game_time() )
	self.check_time = CTime_0
	self.gulag:initialize()
	self.gulag_working = true
end


-- всех освободить, убить гулаг,
-- создать новый нерабочий гулаг, зарезервировать в нём места для эксклюзивных
function se_smart_terrain:remove_gulag( disable )
	self.disabled = disable	-- передавать true только для отладки.
	if not self.gulag_working then return end

	-- освободить всех персонажей
	for id, npc_info in pairs( self.npc_info ) do self:unregister_npc( npc_info.se_obj ) end	-- проверка на существование obj в unregister_npc

	if self.gparams.idle_max > 0 then
		self.idle_end = game.CTime()
		self.idle_end:setHMSms( math.random( self.gparams.idle_min, self.gparams.idle_max ), 0, 0, 0 )	-- todo: сделать рэндом ОТ mib ДО max, а не "или".
		self.idle_end:add( game.get_game_time() )
	else self.idle_end = nil
	end

	self.gulag = xr_gulag.gulag( self, self.gparams.type, self.gparams.squad, self.gparams.groups, self.npc_info, self.gparams.capacity )
	self.gulag:load_jobs()
	self.gulag_working = false
	self.gulag.capacity_non_exclusive = self.gulag.capacity_non_exclusive - self.exclusives

	if self.gulag.capacity_non_exclusive < 0 then	-- Думали, не бывает ? Еще как бывает !!!
		log("error", "%s:remove_gulag: self.gulag.capacity_non_exclusive = %s !", self.nm, self.gulag.capacity_non_exclusive)
		self.gulag.capacity_non_exclusive = 0
	end

	-- self:show_smart_debug_spot(false)
end


-- возвращает название уровня, на котором находится smart terrain
function se_smart_terrain:get_level_name()
	local ln = ""
	if game_graph():valid_vertex_id(self.m_game_vertex_id) then
		ln = alife():level_name( game_graph():vertex( self.m_game_vertex_id ):level_id() )
	end
	return ln
end


--' Если нет, то заполняет таблицу классов монстров - monster_classes:
-- запускается из register_if_needed()
function se_smart_terrain:fill_monster_classes()
	if not monster_classes then
		monster_classes = {
			[clsid.bloodsucker_s] = "bloodsucker",
			[clsid.boar_s       ] = "boar",
			[clsid.burer_s      ] = "burer",
			[clsid.cat_s        ] = "cat",
			[clsid.chimera_s    ] = "chimera",
			[clsid.controller_s ] = "controller",
			[clsid.dog_s        ] = "dog",
			[clsid.flesh_s      ] = "flesh",
			[clsid.fracture_s   ] = "fracture",
			[clsid.poltergeist_s] = "poltergeist",
			[clsid.gigant_s     ] = "pseudo_gigant",
			[clsid.pseudodog_s  ] = "pseudodog",
			[clsid.psy_dog_s    ] = "psy_dog",
			[clsid.snork_s      ] = "snork",
			[clsid.tushkano_s   ] = "tushkano",
			[clsid.zombie_s     ] = "zombie"
		}
	end
end

-- регистрация объекта в симуляторе.
-- вызывается симулятором.
function se_smart_terrain:on_register()
	cse_alife_smart_zone.on_register( self )
	self:register_if_needed()
	self:initialize_if_needed()
end

function se_smart_terrain:register_if_needed()
	--' Если уже зарегистрены то ничего не делать.
	if self.registred == true then return end
	self.registred = true
	self.nm = self:name()
	self.level_name = self:get_level_name()
	if self.disabled then return end

	self:fill_monster_classes()
	local level_name = self.level_name
	if not self.gparams.preset_name then self.gparams.preset_name = level_name end
	if not smart_terrains[level_name] then smart_terrains[level_name] = {} end

	smart_terrains[level_name][self.id] = self
	smart_terrains_by_name[self.nm] = self

	if self.gparams.respawn then db.strn_by_respawn[self.gparams.respawn] = self end
	self.gulag:load_jobs()
	if self.gulag_working then self.gulag:initialize() end
	--sim_statistic.reinit()

	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)
end



-- дерегистрация объекта в симуляторе.
-- вызывается симулятором.
function se_smart_terrain:on_unregister()
	cse_alife_smart_zone.on_unregister( self )
	local lvl_smarts = smart_terrains[self.level_name]
	if lvl_smarts then lvl_smarts[self.id] = nil end
	smart_terrains_by_name[self.nm] = nil
	if self.gparams and self.gparams.respawn then
		db.strn_by_respawn[self.gparams.respawn] = nil
	end
	db.actor_proxy:deinit()
end

-- вызвать спавнер, если настроен.
function se_smart_terrain:call_respawn()
	if self.gparams.respawn then se_respawn.spawn(self.gparams.respawn) end
end

-- возвращает строку с принимаемыми группировками и рангами
function se_smart_terrain:stat_get_accepted_communities()
  local comms = {}

  -- from preset
  local iniFileName = "misc\\" .. self.gparams.type .. ".ltx"
  local ltx         = g_ini_file( iniFileName )
  local preset_name = self.gparams.preset_name

  if ltx:section_exist(preset_name) then
    local result, field, str
    local n = ltx:line_count(preset_name)

    for i = 0, n-1 do
      result, field, str = ltx:r_line(preset_name, i, "", "")

      if not self.accepted_communities or self.accepted_communities[field] then
        comms[field] = str
      end
    end
  end

  -- from custom data
  if self.accepted_communities then
    for comm, v in pairs( self.accepted_communities ) do
      if not comms[comm] then
        comms[comm] = "all"
      end
    end
  end

  -- prepare return
  local s = ""

  for comm, ranks in pairs( comms ) do
    s = s .. comm .. "(" .. ranks .. "),"
  end

  return s
end

-- вывод статистики смарта
function se_smart_terrain:stat()
	-- local s = string_format("%s %s", self:get_level_name(), self:name())
	local pop   = self.gulag:get_population()
	local cap   = self.gulag.capacity
	local avail = self:is_gulag_available()
	-- if avail then s = s .. " enabled "
	-- else s = s .. " disabled "
	-- end
	-- s = s .. pop .. " " .. cap .. " " .. self:stat_get_accepted_communities()
	-- printf( s )
	--  for id, npc_info in pairs( self.npc_info ) do printf( "    %s", npc_info.name ) end
	return avail, pop, cap
end

-- Обновление. В онлайне вызывается через binder.
-- Также может вызваться принудительно из xr_effects
-- Если мужиков в гулаге больше не осталось или условия существования гулага не выполняются, то убрать гулаг.
function se_smart_terrain:update()
	cse_alife_smart_zone.update( self )
	if not self.gulag_working then return end
	if self:is_gulag_available() then
		if self.check_time < game.get_game_time() then
			self.check_time = game.get_game_time() + check_period
			for id, npc_info in pairs( self.npc_info ) do	--' проверяем, не собрался ли кто-то к этому времени уже уходить
				if npc_info.cond and xr_logic.pick_section_from_condlist( db.actor_proxy, npc_info.se_obj, npc_info.cond ) == nil then
					self:unregister_npc( npc_info.se_obj )
			end	end

			if self.gulag:get_population() == 0 then
				self:remove_gulag(self.id)
			else self.gulag:update()
		end	end
	else self:remove_gulag()
	end
end


function on_death( obj_id )
	local sim = alife()
	local obj = obj_id and sim:object( obj_id )
	if obj and obj.smart_terrain_id then
		local strn = obj:smart_terrain_id()
		if strn and strn ~= 65535 then
			strn = sim:object( strn )
			local g = strn and strn.gulag
			if g then g:clear_dead( obj_id ) end
	end	end
end


function unregister_npc( obj )
	if obj and obj.smart_terrain_id then
		local strn = obj:smart_terrain_id()
		if strn and strn ~= 65535 then
			strn = alife():object( strn )
			if strn then strn:unregister_npc( obj ) end
	end	end
end


--------------------
-- прочитать секцию [smart_terrains]
-- вызывается объектами, которые могут ходить под smart terrain
function read_smart_terrain_conditions( obj )	-- непись или моб на входе !
	local ini = obj.ini
	local sect = ini:section_exist( "logic" ) and ini:line_exist( "logic", "cfg" )
		and ini:r_string( "logic", "cfg" )
	if sect then
		local ltx_ini = ini_file( sect )
		if ltx_ini and ltx_ini:section_exist( "smart_terrains" ) then
			ini, sect = ltx_ini, "smart_terrains"
		elseif ini:section_exist( smart_section ) then sect = smart_section
		else return
		end
	elseif ini:section_exist( smart_section ) then sect = smart_section
	else return
	end

	local n = ini:line_count( sect )
	if n == 0 then return end

	local t = {}
	local r, k, v
	for i = 0, n - 1 do
		r, k, v = ini:r_line( sect, i, "", "" )
		v = string_gsub( v, "{\-aes_arrive_to}", "true" )	-- todo: давно пора снести
		t[k] = xr_logic.parse_condlist( obj, sect, k, v )
	end
--amk.dump_table(t, 1, obj:name())
	return t
end

--------------------
-- Вывод статистики по всем смартам в симуляции
function stat()
  printf( "--------------- Smart terrains statistics START ----------------------" )

  local jobs, jobs_in_avail, occupied
  local level_stats = {}

  for level_name, t in pairs( smart_terrains ) do
    jobs, jobs_in_avail, occupied = 0, 0, 0

    for id, strn in pairs( t ) do
      local avail, pop, cap = strn:stat()

      jobs       = jobs     + cap
      occupied   = occupied + pop

      if avail then
        jobs_in_avail = jobs_in_avail + cap
      end
    end

    local l = {}
    level_stats[level_name] = l

    l.jobs          = jobs
    l.occupied      = occupied
    l.jobs_in_avail = jobs_in_avail
  end

  jobs, jobs_in_avail, occupied = 0, 0, 0

  printf("")

  for level_name, l in pairs( level_stats ) do
    printf( "Level %s :", level_name )
    printf( "    Jobs in all smart terrains : %d",       l.jobs )
    printf( "    Jobs in available smart terrains : %d", l.jobs_in_avail )
    printf( "    Occupied jobs : %d",                    l.occupied )

    jobs          = jobs          + l.jobs
    jobs_in_avail = jobs_in_avail + l.jobs_in_avail
    occupied      = occupied      + l.occupied
  end

  printf( "All levels:" )
  printf( "    Jobs in all smart terrains : %d",       jobs )
  printf( "    Jobs in available smart terrains : %d", jobs_in_avail )
  printf( "    Occupied jobs : %d",                    occupied )

  printf( "--------------- Smart terrains statistics END ------------------------" )
end


function get_strn( obj, obj_id)
	local strn = false
	local strn_id, strn_a_id = 65535, 65535
	local sim = alife()

	if sim then
		if obj_id then
			obj = sim:object( obj_id )
			if not obj then return end
		elseif obj then obj_id = obj.id
		else return
		end
	else return
	end

	if obj.smart_terrain_id then
		local strn_id = obj:smart_terrain_id()
		if strn_id and strn_id ~= 65535 then
			local strn = sim:object( strn_id )
			if strn then return strn, strn_id end
		end
		return nil, 65535
	end

	log( "error", "no obj.smart_terrain_id: %s", obj:name() )
	return nil, 65535
end
