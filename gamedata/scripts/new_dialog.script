local nagrad = {
  
  level_1 = {
  "ammo_5.45x39_ap",
  "ammo_5.56x45_ap"
 },
  level_2 = {
  "af_babka_1",
  "af_cry_1",
  "af_dik_1",
  "af_kol_1",
  "af_pudd_1",
  "af_spirit_1",
  "af_night_star",
  "af_gold_fish",
  "af_electra_moonlight",
  "af_rusty_sea_urchin",
  "af_dummy_glassbeads"
 },
  level_3 = {
  "af_babka_2",
  "af_cry_2",
  "af_dik_2",
  "af_kol_2",
  "af_pudd_2",
  "af_spirit_2",
  "af_simbion"
 },
  level_4 = {
  "wpn_raging_bull",
  "wpn_sr25_mk11_mod0_sk1",
  "wpn_xm8_para_sk2",
  "wpn_kriss_super_v",
  "wpn_m1891_30_scope",
  "wpn_wincheaster1300",
  "wpn_saiga12c",
  "wpn_uzi"  
 },
  level_5 = {
  "af_babka_3",
  "af_cry_3",
  "af_kol_4",
  "af_pudd_4",
  "af_spirit_4",
 },
  level_6 = {
  "ammo_7.62x54_7h14",
  "ammo_7.62x54_ap",
  "ammo_7.62x54r",
  "ammo_gauss"
 },
level_7 = {
  "ammo_9x39_ap",
  "ammo_7.62x51_ap",
  "ammo_7.62x54_7h14",
  "ammo_7.62x54_ap",
  "ammo_9x39_sp5",
  "antirad",
  "medkit",
  "medkit_army",
  "medkit_scientic",
  "ammo_9x19_pbp",
  "ammo_5.45x39_ap",
  "ammo_5.56x45_ap",
  "ammo_11.43x23_hydro",
  "mutant_flesh_eye",
  "mutant_boar_leg",
  "mutant_dog_tail",
  "mutant_psevdodog_tail",
  "af_medusa",
  "af_blood",
  "af_drops",
  "grenade_f1",
  "grenade_rgd5",
  "ammo_og-7b",
  "ammo_vog25p",
  "ammo_vog25",
  "ammo_m209"
 }
}


function prines_kopyto(first_speaker, second_speaker)
	return amk_utils.inventory_search("mutant_boar_leg", 3)
end
function otdal_kopyto(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	sol_utils.delete_item_count("mutant_boar_leg", 3)
    dialogs.relocate_item_section(second_speaker, item , "in")
end

function prines_hvost(first_speaker, second_speaker)
	return amk_utils.inventory_search("mutant_dog_tail", 3)
end
function otdal_hvost(first_speaker, second_speaker)
	local item = ""
	local count = math.random(3,4)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_1[math.random(table.getn(nagrad.level_1))]
	sol_utils.delete_item_count("mutant_dog_tail", 3)
    flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function add_man()
	local obj=amk.spawn_item("mil_monolit_rush_respawn_1",vector():set(32.9309,-0.00135,197.588),1242,20400)
        local tbl = amk.read_stalker_params(obj)
        tbl.sid = 9498
        tbl.health = 0.2
	tbl.updhealth = 0.2
        amk.write_stalker_params(tbl, obj)
end 

function metka_man()
	level_tasks.add_location(507,"green_location","Раненый")
end


function voronin_flesh_have(task, objective) 
	if db.actor and db.actor:object("crazy_flash") then  return true  end
	return false
end

function voronin_flesh_done(first_speaker, second_speaker) 
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(trader, "crazy_flash", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end	

function prapor_jaw_have(task, objective) 
	if db.actor and db.actor:object("mutant_krovosos_jaw") then  return true  end
	return false
end
function prapor_jaw_done(first_speaker, second_speaker)
	sol_utils.delete_item_count("mutant_krovosos_jaw", 1)
	dialogs.relocate_item_section(second_speaker, "wpn_spas12", "in")
end

function informator_pda_have(task, objective) 
	if db.actor and db.actor:object("bar_tiran_pda") then  return true  end
	return false
end

function informator_pda_done(first_speaker, second_speaker)
	sol_utils.delete_item_count("bar_tiran_pda", 1)
	dialogs.relocate_item_section(second_speaker, "af_soul", "in")
end

function gavr_pda_have(task, objective) 
	if db.actor and db.actor:object("mil_bolt_pda") then  return true  end
	return false
end

function gavr_pda_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
    sol_utils.delete_item_count("mil_bolt_pda", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end	

function saharov_pda_have(task, objective) 
	if db.actor and db.actor:object("pda_priz") then  return true  end
	return false
end
function saharov_pda_done(first_speaker, second_speaker) 
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
    sol_utils.delete_item_count("pda_priz", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end	

function freeman_eagle_have(task, objective) -- P.S. - функция в <function_complete> задания, проверка с кондицией будет тормозить
	if db.actor and db.actor:object("wpn_eagle_m1") then  return true  end
	return false
end
function freeman_eagle_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(actor, item , "in", count)
	sol_utils.delete_item_count("wpn_eagle_m1", 1, 0.05)
        amk.spawn_item_in_inv("wpn_eagle_m1",trader)
	--dialogs.relocate_item_section(trader, "wpn_eagle_m1", "out", 1)
end

function freeman_case_have(task, objective) 
	if db.actor and db.actor:object("case_freeman") then  return true  end
	return false
end
function freeman_case_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
    sol_utils.delete_item_count("case_freeman", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function gavr_doc_have(task, objective) 
	if db.actor and db.actor:object("lab_x10_documents") then  return true  end
	return false
end
function gavr_doc_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
    sol_utils.delete_item_count("lab_x10_documents", 1)
    dialogs.relocate_item_section(actor, item , "in", count)

 -- старт СМС от Фримена "Зайди"
 amk.g_start_timer("freeman_call_sms", 0, 0, 5) 
end
function freeman_call_sms()
sol_utils.send_tip( "%c[255,160,160,160]".."ФРИМЕН:".."\\n".."%c[255,255,128,128]Меченый, будешь в Баре - зайди. Есть дело.", nil, nil, 30000)
 db.actor:give_info_portion("freeman_sms")
end

function bland_flash_have(task, objective) 
	if db.actor and db.actor:object("bland_flash") then  return true  end
	return false
end
function bland_flash_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
    sol_utils.delete_item_count("bland_flash", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end	

local items_count=0
local itemin=nil

function item_much(itm,need_namber)
	return amk_utils.inventory_search(itm,need_namber)
end	
function cheking_item(actor,item)
	local items=item:section()
	if items==itemin then
		items_count=items_count+1
	end
end
function create_items(npc,section,number)
        for i=1,number do
			alife():create(section, 
            npc:position(),
            npc:level_vertex_id(),  
            npc:game_vertex_id(),
            npc:id())
        end 
end

local reloc_params={}
local stalk

function out_item_much(itm_section,need_number)
	reloc_params.itm_section=itm_section
	reloc_params.itm_cnt=need_number
	reloc_params.itm_cnt_found=0
	db.actor:iterate_inventory(checkout_items_count,db.actor)
	reloc_params.itm_cnt_found=0
	if reloc_params.itm_cnt_found<=reloc_params.itm_cnt then
		db.actor:iterate_inventory(out_items_count,db.actor)
	end
	news_manager.relocate_item(db.actor, "out", itm_section)
	reloc_params={}
end

function checkout_items_count(actor,item)
	if item.section and item:section()==reloc_params.itm_section then
		reloc_params.itm_cnt_found = reloc_params.itm_cnt_found + 1
	end
end
function out_items_count(actor,item)
	if item.section and item:section()==reloc_params.itm_section and reloc_params.itm_cnt_found<reloc_params.itm_cnt then
		amk.remove_item_from_inventory(item, actor)
		reloc_params.itm_cnt_found = reloc_params.itm_cnt_found + 1
	end
end

function krov_kamen()
	return amk_utils.inventory_search("mutant_flesh_eye",3)
end
function otdal_kamen(first_speaker, second_speaker)
	new_dialog.out_item_much("mutant_flesh_eye",3) 
end
function nagrada_kamen(first_speaker, second_speaker)
	new_dialog.create_items(db.actor,"ammo_9x19_pbp",2)
	dialogs.relocate_item_section(first_speaker, "ammo_9x19_pbp", "in")
end

function prines_gravi()
	return amk_utils.inventory_search("mutant_face_tushkano",5)
end
   
function otdal_gravi(first_speaker, second_speaker)
	new_dialog.out_item_much("mutant_face_tushkano",5) 
end
function nagrada_gravi(first_speaker, second_speaker)
	new_dialog.create_items(db.actor,"ammo_11.43x23_hydro",2)
	dialogs.relocate_item_section(first_speaker, "ammo_11.43x23_hydro", "in")
end

function prines_ruki()
	return amk_utils.inventory_search("mutant_hand_kontroler",2)
end
function otdal_ruki(first_speaker, second_speaker)
	new_dialog.out_item_much("mutant_hand_kontroler",2) 
end
function nagrada_ruki(first_speaker, second_speaker)
	new_dialog.create_items(db.actor,"ammo_5.45x39_ap",4)
	new_dialog.create_items(db.actor,"vodka",1)
	dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_ap", "in")
	dialogs.relocate_item_section(first_speaker, "vodka", "in")
end

function dan_grab_have(task, objective) 
	if db.actor and db.actor:object("biorad_prototip") then  return true  end
	return false
end
function dan_grab_done(first_speaker, second_speaker) 
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
    sol_utils.delete_item_count("biorad_prototip", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
	dialogs.relocate_item_section(first_speaker, "wpn_m4super90", "in")
end	

function yakut_help_have(task, objective) 
	if db.actor and db.actor:object("new_book") then  return true  end
	return false
end
function yakut_help_done(first_speaker, second_speaker) 
    local item = ""
	local count = math.random(4,5)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_1[math.random(table.getn(nagrad.level_1))]
    sol_utils.delete_item_count("new_book", 1)
    flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function yakut_treasure_have(task, objective) 
	if db.actor and db.actor:object("notebook_new") then  return true  end
	return false
end
function yakut_treasure_done(first_speaker, second_speaker)
	sol_utils.delete_item_count("notebook_new", 1)
end

function dan_flash_have(task, objective) 
	if db.actor and db.actor:object("nauch_flash") then  return true  end
	return false
end
function dan_flash_done(first_speaker, second_speaker)
	sol_utils.delete_item_count("nauch_flash", 1)
	dialogs.relocate_item_section(first_speaker, "good_psy_helmet", "in")
end	

function treasure_ecolog_have(task, objective) 
	if db.actor and db.actor:object("new_book_prizrak") then  return true  end
	return false
end
function treasure_ecolog_done(first_speaker, second_speaker) 
	local item = ""
	local count = math.random(2,3)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_6[math.random(table.getn(nagrad.level_6))]
    sol_utils.delete_item_count("new_book_prizrak", 1)
    flamethrower.relocate_n_items_section(actor, item , "in", count)
end					

function barmen_simbion_have(task, objective) 
	if db.actor and db.actor:object("af_simbion") then  return true  end
	return false
end
function barmen_simbion_done(first_speaker, second_speaker)
	sol_utils.delete_item_count("af_simbion", 1)
end

function system_ecolog_have(task, objective) 
	if db.actor and db.actor:object("computer_new") then  return true  end
	return false
end
function system_ecolog_done(first_speaker, second_speaker) 
	local item = ""
	local count = math.random(2,3)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_6[math.random(table.getn(nagrad.level_6))]
    sol_utils.delete_item_count("computer_new", 1)
    flamethrower.relocate_n_items_section(actor, item , "in", count)
end	

function prizrak_zver_have(task, objective) 
	if db.actor and db.actor:object("sniper_flash") then  return true  end
	return false
end
function prizrak_zver_done(first_speaker, second_speaker)
	sol_utils.delete_item_count("sniper_flash", 1)
	dialogs.relocate_item_section(second_speaker, "wpn_dark_gauss", "in")
end	

function prizrak_finalzver_have(task, objective) 
	if db.actor and db.actor:object("new_document_sniper") then  return true  end
	return false
end

function prizrak_finalzver_done(first_speaker, second_speaker) 
	local item = ""
	local count = math.random(2,3)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_6[math.random(table.getn(nagrad.level_6))]
    sol_utils.delete_item_count("new_document_sniper", 1)
    flamethrower.relocate_n_items_section(actor, item , "in", count)
	
	sol_utils.delete_item_count("sniper_flash", 1)
	dialogs.relocate_item_section(second_speaker, "wpn_dark_gauss", "in")
end

function yakut_ograblen_have(task, objective) 
	if db.actor and db.actor:object("inventory_new_box") then  return true  end
	return false
end
function yakut_ograblen_done(first_speaker, second_speaker)
	sol_utils.delete_item_count("inventory_new_box", 1)
	dialogs.relocate_item_section(second_speaker, "ammo_5.56x45_ap", "in")
	new_dialog.create_items(db.actor,"ammo_5.56x45_ap",4)
	dialogs.relocate_item_section(second_speaker, "antirad", "in")
	new_dialog.create_items(db.actor,"antirad",2)
	dialogs.relocate_item_section(second_speaker, "medkit_army", "in")
	new_dialog.create_items(db.actor,"medkit_army",3)
end	

function left_arhara(first_speaker, second_speaker) 
	dialogs.relocate_item_section(second_speaker, "device_torch", "in")
end
function atak_larger_done(first_speaker, second_speaker) 
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	dialogs.relocate_item_section(second_speaker, item , "in")
end

function tri_kristal()
	return amk_utils.inventory_search("af_cristall",3)
end
function otdal_kristal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_5[math.random(table.getn(nagrad.level_5))]
	sol_utils.delete_item_count("af_cristall", 3)
    dialogs.relocate_item_section(second_speaker, item , "in")
end

function prines_lomot()
	return amk_utils.inventory_search("af_mincer_meat",3)
end
function otdal_lomot(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	sol_utils.delete_item_count("af_mincer_meat", 3)
    dialogs.relocate_item_section(second_speaker, item , "in")
end

function prines_odingrav()
	return amk_utils.inventory_search("af_gravi",1)
end
function otdal_odingrav(first_speaker, second_speaker)
	new_dialog.out_item_much("af_gravi",1) 
end
function nagrada_odingrav(first_speaker, second_speaker)
	new_dialog.create_items(db.actor,"antirad",2)
	dialogs.relocate_item_section(first_speaker, "antirad", "in")
end

function zahar_naemnik_done(first_speaker, second_speaker) 
	local item = ""
	local count = math.random(3,4)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_1[math.random(table.getn(nagrad.level_1))]
	flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function prapor_apt_have()
	return amk_utils.inventory_search("medkit_scientic",10)
end
function prapor_apt_done(first_speaker, second_speaker)
	new_dialog.out_item_much("medkit_scientic",10) 
end

function barrem_talk_have()
	return amk_utils.inventory_search("af_cry_2",1)
end

function vzal_pda_voen(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "voen_pda", "in")
end
function otdal_pda_voen(first_speaker, second_speaker)
	sol_utils.delete_item_count("voen_pda", 1)
end

function prizrak_tainiy_have(first_speaker, second_speaker)
	return amk_utils.inventory_search("plan_document",1)
end
function prizrak_tainiy_done(first_speaker, second_speaker)
    sol_utils.delete_item_count("plan_document", 1)
end

function gold_art_have()
	return amk_utils.inventory_search("gold_art",2)
end
function gold_art_done()
	new_dialog.out_item_much("gold_art",2)
end

function tri_tainik_first()
	return amk_utils.inventory_search("new_prizrak_document1",1)
end
function tri_tainik_second()
	return amk_utils.inventory_search("new_prizrak_document2",1)
end
function tri_tainik_third()
	return amk_utils.inventory_search("new_prizrak_document3",1)
end
function tri_tainik_have()
	return	amk_utils.inventory_search("new_prizrak_document1",1) and
		amk_utils.inventory_search("new_prizrak_document2",1)  and 
		amk_utils.inventory_search("new_prizrak_document3",1)
end
function tri_tainik_done()
	new_dialog.out_item_much("new_prizrak_document1",1)
	new_dialog.out_item_much("new_prizrak_document2",1)
	new_dialog.out_item_much("new_prizrak_document3",1)
end

function inform_20_pda_have()
     return amk_utils.inventory_search("device_pda_npc",20)
end

function inform_20_pda(first_speaker, second_speaker)
	sol_utils.delete_item_count("device_pda_npc", 20)
end

function dyak_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 2)   
   flamethrower.relocate_n_items_section(actor, "ammo_5.45x39_ap", "in", 3)
end

function dyak_nagrad(first_speaker, second_speaker)
    local item = ""
    local count = math.random(4,5)
 local actor, trader
 if db.actor and db.actor:id() == first_speaker:id() then
  actor = first_speaker
  trader = second_speaker
 else
  actor = second_speaker
  trader = first_speaker
 end
 item = nagrad.level_7[math.random(table.getn(nagrad.level_7))]
 flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function kalmyak_need_done(first_speaker, second_speaker)
    local item = ""
    local actor, trader
 if db.actor and db.actor:id() == first_speaker:id() then
  actor = first_speaker
  trader = second_speaker
 else
  actor = second_speaker
  trader = first_speaker
 end
 item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
 dialogs.relocate_item_section(second_speaker, item , "in")
 new_dialog.out_item_much("box_kalmyak",1)
end

function kalmyak_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 2) 
   dialogs.relocate_item_section(first_speaker, "antirad", "in")
end

function kalmyak_need_have()
	return amk_utils.inventory_search("box_kalmyak",1)
end

function kalmyak_3_vodka()
	return amk_utils.inventory_search("vodka",3) 
end
function kalmyak_3_sigaret()
	return amk_utils.inventory_search("sigaret",3)
end
function kalmyak_3_vodka_otdal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(first_speaker, "maz", "in")
   new_dialog.out_item_much("vodka",3)
end
function kalmyak_3_sigaret_otdal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(first_speaker, "maz", "in")
   new_dialog.out_item_much("sigaret",3)
end

function marsh_remont_have()
	return amk_utils.inventory_search("maz",3) 
end
function marsh_remont_done()
	new_dialog.out_item_much("maz",3)
end

function dyak_maz_have()
	return amk_utils.inventory_search("af_soul",1)
end
function dyak_maz_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "maz", "in", 3) 
   new_dialog.out_item_much("af_soul",1)
end


function controller_hutor_have()
     return amk_utils.inventory_search("red_mozg",1)
end
function controller_hutor_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
   dialogs.relocate_item_section(second_speaker, item , "in") 
   new_dialog.out_item_much("red_mozg",1)
end

function burer_red_hand_est()
     return amk_utils.inventory_search("mutant_burer_red_hand",1)
end
function burer_red_hand_otdal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
   dialogs.relocate_item_section(second_speaker, item , "in") 
   new_dialog.out_item_much("mutant_burer_red_hand",1)
end

function krovosos_red_jaw_est()
	return amk_utils.inventory_search("mutant_krovosos_red_jaw",1)
end

function krovosos_red_jaw_otdal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
   dialogs.relocate_item_section(second_speaker, item , "in") 
   new_dialog.out_item_much("mutant_krovosos_red_jaw",1)
end

function sveeblov_ferma_have()
     return amk_utils.inventory_search("wpn_ptrd",1)
end
--[[function sveeblov_ferma_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
   dialogs.relocate_item_section(second_speaker, item, "in") 
   new_dialog.out_item_much("wpn_ptrd",1)
end]]

--' отдадим ПТРД Свиблову и получим награду
function sveeblov_ferma_done1(first_speaker, second_speaker)
sak.out_item_namber("wpn_ptrd",1)
dialogs.relocate_item_section(second_speaker, "wpn_saiga12c","in")
end

function kot_need_doc_have()
	return amk_utils.inventory_search("mono_dead_doc",1)
end
function kot_need_doc_done()
	new_dialog.out_item_much("mono_dead_doc",1)
end

function kot_need_next_have()
	return amk_utils.inventory_search("mono_note",1) 
end
function kot_need_next_done()
	new_dialog.out_item_much("mono_note",1)
end

function need_televizor_have()
	return amk_utils.inventory_search("televizor",1) 
end
function need_televizor_done()
	new_dialog.out_item_much("televizor",1)
end

function marsh_barman_dal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "wpn_awm_new", "in", 1) 
   dialogs.relocate_item_section(actor, "ammo_igl_new", "in", 1)
end

function marsh_barman_have()
     return amk_utils.inventory_search("wpn_awm_new",1)
end

function marsh_barman_zabral(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
   dialogs.relocate_item_section(second_speaker, item, "in")
    sol_utils.delete_item_count("wpn_awm_new", 1)
end

function borman_glushitel_begin()
     return amk_utils.inventory_search("glushitel",1)
end

function borman_glushitel_next(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "glushitel", "in", 1) 
end

function borman_glushitel_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "ammo_5.56x45_ap", "in", 3)
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x51_ap", "in", 3) 
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x54_ap", "in", 3) 
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x25_ps", "in", 3) 
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x51box", "in", 3)
   flamethrower.relocate_n_items_section(actor, "ammo_5.56x45_ap", "in", 5)
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x51box", "in", 5)      
end

function kot_kalmyak_lekar_next()
	return amk_utils.inventory_search("af_night_star",1) and amk_utils.inventory_search("mutant_medwed_dry_paw",1)
end

function kot_kalmyak_lekar_est()
	new_dialog.out_item_much("af_night_star",1)
	new_dialog.out_item_much("mutant_medwed_dry_paw",1)
end

function kot_kalmyak_lekar_have(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "lekar_kalmyak", "in", 1) 
end

function kot_kalmyak_lekar_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "monolit_black_outfit_plus", "in", 1) 
   new_dialog.out_item_much("lekar_kalmyak",1)
end

function lekar_kalmyak_actor()
     return amk_utils.inventory_search("lekar_kalmyak",1)
end

function kot_holod_lekar_next()
     return amk_utils.inventory_search("af_simbion",1)
end

function kot_holod_lekar_est(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "lekar_kalmyak", "in", 1) 
   new_dialog.out_item_much("af_simbion",1)
end

function kot_holod_lekar_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "monolit_black_outfit_plus", "in", 1) 
   new_dialog.out_item_much("lekar_kalmyak",1)
end


function holod_af_gravi_have()
     return amk_utils.inventory_search("af_gravi",1)
end

function holod_af_gravi_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "grenade_f1", "in", 4) 
   new_dialog.out_item_much("af_gravi",1)
end

function holod_af_mincer_meat_have()
     return amk_utils.inventory_search("af_mincer_meat",1) 
end

function holod_af_mincer_meat_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "grenade_f1", "in", 4) 
   new_dialog.out_item_much("af_mincer_meat",1)
end

function holod_two_af_vyvert_have()
     return amk_utils.inventory_search("af_vyvert",2)
end

function holod_two_af_vyvert_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "grenade_f1", "in", 4) 
   new_dialog.out_item_much("af_vyvert",2)
end


function holod_af_ameba_slug_have()
     return amk_utils.inventory_search("af_ameba_slug",1) 
end

function holod_af_ameba_slug_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 5) 
   new_dialog.out_item_much("af_ameba_slug",1)
end

function holod_two_af_electra_sparkler_have()
     return amk_utils.inventory_search("af_electra_sparkler",2)
end

function holod_two_af_electra_sparkler_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 5) 
   new_dialog.out_item_much("af_electra_sparkler",2)
end

function holod_two_af_blood_have()
     return amk_utils.inventory_search("af_blood",2)
end

function holod_two_af_blood_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 5) 
   new_dialog.out_item_much("af_blood",2)
end

function francuz_have()
     return amk_utils.inventory_search("pda_francuz",1)
end
function francuz_done()
	new_dialog.out_item_much("pda_francuz",1)
end

function actor_have_tri_vo()
     return amk_utils.inventory_search("vodka",3)
end

function nebo_clear_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "case_nebo", "in", 1) 
end
function nebo_clear_have()
     return amk_utils.inventory_search("case_nebo",1)
end
function nebo_clear_done()
	new_dialog.out_item_much("case_nebo",1)
end

function nebo_kurier_doc_est(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
   dialogs.relocate_item_section(second_speaker, item , "in")
end

-------------------------------------------------
function act_have_nebo_exo_outfit() 
	return sol_utils.check_item_count("nebo_exo_outfit", 1, 0.95)==1
end
function act_have_nebo_scientific_outfit() 
	return sol_utils.check_item_count("nebo_scientific_outfit", 1, 0.95)==1
end
function act_have_monolit_black_outfit() 
	return sol_utils.check_item_count("monolit_black_outfit", 1, 0.95)==1
end
-------------------------------------------------
function act_have_10000()
  return db.actor:money()>=10000
end
function act_have_15000()
  return db.actor:money()>=15000
end
function act_have_20000()
  return db.actor:money()>=20000
end
function act_have_25000()
  return db.actor:money()>=25000
end
function act_have_30000()
  return db.actor:money()>=30000
end

function act_upgreid_nebo_exo_outfit_bad(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_exo_outfit_bad", "in", 1)
	dialogs.relocate_money(trader, 10000, "out")   
	new_dialog.out_item_much("nebo_exo_outfit",1) 
end
function act_upgreid_nebo_exo_outfit_good(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_exo_outfit_good", "in", 1)
	dialogs.relocate_money(trader, 25000, "out")   
	new_dialog.out_item_much("nebo_exo_outfit",1) 
end
function act_upgreid_nebo_exo_outfit_default(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_exo_outfit_default", "in", 1)
	dialogs.relocate_money(trader, 15000, "out")   
	new_dialog.out_item_much("nebo_exo_outfit",1) 
end
function act_upgreid_nebo_exo_outfit_static(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_exo_outfit_static", "in", 1)
	dialogs.relocate_money(trader, 20000, "out")   
	new_dialog.out_item_much("nebo_exo_outfit",1) 
end
function act_upgreid_nebo_exo_outfit_kat_eye(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_exo_outfit_kat_eye", "in", 1)
	dialogs.relocate_money(trader, 30000, "out")   
	new_dialog.out_item_much("nebo_exo_outfit",1) 
end
function act_upgreid_nebo_exo_outfit_psy(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_exo_outfit_psy", "in", 1)
	dialogs.relocate_money(trader, 25000, "out")   
	new_dialog.out_item_much("nebo_exo_outfit",1) 
end
function act_upgreid_nebo_exo_outfit_blackwhite(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_exo_outfit_blackwhite", "in", 1)
	dialogs.relocate_money(trader, 25000, "out")   
	new_dialog.out_item_much("nebo_exo_outfit",1) 
end
function act_upgreid_nebo_exo_outfit_bast(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_exo_outfit_bast", "in", 1)
	dialogs.relocate_money(trader, 30000, "out")   
	new_dialog.out_item_much("nebo_exo_outfit",1) 
end
function act_upgreid_nebo_scientific_outfit_bad(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_scientific_outfit_bad", "in", 1)
	dialogs.relocate_money(trader, 10000, "out")   
	new_dialog.out_item_much("nebo_scientific_outfit",1) 
end
function act_upgreid_nebo_scientific_outfit_good(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_scientific_outfit_good", "in", 1)
	dialogs.relocate_money(trader, 25000, "out")   
	new_dialog.out_item_much("nebo_scientific_outfit",1) 
end
function act_upgreid_nebo_scientific_outfit_default(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_scientific_outfit_default", "in", 1)
	dialogs.relocate_money(trader, 15000, "out")   
	new_dialog.out_item_much("nebo_scientific_outfit",1) 
end
function act_upgreid_nebo_scientific_outfit_static(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_scientific_outfit_static", "in", 1)
	dialogs.relocate_money(trader, 20000, "out")   
	new_dialog.out_item_much("nebo_scientific_outfit",1) 
end
function act_upgreid_nebo_scientific_outfit_kat_eye(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_scientific_outfit_kat_eye", "in", 1)
	dialogs.relocate_money(trader, 30000, "out")   
	new_dialog.out_item_much("nebo_scientific_outfit",1) 
end
function act_upgreid_nebo_scientific_outfit_psy(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_scientific_outfit_psy", "in", 1)
	dialogs.relocate_money(trader, 25000, "out")   
	new_dialog.out_item_much("nebo_scientific_outfit",1) 
end
function act_upgreid_nebo_scientific_outfit_blackwhite(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_scientific_outfit_blackwhite", "in", 1)
	dialogs.relocate_money(trader, 25000, "out")   
	new_dialog.out_item_much("nebo_scientific_outfit",1) 
end
function act_upgreid_nebo_scientific_outfit_bast(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "nebo_scientific_outfit_bast", "in", 1)
	dialogs.relocate_money(trader, 30000, "out")   
	new_dialog.out_item_much("nebo_scientific_outfit",1) 
end
function act_upgreid_monolit_black_outfit_bad(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "monolit_black_outfit_bad", "in", 1)
	dialogs.relocate_money(trader, 10000, "out")   
	new_dialog.out_item_much("monolit_black_outfit",1) 
end
function act_upgreid_monolit_black_outfit_good(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "monolit_black_outfit_good", "in", 1)
	dialogs.relocate_money(trader, 25000, "out")   
	new_dialog.out_item_much("monolit_black_outfit",1) 
end
function act_upgreid_monolit_black_outfit_default(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "monolit_black_outfit_default", "in", 1)
	dialogs.relocate_money(trader, 15000, "out")   
	new_dialog.out_item_much("monolit_black_outfit",1) 
end
function act_upgreid_monolit_black_outfit_static(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "monolit_black_outfit_static", "in", 1)
	dialogs.relocate_money(trader, 20000, "out")   
	new_dialog.out_item_much("monolit_black_outfit",1) 
end
function act_upgreid_monolit_black_outfit_kat_eye(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "monolit_black_outfit_kat_eye", "in", 1)
	dialogs.relocate_money(trader, 30000, "out")   
	new_dialog.out_item_much("monolit_black_outfit",1) 
end
function act_upgreid_monolit_black_outfit_psy(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "monolit_black_outfit_psy", "in", 1)
	dialogs.relocate_money(trader, 25000, "out")   
	new_dialog.out_item_much("monolit_black_outfit",1) 
end
function act_upgreid_monolit_black_outfit_blackwhite(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "monolit_black_outfit_blackwhite", "in", 1)
	dialogs.relocate_money(trader, 25000, "out")   
	new_dialog.out_item_much("monolit_black_outfit",1) 
end
function act_upgreid_monolit_black_outfit_bast(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "monolit_black_outfit_bast", "in", 1)
	dialogs.relocate_money(trader, 30000, "out")   
	new_dialog.out_item_much("monolit_black_outfit",1) 
end

function shadowman_forest_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	flamethrower.relocate_n_items_section(actor, "medkit_army", "in", 6)
end


function klyak_forest_doc_next(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(actor, "rukzak_green", "in", 1) 
end

function actor_has_rukzak_green()
	return amk_utils.inventory_search("rukzak_green",1) 
end
function klyak_forest_doc_green()
	new_dialog.out_item_much("rukzak_green",1)	
end

function klyak_forest_doc_have()
	return amk_utils.inventory_search("klyak_forest_doc",1) 
end
function klyak_forest_doc_done()
	new_dialog.out_item_much("klyak_forest_doc",1)	
end

function treasure_sysh_have(task, objective) 
	if db.actor and db.actor:object("sysh_document") then  return true  end
	return false
end
function treasure_sysh_done(first_speaker, second_speaker)
	sol_utils.delete_item_count("sysh_document", 1)
end

function mushrom_have()
	return amk_utils.inventory_search("mushroom",3)
end

function mutant_red_have()
	local actor = db.actor
	if actor and actor:object("mutant_burer_red_hand") or actor:object("mutant_krovosos_red_jaw") then
		return true
	end
	return false
end
