---- Rulix aka Bak --- 1.7.2009

local table_insert = table.insert
local table_sort = table.sort
local math_random = math.random
local string_find = string.find
local string_sub = string.sub
local string_format = string.format

function read_from_ini(iniFileName,sec,val,def,typ)
	--return rx_utils.read_from_ini(ini,sec,val,def,typ)
	return rx_utils.read_from_ini_new(iniFileName,sec,val,def,typ)
end

local boxid
local weapon_params = {} -- параметры оружия будем хранить здесь
local update_time = time_global()
local iniFileName = "misc\\rx_weapon_mgr.ltx"
local wm_ini = g_ini_file(iniFileName)
local wms = {} -- запоминаем id
local item_parents = {}
local defsec = "default"
local clslist = { actor = clsid.actor,
	stalker = clsid.script_stalker,
	dog = clsid.dog_s,
	boar = clsid.boar_s,
	flesh = clsid.flesh_s,
	pseudodog = clsid.pseudodog_s,
	bloodsucker = clsid.bloodsucker_s,
	snork = clsid.snork_s,
	tushkano = clsid.tushkano_s,
	zombie = clsid.zombie_s,
	giant = clsid.gigant_s,
	chimera = clsid.chimera_s,
	burer = clsid.burer_s,
	controller = clsid.controller_s,
	poltergeist = clsid.poltergeist_s,
	fracture = clsid.fracture_s,
	cat = clsid.cat_s,
	psy_dog = clsid.psy_dog_s,
	psy_dog_phantom = clsid.psy_dog_phantom_s}

wm_modes = {sect = {custom = {}, default = {}}, -- данные из конфигов
		koeffs = {},
		priors = {},
		types = {list = {},
				rsec = {},
				maxr = {},
				minr = {},
				enem = {},
				line = read_from_ini(iniFileName,"types","line","ef_weapon_type",1)},
		forbiddens = {},
		enabled = read_from_ini(iniFileName,"main","enabled",false,0),
		enabled_ext = read_from_ini(iniFileName,"main","enabled",false,0) or read_from_ini(iniFileName,"main","enabled_ext",false,0),
		update_prd = read_from_ini(iniFileName,"main","update_period",2000),
		combat_prd = read_from_ini(iniFileName,"main","combat_period",400),
		reload_prd = read_from_ini(iniFileName,"main","reload_period",2500),
		idle_prd = read_from_ini(iniFileName,"main","idle_period",10000),
		return_prd = read_from_ini(iniFileName,"main","return_period",200000),
		min_cond = read_from_ini(iniFileName,"main","min_condition",0.2),
		wpn_minmax = read_from_ini(iniFileName,"main","weapon_minmaxr",false,0)}

function init() counterAdd("rx_wmgr.init")
	wm_modes.types.list = rx_utils.parse_list_new(iniFileName,"types","list")
	local t
	for i = 1, #wm_modes.types.list do
		t = wm_modes.types.list[i]
		if wm_ini:line_exist("types","rsec_"..t) then
			wm_modes.types.rsec[t] = rx_utils.parse_list_new(iniFileName,"types","rsec_"..t)
			if #wm_modes.types.rsec[t] < 3 then
				abort("weapon_manager: number of values in rsec_%s '%s' < 3!",i,#wm_modes.types.rsec[t])
			end
		end
		if wm_ini:line_exist("types","minmaxr_"..t) and not wm_modes.wpn_minmax then
			local tmp = rx_utils.parse_list_new(iniFileName,"types","minmaxr_"..t)
			if #tmp ~= 2 then
				abort("weapon_manager: number of values in minmaxr_%s '%s' ~= 2!",t,#tmp)
			end
			wm_modes.types.minr[t] = tonumber(tmp[1])
			wm_modes.types.maxr[t] = tonumber(tmp[2])
		end
		if wm_ini:line_exist("types","enemy_"..t) then
			wm_modes.types.enem[t] = {}
			local tmp = rx_utils.parse_list_new(iniFileName,"types","enemy_"..t)
			for j = 1, #tmp do
				local p = string_find(tmp[j],":",1,true)
				wm_modes.types.enem[t][string_sub(tmp[j],1,p-1)] = string_sub(tmp[j],p+1,-1)
			end
		end
	end
	wm_modes.forbiddens = rx_utils.parse_list_new(iniFileName,"main","forbidden_weapons",true)
	wm_modes.inited = true
	read_wm_modes(nil,nil,defsec)
end

class "weapon_manager"
function weapon_manager:__init(npc) counterAdd("rx_wmgr.weapon_manager:__init")
	self.npc = npc
	self.npc_id = npc:id()
	self.name = string_format("%s(%s)",npc:name(),npc:character_name())
	self:initialize()
	self.wpns_prstor = {}
	self.priors_mem = {}
--	rx_ai.subscribe_for_events(npc,self)
end

function weapon_manager:__finalize() counterAdd("rx_wmgr.weapon_manager:__finalize")
end

function weapon_manager:initialize() counterAdd("rx_wmgr.weapon_manager:initialize")
	if rx_utils.IsTrader(self.npc) then
		self.disabled = true
		return
	end
	self.modes = read_wm_modes(self.npc:character_community(),ranks.get_obj_rank_name(self.npc),self.npc:section())
	if self.modes.disabled == true then
		self.disabled = true
		self.modes = nil
		return
	end
	self.modes.max_pr_weapons = tonumber(self.modes.max_pr_weapons)
	self.period = time_global()
end

function weapon_manager:update() counterAdd("rx_wmgr.weapon_manager:update")
	if not wm_modes.inited then
		init()
	end
	local tg = time_global()
	if self.disabled or (self.disabled_temp and self.disabled_temp > tg) then
		return
	elseif rx_utils.IsTrader(self.npc) then
		self.disabled = true
		return
	end
	if self.last_return == nil then
		self.last_return = tg
	end
	local enemy,cwpn = self.npc:best_enemy()
	if self.weapon_id then
		cwpn = level.object_by_id(self.weapon_id)
	end
	if cwpn then
		local parent = cwpn:parent()
		-- человек не знает в каком формате хранятся данные в item_parents[self.weapon_id] или чего-то намудрил О_о sapsan
		if not (parent and parent:id() == self.npc_id) and not (item_parents[self.weapon_id] and (item_parents[self.weapon_id] == self.npc_id or item_parents[self.weapon_id] == tostring(self.npc_id))) then
			if self.wpns_prstor[self.weapon_id] then
				self:return_items(self.weapon_id)
			end
			cwpn = nil
			self.weapon_id = nil
			self.last_change = nil
			self.period = tg
		end
	end
	if enemy then
		if self.period > tg+wm_modes.combat_prd then
			self.period = tg
		end
		self.reloadc = nil
	else
		if self.last_return + wm_modes.return_prd <= tg or xr_wounded.is_wounded(self.npc) or (enemy and xr_wounded.is_wounded(enemy)) then
			self:return_items()
		end
		if cwpn and not self.reloadc then
			if cwpn:get_ammo_in_magazine() < read_wpn_params(cwpn:section()).mag then
				self.reloadc = true
			end
		end
	end
	if self.reloadc then
		if self.weapon_id then
			self:reload()
		else
			self.reloadc = nil
		end
	end
	if self.period <= tg or (enemy and ((not (self.weapon_id and cwpn)) or cwpn:get_ammo_in_magazine() == 0)) then
		if not self.reloadc then
			self:update_weapon()
		end
		if enemy then
			self.period = tg + wm_modes.combat_prd
		else
			self.period = tg + wm_modes.idle_prd
		end
	end
	local bw = self.npc:best_weapon()
	if self.weapon_id and not self.reloadc then
		if bw and bw:id() ~= self.weapon_id then
			if self.modes.process_mode == "2" or self.modes.process_mode == "3" or (self.modes.process_mode == "1" and enemy) then
				local actwpn = self.npc:active_item()
				if ((enemy and not xr_wounded.is_wounded(enemy)) or ((not enemy) and (not actwpn or bw:id() ~= actwpn:id()))) and not xr_wounded.is_wounded(self.npc) then
					self:process_item(bw)
				end
			end
		end
	end
end

function weapon_manager:get_weapon() counterAdd("rx_wmgr.weapon_manager:get_weapon")
	self:update()
	local wpn = (self.weapon_id and level.object_by_id(self.weapon_id)) or self.npc:best_weapon()
--	self:output(wpn)
	return wpn
end

function weapon_manager:output(wpn) counterAdd("rx_wmgr.weapon_manager:output")
	local actor = db.actor
	if actor and actor:position():distance_to(self.npc:position()) < 4 then
		if not self.outtime or self.outtime < time_global() then
			local name = self.npc:character_name()
			local reload = tostring(self.reloadc)
			if wpn then
				local wpn_id = wpn:id()
				local wpn_section = wpn:section()
				local params = read_wpn_params(wpn_section)
				if not params then
					rx_utils.give_game_news(name..": "..string_format("wpn: %s[%s], params not readed",wpn_section,wpn_id),1000)
					return
				end
				local cost = params.cst
				local eff
				local kf = wm_modes.koeffs[self.modes.koeffs] or wm_modes.koeffs["koefs_def"]
				if kf == nil then
					eff = "NOT READED"
				else
					eff = (params.dmg*kf.dmg)+(params.rpm*kf.rpm)+(params.dst*kf.dst)+((100/params.dsp)*kf.dsp)
				end
				local prior
				local pr = wm_modes.priors[self.modes.priors] or wm_modes.priors["priors_def"]
				if pr == nil then
					prior = "NOT READED"
				else
					prior = pr[wpn_section] or 0
				end
				local res = self:get_weapon_prior(wpn)
				rx_utils.give_game_news(name..": "..string_format("wpn: %s[%s] aminmag %s(%s), reload is %s, cost[%s], eff[%s], prior[%s], res[%s]",wpn_section,wpn_id,wpn:get_ammo_in_magazine(),read_wpn_params(wpn_section).mag,reload,cost,eff,prior,res),1000)
			else
				rx_utils.give_game_news(name..": "..string_format("wpn: %s reload is %s",tostring(wpn),reload),1000)
			end
			self.outtime = time_global() + 1000
		end
	end
end

function weapon_manager:set_weapon(wpn) counterAdd("rx_wmgr.weapon_manager:set_weapon")
	if wpn then
		self.weapon_id = wpn:id()
		self:return_items(self.weapon_id)
	end
	local enemy = self.npc:best_enemy()
	if self.modes.process_mode == "3" and enemy then
		local w
		local item
		local level_object_by_id = level.object_by_id
		for k,v in pairs(self.weapons) do
			for i = 1, #v do
				w = v[i]
				if w.id ~= self.weapon_id then
					item = level_object_by_id(w.id)
					if item and item:parent() and item:parent():id() == self.npc_id then
						self:process_item(item)
					end
				end
			end
		end
	end
	if enemy then
--		self.npc:set_item(object.idle,wpn)
	end
	self.weapons = nil
end

function weapon_manager:reload() counterAdd("rx_wmgr.weapon_manager:reload")
	local level_object_by_id = level.object_by_id
	local curwpn = level_object_by_id(self.weapon_id)
	if curwpn and curwpn:get_ammo_in_magazine() < read_wpn_params(curwpn:section()).mag then
		return
	end
	local cnt = self:update_weapon_list()
	if cnt > 1 then
		local types = {}
		for k,v in pairs(self.weapons) do
			if #v > 0 then
				types[k] = true
			end
		end
		local wpn, w, t
		for i = 1, #self.modes.types do
			t = self.modes.types[i]
			if types[t.t] then
				for j = 1, #self.weapons[t.t] do
					w = self.weapons[t.t][j]
					wpn = level_object_by_id(w.id)
					if wpn:get_ammo_in_magazine() < read_wpn_params(wpn:section()).mag then
						self:set_weapon(wpn)
						return
					end
				end
			end
		end
	end
	self.weapons = nil
	self.weapon_id = nil
	self.reloadc = nil
	self:update_weapon()
end

function weapon_manager:update_weapon() counterAdd("rx_wmgr.weapon_manager:update_weapon")
	local level_object_by_id = level.object_by_id
	local cnt,mprm = self:update_weapon_list()
	local obj
	if cnt == 1 then
		for k,v in pairs(self.weapons) do
			if v[1] and v[1].sec then
				obj = level_object_by_id(v[1].id)
				self:set_weapon(obj)
				return
			end
		end
	elseif cnt > 1 then
		local types = {}
		for k,v in pairs(self.weapons) do
			if #v > 0 then
				types[k] = true
			end
		end
		local be = self.npc:best_enemy()
		local curwpn = level_object_by_id(self.weapon_id)
		if not be then
			if self.modes.mode2_idle == "1" then
				local weapons = {}
				for k,v in pairs(self.weapons) do
					for i = 1, #v do
						table_insert(weapons,v[i])
					end
				end
				table_sort(weapons,function(a,b) return a.prm > b.prm end)
				self:set_weapon(level_object_by_id(weapons[1].id))
				return
			elseif self.modes.mode2_idle == "2" then
				local t
				for i = 1, #self.modes.types do
					t = self.modes.types[i]
					if types[t.t] then
						obj = level_object_by_id(self.weapons[t.t][1].id)
						self:set_weapon(obj)
						return
					end
				end
			end
		else
			if self.modes.mode2 == "2" then
				if not curwpn or curwpn:get_ammo_in_magazine() == 0 then
					local t, w, wpn
					if self:check_conditions(0) then
						for i = 1, #self.modes.types do
							t = self.modes.types[i]
							if types[t.t] then
								for j = 1, #self.weapons[t.t] do
									w = self.weapons[t.t][j]
									wpn = level_object_by_id(w.id)
									if wpn:get_ammo_in_magazine() > 0 then
										self:set_weapon(wpn)
										return
									end
								end
							end
						end
					end
					if self:check_conditions(2) then
						for i = 1, #self.modes.types do
							t = self.modes.types[i]
							if types[t.t] then
								wpn = level_object_by_id(self.weapons[t.t][1].id)
								self:set_weapon(wpn)
								return
							end
						end
					end
				end
			elseif self.modes.mode2 == "1" or self.modes.mode2 == "3" then
				if self.last_change and curwpn and curwpn:get_ammo_in_magazine() ~= 0 and self.last_change+self.modes.change_rest_time > time_global() then
					return
				end
				local weapons = {}
				for k,v in pairs(self.weapons) do
					for i = 1, #v do
						table_insert(weapons,v[i])
					end
				end
				if self.modes.mode2 == "1" then
					table_sort(weapons,function(a,b) return a.prm > b.prm end)
					self:set_weapon(level_object_by_id(weapons[1].id))
					return
				end
				local bepos = be:position()
				local function becls_to_pr(sect,cls)
					local enl = weapon_params[sect].enm or wm_modes.types.enem[weapon_params[sect].typ]
					if enl then
						for k,v in pairs(enl) do
							if clslist[k] and clslist[k] == cls then
								return v
							end
						end
					end
					return 0
				end
				local function bedist_to_pr(sect,dist)
					local typ = weapon_params[sect].typ
					local fr = weapon_params[sect].dtn
					if dist >= fr then
						return -80
					end
					local mn = wm_modes.types.minr[typ] or weapon_params[sect].mnr
					local mx = wm_modes.types.maxr[typ] or weapon_params[sect].mxr
					local ts = weapon_params[sect].rsc or wm_modes.types.rsec[typ]
					if not ts then
						return 0
					end
					local sn = #ts
					local df = (mx-mn)/(sn-2)
					if dist < mn then
						return ts[1]
					elseif dist > mx then
						return ts[sn]
					end
					for i=2,sn-1 do
						if dist < mn+df*i then
							return ts[i]
						end
					end
				end
				
				local actor_not_enemy = self.npc:relation(db.actor) ~= game_object.enemy
				local actor_be_dist_sqr = db.actor:position():distance_to_sqr(bepos)
				local my_comm = self.npc:character_community()
				local function blastwpn_condition(sect,dist)
					local radius = weapon_params[sect].bls^2
					if dist <= radius then
						return false
					end
					if actor_not_enemy and actor_be_dist_sqr < radius then
						return false
					end
					local npc
					for k,v in pairs(db.storage) do
						npc = level_object_by_id(k)
						if npc and IAmAStalker[npc:clsid()] and npc:character_community() == my_comm and npc:position():distance_to_sqr(bepos) < radius then
							return false
						end
					end
					return true
				end
				local bedist = self.npc:position():distance_to(bepos)
				local becls = be:clsid()
				local wpnp = {}
				mprm = mprm/cnt
				local pr, wpn, amm1,amm2
				local curwpn_id = curwpn and curwpn:id()
				local bebe = be:best_enemy()
				local tg = time_global()
				local be_see_me_as_enemy_or_enemy_is_actor = be:see(self.npc) and ((bebe and bebe:id() == self.npc_id) or (db.actor and db.actor:id() == be:id()))
				local fignya
				local next_change, next_change_fc, add_fc, add
				if self.last_change then
					fignya = curwpn_id and (wm_modes.types.line ~= "ef_weapon_type" or weapon_params[curwpn:section()].typ ~= "8")
					if fignya then
						next_change = self.last_change+self.modes.tchange_time
						next_change_fc = self.last_change+self.modes.tchange_time_fc
						add_fc = (next_change_fc-tg)/40
						add = (next_change-tg)/50
					end
				end
				for i,w in pairs(weapons) do
					pr = 0
					pr = mprm*bedist_to_pr(w.sec,bedist)/100
					pr = pr + mprm*becls_to_pr(w.sec,becls)/100
					if curwpn_id == w.id then
						pr = pr + w.prm*self.modes.active_add/100
					end
					wpn = level_object_by_id(w.id)
					amm1,amm2 = wpn:get_ammo_in_magazine(),weapon_params[w.sec].mag
					if amm1 ~= amm2 and amm1 == 0 then
						if be_see_me_as_enemy_or_enemy_is_actor then
							pr = pr - w.prm*self.modes.mag_lowering_fc/100
						else
							pr = pr - w.prm*self.modes.mag_lowering/100
						end
					else
						if amm1 ~= amm2 then
							pr = pr - w.prm*self.modes.mag_lowering/100*(amm2-amm1)^0.9/amm2
						end
						if curwpn_id == w.id and self.last_change and fignya then
							if be_see_me_as_enemy_or_enemy_is_actor and next_change_fc > tg then
								pr = pr + mprm*add_fc/100
							elseif next_change > tg then
								pr = pr + mprm*add/100
							end
						end
					end
					if weapon_params[w.sec].bls and not blastwpn_condition(w.sec,bedist) then
						pr = pr - w.prm*0.6
					end
					table_insert(wpnp,{id = w.id,p = w.prm+pr})
				end
				table_sort(wpnp,function(a,b) return a.p > b.p end)
				local wpn = (wpnp[1] and level.object_by_id(wpnp[1].id))
				if curwpn and wpnp[1].id ~= curwpn:id() then
					self.last_change = tg
				end
				self:set_weapon(wpn)
				return
			end
		end
	end
	self.weapon_id = nil
	self.weapons = nil
end

function weapon_manager:check_conditions(nam) counterAdd("rx_wmgr.weapon_manager:check_conditions")
	if nam == 2 then
		return true
	elseif nam == 0 or nam == 3 then
		local tg = time_global()
		local be_see_me
		if self.last_be_see_me and self.last_be_see_me + 2000 > tg then
			be_see_me = true
		else
			local be = self.npc:best_enemy()
			be_see_me = be:see(self.npc)
			if be_see_me then
				self.last_be_see_me = tg
			end
		end
		
		return be_see_me
	elseif nam == 1 then
		local tg = time_global()
		local be = self.npc:best_enemy()
		local me_see_be
		if self.last_me_see_be and self.last_me_see_be + 2000 > tg then
			me_see_be = true
		else
			me_see_be = self.npc:see(be)
			if me_see_be then
				self.last_me_see_be = tg
			end
		end
		local be_see_me
		if self.last_be_see_me and self.last_be_see_me + 2000 > tg then
			be_see_me = true
		else
			be_see_me = be:see(self.npc)
			if be_see_me then
				self.last_be_see_me = tg
			end
		end
		local not_sees = not me_see_be and not be_see_me
	
		return not_sees
	end
	
	--[[local tg = time_global()
	local be = self.npc:best_enemy()
	local me_see_be
	if self.last_me_see_be and self.last_me_see_be + 2000 > tg then
		me_see_be = true
	else
		me_see_be = self.npc:see(be)
		if me_see_be then
			self.last_me_see_be = tg
		end
	end
	local be_see_me
	if self.last_be_see_me and self.last_be_see_me + 2000 > tg then
		be_see_me = true
	else
		be_see_me = be:see(self.npc)
		if be_see_me then
			self.last_be_see_me = tg
		end
	end
	local not_sees = not me_see_be and not be_see_me
	if nam == 0 and be_see_me then
		return true
	elseif nam == 2 then
		return true
	elseif nam == 1 and not_sees then
		return true
	elseif nam == 3 and be_see_me then
		return true
	end]]
	
	return false
end

function weapon_manager:update_weapon_list(na,cut,max) counterAdd("rx_wmgr.weapon_manager:update_weapon_list")
	local level_object_by_id = level.object_by_id
	local sim = alife()
	local table_remove = table.remove
	local tslist,twlist = {},{}
	local function weapon_iterator(id,item)
		if id and not item then
			item = level_object_by_id(id)
		end
		if not item then
			if id and sim:object(id) ~= nil then
				rx_utils.switch_online(id)
			else
				self.wpns_prstor[id] = nil
			end
			return
		end
		if not id then
			id = item:id()
		end
		if rx_utils.IAmAWeaponFA[item:clsid()] then
			local sec = item:section()
			local cnd = item:condition()
			if na or (wm_modes.forbiddens[sec] ~= true and cnd >= wm_modes.min_cond and self:have_ammo(item)) then
				local params = read_wpn_params(sec)
				local typ = params.typ
				if not self.weapons[typ] then
					abort("weapon_manager: not registered weapon type '%s' in [%s]",typ,sec)
				end
				local prm = self:get_weapon_prior(item)
				if not wm_modes.enabled then
					local bwpn = self.npc:best_weapon()
					if bwpn and id == bwpn:id() then
						prm = prm*1.5
					end
				end
				if not cut then
					table_insert(self.weapons[typ],{sec = sec,id = id,prm = prm})
				else
					if not tslist[sec] or tslist[sec].prm < prm then
						if tslist[sec] then
							table_remove(twlist,tslist[sec].pos)
						end
						table_insert(twlist,{sec = sec,id = id,prm = prm,typ = typ})
						tslist[sec] = {prm = prm,pos = #twlist}
					end
				end
			end
		end
	end
	self.weapons = {}
	for i = 1, #self.modes.types do
		self.weapons[self.modes.types[i].t] = {}
	end
	self.npc:iterate_inventory(weapon_iterator)
	for k,v in pairs(self.wpns_prstor) do
		if v then
			weapon_iterator(k)
		end
	end
	local cnt,sprm = 0,0
	if not cut then
		for k,v in pairs(self.weapons) do
			table_sort(v,function(a,b) return a.prm > b.prm end)
		end
		local t, wpns
		for i = 1, #wm_modes.types.list do
			t = wm_modes.types.list[i]
			wpns = self.weapons[t]
			cnt = cnt + #wpns
			for j = 1, #wpns do
				sprm = sprm + wpns[j].prm
			end
		end
	else
		table_sort(twlist,function(a,b) return a.prm > b.prm end)
		local v
		for i = 1, #twlist do
			v = twlist[i]
			if cnt < (max or self.modes.max_pr_weapons) then
				table_insert(self.weapons[v.typ],{sec = v.sec,id = v.id,prm = v.prm})
				cnt = cnt+1
				sprm = sprm+v.prm
			else
				break
			end
		end
	end
	return cnt,sprm
end

function get_weapon_prior(wpn,addonf, priors_mem, modes, character_name) counterAdd("rx_wmgr.get_weapon_prior")
	local go = wpn and wpn.fov and true or false
	local id,tg = go and wpn:id() or wpn.id, time_global()
	if tg > (priors_mem.tg or 0) then
		priors_mem = {tg = tg+math_random(6000,8000)}
	end
	if priors_mem[id] and not addonf then
		return priors_mem[id]
	else
		local prm,pr = 0,0
		local sec = go and wpn:section() or wpn:section_name()
		local params = read_wpn_params(sec)
		if modes.mode1 == "1" then
			prm = params.cst+modes.addcost
		elseif modes.mode1 == "2" then
			local kf = wm_modes.koeffs[modes.koeffs]
			prm = (params.dmg*kf.dmg)+(params.rpm*kf.rpm)+(params.dst*kf.dst)+((100/params.dsp)*kf.dsp)
		elseif modes.mode1 == "3" then
			prm = wm_modes.priors[modes.priors][sec] or 0
		end
		if addonf then
			--log3("!![%s] type of addonf: [%s], addinf is [%s], called from: %s", script_name(), type(addonf), addonf, debug.traceback())
			addonf = addonf-rx_utils.get_addon_flag(wpn)+rx_utils.get_addon_flag(wpn,true)
		end
		if rx_utils.addon_attached(wpn,"sc",addonf) then
			pr = pr + prm*modes.scope/100
		end
		if rx_utils.addon_attached(wpn,"sl",addonf) then
			pr = pr + prm*modes.silencer/100
		end
		if rx_utils.addon_attached(wpn,"gl",addonf) then
			pr = pr + prm*modes.grenadelauncher/100
		end
		local v
		for i = 1, #modes.types do
			v = modes.types[i]
			if v.t == params.typ then
				pr = pr + prm*v.p/100
				break
			end
		end
		prm = prm+pr+id/100000+(go and wpn:condition() or 1)*prm/50
		if not addonf then
			priors_mem[id] = prm
		end
		return prm
	end
end

function weapon_manager:get_weapon_prior(wpn,addonf) counterAdd("rx_wmgr.weapon_manager:get_weapon_prior")
	return get_weapon_prior(wpn, addonf, self.priors_mem, self.modes, self.npc:character_name())
--[[	local go = wpn and wpn.fov and true or false
	local id,tg = go and wpn:id() or wpn.id, time_global()
	if tg > (self.priors_mem.tg or 0) then
		self.priors_mem = {tg = tg+math_random(6000,8000)}
	end
	if self.priors_mem[id] and not addonf then
		return self.priors_mem[id]
	else
		local prm,pr = 0,0
		local sec = go and wpn:section() or wpn:section_name()
		local params = read_wpn_params(sec)
		if self.modes.mode1 == "1" then
			prm = params.cst+self.modes.addcost
		elseif self.modes.mode1 == "2" then
			local kf = wm_modes.koeffs[self.modes.koeffs]
			prm = (params.dmg*kf.dmg)+(params.rpm*kf.rpm)+(params.dst*kf.dst)+((100/params.dsp)*kf.dsp)
		elseif self.modes.mode1 == "3" then
			prm = wm_modes.priors[self.modes.priors][sec] or 0
		end
		if addonf then
			addonf = addonf-rx_utils.get_addon_flag(wpn)+rx_utils.get_addon_flag(wpn,true)
		end
		if rx_utils.addon_attached(wpn,"sc",addonf) then
			pr = pr + prm*self.modes.scope/100
		end
		if rx_utils.addon_attached(wpn,"sl",addonf) then
			pr = pr + prm*self.modes.silencer/100
		end
		if rx_utils.addon_attached(wpn,"gl",addonf) then
			pr = pr + prm*self.modes.grenadelauncher/100
		end
		local v
		for i = 1, #self.modes.types do
			v = self.modes.types[i]
			if v.t == params.typ then
				pr = pr + prm*v.p/100
				break
			end
		end
		prm = prm+pr+id/100000+(go and wpn:condition() or 1)*prm/50
		if not addonf then
			self.priors_mem[id] = prm
		end
		return prm
	end]]
end

function weapon_manager:have_ammo(wpn) counterAdd("rx_wmgr.weapon_manager:have_ammo")
	local params = read_wpn_params(wpn:section())
	if params.mag == 0 or wpn:get_ammo_in_magazine() ~= 0 then
		return true
	end
	local parent = wpn:parent()
	if parent and parent:id() == self.npc:id() then
		return wpn:get_ammo_total() ~= 0
	end
	for i = 1, #params.ams do
		if self.npc:object(params.ams[i]) then
			return true
		end
	end
	return false
end

function weapon_manager:process_item(obj) counterAdd("rx_wmgr.weapon_manager:process_item")
	local id = obj:id()
	local box = get_box()
	if not box then
		return
	end
	if obj:parent():id() ~= boxid and not self.wpns_prstor[id] then
		self.npc:transfer_item(obj,box)
		self.wpns_prstor[id] = true
		item_parents[id] = boxid
	end
end

function weapon_manager:return_items(id,death) counterAdd("rx_wmgr.weapon_manager:return_items")
	local se_npc = alife():object(self.npc_id)
	if not self.npc then
		return
	elseif not se_npc then
		return
	elseif not se_npc.online then
		return
	end
	local function transfer_to_npc(id)
		local box = get_box()
		if not box then
			return
		end
		local obj = level.object_by_id(id)
		if obj then
			if not rx_utils.IAmAWeaponFA[obj:clsid()] then
				return
			end
			local parent = obj:parent()
			if not parent then
				return
			end
			if parent:id() ~= boxid then
				return
			end
			parent:transfer_item(obj,self.npc)
			item_parents[id] = self.npc_id
		else
			local sobj = alife():object(id)
			if sobj then
				alife():release(sobj,true)
			end
		end
	end
	if id then
		if self.wpns_prstor[id] then
			transfer_to_npc(id)
			self.wpns_prstor[id] = nil
		end
		return
	end
	for k,v in pairs(self.wpns_prstor) do
		if v ~= nil then
			transfer_to_npc(k)
		end
	end
	self.wpns_prstor = {}
	self.last_return = time_global()
end

function weapon_manager:disable(end_time) counterAdd("rx_wmgr.weapon_manager:disable")
	if end_time then
		self.disabled_temp = end_time
	else
		self.disabled = true
	end
end

function weapon_manager:enable() counterAdd("rx_wmgr.weapon_manager:enable")
--	self.disabled = nil
	self.disabled_temp = nil
end

		class "fake_weapon_manager"
		function fake_weapon_manager:__init()
			self.disabled = true
		end
		function fake_weapon_manager:initialize()
		end
		function fake_weapon_manager:update()
		end
		function fake_weapon_manager:get_weapon()
			return obj:best_weapon()
		end
		function fake_weapon_manager:output()
		end
		function fake_weapon_manager:set_weapon()
		end
		function fake_weapon_manager:reload()
		end
		function fake_weapon_manager:update_weapon()
		end
		function fake_weapon_manager:check_conditions()
		end
		function fake_weapon_manager:update_weapon_list()
			return 0,0
		end
		function fake_weapon_manager:have_ammo()
		end
		function fake_weapon_manager:process_item()
		end
		function fake_weapon_manager:return_items()
		end
		function fake_weapon_manager:disable()
		end
		function fake_weapon_manager:enable()
		end

local fake_wm = fake_weapon_manager()

function get_wm(obj) counterAdd("rx_wmgr.get_wm")
	if wm_modes.enabled_ext and obj:alive() then
		local id = obj:id()
		local st = rx_ai.get_storage(id)
		if st.wm == nil then
			st.wm = weapon_manager(obj)
			wms[id] = true
		end
		return st.wm
	else
		return fake_wm
	end
end

function clear_wms(id) counterAdd("rx_wmgr.clear_wms")
	if id then
		wms[id] = nil
		local st = rx_ai.get_storage(id)
		if st then
			st.wm = nil
		end
	end
end

function return_all() counterAdd("rx_wmgr.return_all")
	for k,v in pairs(wms) do
		local st = rx_ai.get_storage(k)
		if st and st.wm then
			st.wm:return_items()
		else
			wms[k] = nil
		end
	end
end

function kill_wm(obj,death) counterAdd("rx_wmgr.kill_wm")
	local id = obj:id()
	local st = rx_ai.get_storage(id)
	if st and st.wm ~= nil then
		st.wm:return_items(nil,death)
		clear_wms(id)
	end
end

function global_update(tg) counterAdd("rx_wmgr.global_update")
	if not wm_modes.inited then
		init()
	end
	if not wm_modes.enabled then
		return
	end
	if tg > update_time then
		for k,v in pairs(wms) do
			if db.storage[k] then
			else
				clear_wms(k)
			end
		end
		manage_box()
		update_time = tg+wm_modes.update_prd
	end
	local item, p, rp
	local level_object_by_id = level.object_by_id
	-- а вот дальше какой-то хитрый финт ушами с использованием то строки, то числа. sapsan
	for k,v in pairs(item_parents) do
		local item = level_object_by_id(k)
		if item then
			p = item:parent()
			rp = level_object_by_id(tonumber(v))
			if ((not p) or (p:id() ~= tonumber(v))) and rp then
				if type(v) == "string" then
					if p then
						p:transfer_item(item,rp)
					else
						item:transfer_item(item,rp)
					end
					item_parents[k] = tonumber(v)
				else
					item_parents[k] = tostring(v)
				end
			else
				item_parents[k] = nil
			end
		else
			item_parents[k] = nil
		end
	end
end

function npc_update(npc,st) counterAdd("rx_wmgr.npc_update")
	if wm_modes.enabled and st and st.wm then
		st.wm:update()
	end
end

function read_wm_modes(comm,rank,sect) counterAdd("rx_wmgr.read_wm_modes")
	if not wm_modes.inited then
		init()
	end
	if sect and wm_modes.sect.custom[sect] then
		return wm_modes.sect.custom[sect]
	end
	local ss,cm,rp
	if sect ~= defsec then
		if sect and wm_ini:section_exist(sect) then
			cm,rp = rx_utils.collect_sections_new(iniFileName,{sect,comm.."_"..rank,comm,rank,defsec})
			ss = true
		else
			if not wm_modes.sect[comm] then
				wm_modes.sect[comm] = {}
			end
			if wm_modes.sect[comm][rank] ~= nil then
				return wm_modes.sect[comm][rank]
			end
			cm,rp = rx_utils.collect_sections_new(iniFileName,{comm.."_"..rank,comm,rank,defsec})
		end
	else
		cm,rp = rx_utils.collect_sections_new(iniFileName,{defsec})
	end
	cm.disabled = (cm.disabled == "true" or cm.disabled == "1")
	if cm.disabled or cm.mode2 == "0" then
		cm.process_mode = "0"
	end
	if cm.mode1 == "2" and not wm_modes.koeffs[cm.koeffs] then
		local kf = {}
		if not wm_ini:section_exist(cm.koeffs) then
			abort("weapon_mgr: can`t find koeffs section [%s]",cm.koeffs)
		end
		kf.dmg = rx_utils.read_from_ini_new(iniFileName, cm.koeffs,"damage", 0) --getIniValueFloat(cm.koeffs,"damage", 0, iniFileName)
		kf.rpm = rx_utils.read_from_ini_new(iniFileName, cm.koeffs,"rpm", 0) --getIniValueFloat(cm.koeffs,"rpm", 0, iniFileName)
		kf.dst = rx_utils.read_from_ini_new(iniFileName, cm.koeffs,"distance", 0) --getIniValueFloat(cm.koeffs,"distance", 0, iniFileName)
		kf.dsp = rx_utils.read_from_ini_new(iniFileName, cm.koeffs,"dispersion", 0) --getIniValueFloat(cm.koeffs,"dispersion", 0, iniFileName)
		wm_modes.koeffs[cm.koeffs] = kf
	elseif cm.mode1 == "3" and not wm_modes.priors[cm.priors] then
		local pr = {}
		local ini = g_ini_file(iniFileName)
		if not ini:section_exist(cm.priors) then
			abort("weapon_mgr: can`t find priors section [%s]",cm.priors)
		end
		local n = ini:line_count(cm.priors)
		if n > 0 then
			for i = 0,n-1 do
				local r, id, value = ini:r_line(cm.priors,i,"","")
				if pr[id] == nil then
					pr[id] = tonumber(value)
				end
			end
		end
		wm_modes.priors[cm.priors] = pr
	end
	local tps = Parse_StrToTbl(cm.types,",")
	cm.types = {}
	local t
	for i = 1, #wm_modes.types.list do
		t = wm_modes.types.list[i]
		table_insert(cm.types,{["t"] = t,["p"] = tonumber(tps[i])})
	end
	table_sort(cm.types,function(a,b) return a.p > b.p end)
	if sect == defsec then
		wm_modes.sect.default = cm
		return wm_modes.sect.default
	end
	if ss then
		if  rp[1] > 0 or rp[2] > 0 or rp[3] > 0 or rp[4] > 0 then
			wm_modes.sect.custom[sect] = cm
		else
			wm_modes.sect.custom[sect] = wm_modes.sect.default
		end
		return wm_modes.sect.custom[sect]
	else
		if  rp[1] > 0 or rp[2] > 0 or rp[3] > 0 then
			wm_modes.sect[comm][rank] = cm
		else
			wm_modes.sect[comm][rank] = wm_modes.sect.default
		end
		return wm_modes.sect[comm][rank]
	end
end

function read_wpn_params(sect) counterAdd("rx_wmgr.read_wpn_params")
	if not wm_modes.inited then
		init()
	end
	if weapon_params[sect] == nil then
		weapon_params[sect] = {}
		local ammos = get_ammo_section(sect)
		local dmg, blast = get_dmg(sect,ammos)
		local rpm = get_rpm(sect)
		local disp = get_disp(sect,ammos)
		local dist, distr = get_dist(sect)
		local cost = get_cost(sect)
		local typ = get_weapon_type(sect)
		local magsize = get_mag_size(sect)
		local minr, maxr = get_radius(sect)
		local enemyt = get_enemyt(sect)
		local rsec = get_rsect(sect)
		weapon_params[sect] = {cst = cost,typ = typ,dmg = dmg,rpm = rpm,dsp = disp,dst = dist,dtn = distr,mag = magsize,mnr = minr,mxr = maxr,bls = blast,ams = ammos,enm = enemyt,rsc = rsec}
	end
	return weapon_params[sect]
end

--local valuesFloat = {}
function read_if_exist_float(section,value,default) counterAdd("rx_wmgr.read_if_exist_float")
	return getIniValueFloatSimple(section,value,default)
	--[[if not valuesFloat[section] or not valuesFloat[section][value] then
		if not valuesFloat[section] then
			valuesFloat[section] = {}
		end
		local ltx = system_ini()
		if wm_ini:section_exist(section) and wm_ini:line_exist(section,value) then
			valuesFloat[section][value] = wm_ini:r_float(section,value)
		elseif ltx:section_exist(section) and ltx:line_exist(section,value) then
			valuesFloat[section][value] = ltx:r_float(section,value)
		else
			valuesFloat[section][value] = default
		end
	end
	
	return valuesFloat[section][value]
	]]
    --[[local ltx = system_ini()
    if wm_ini:section_exist(section) and wm_ini:line_exist(section,value) then
		return wm_ini:r_float(section,value)
    elseif ltx:section_exist(section) and ltx:line_exist(section,value) then
		return ltx:r_float(section,value)
	else
		return default
	end]]
end

--local valuesString = {}
function read_if_exist_string(section,value,default) counterAdd("rx_wmgr.read_if_exist_string")
	return getIniValueStringSimple(section,value,default)
	--[[if not valuesString[section] or not valuesString[section][value] then
		if not valuesString[section] then
			valuesString[section] = {}
		end
		local ltx = system_ini()
		if wm_ini:section_exist(section) and wm_ini:line_exist(section,value) then
			valuesString[section][value] = wm_ini:r_string(section,value)
		elseif ltx:section_exist(section) and ltx:line_exist(section,value) then
			valuesString[section][value] = ltx:r_string(section,value)
		else
			valuesString[section][value] = default
		end
	end
	
	return valuesString[section][value]
	]]
    --[[local ltx = system_ini()
    if wm_ini:section_exist(section) and wm_ini:line_exist(section,value) then
		return wm_ini:r_string(section,value)
    elseif ltx:section_exist(section) and ltx:line_exist(section,value) then
		return ltx:r_string(section,value)
	else
		return default
	end]]
end

function get_dmg(section,ammo_list) counterAdd("rx_wmgr.get_dmg")
	local hit_power = getIniValueFloatSimple(section,"hit_power",0.5)
	local k_hit = 0
	local s
	local grenade, blast, blast_r, frags, frag_hit, hit, buck
	for i = 1, #ammo_list do
		s = ammo_list[i]
		grenade = getIniValueStringSimple(s,"fake_grenade_name", getIniValueStringSimple(s,"rocket_class"))
		if grenade then
			blast = getIniValueFloatSimple(grenade,"blast",2)
			blast_r = getIniValueFloatSimple(grenade,"blast_r",3)
			frags = getIniValueFloatSimple(grenade,"frags",10)
			frag_hit = getIniValueFloatSimple(grenade,"frag_hit",1)
			return (blast*blast_r*2)+(frags*frag_hit*2),blast_r
		else
			hit = getIniValueFloatSimple(s,"k_hit",0.7)
			buck = getIniValueFloatSimple(s,"buck_shot",1)
			if buck > 1 then
				hit = hit*buck*0.8
			end
			k_hit = k_hit+hit
		end
	end
	return ((hit_power*k_hit/#ammo_list*25)*1.7)^0.9
end

function get_rpm(section) counterAdd("rx_wmgr.get_rpm")
	local mag_size = read_if_exist_float(section,"ammo_mag_size",2)
	if mag_size < 4 then
		return (mag_size^0.4)*5
	end
	local rpm = read_if_exist_float(section,"rpm",10)
	rpm = ((rpm/2)^0.2)*8
	local f_modes = read_if_exist_string(section,"fire_modes","1")
	if string_find(f_modes,"-1") or (tonumber(f_modes) and tonumber(f_modes) > 4) then
		rpm = rpm*1.3
	end
	return rpm+(mag_size/3)
end

function get_disp(section,ammo_list) counterAdd("rx_wmgr.get_disp")
	local disp_base	= read_if_exist_float(section,"fire_dispersion_base",0.2)
	local k_disp = 0
	for i = 1, #ammo_list do
		k_disp = k_disp+read_if_exist_float(ammo_list[i],"k_disp",1)
	end
	if disp_base < 0.2 then
		disp_base = 0.2
	end
	return disp_base*k_disp/#ammo_list*10
end

function get_dist(section) counterAdd("rx_wmgr.get_dist")
	local dist = read_if_exist_float(section,"fire_distance",50)
	return (dist/2)^0.7,dist
end

function get_radius(section) counterAdd("rx_wmgr.get_radius")
	local maxr = read_if_exist_float(section,"max_radius",100)
	local minr = read_if_exist_float(section,"min_radius",0)
	return minr, maxr
end

function get_weapon_type(section) counterAdd("rx_wmgr.get_weapon_type")
	return read_if_exist_string(section,wm_modes.types.line,"0")
end

function get_mag_size(section) counterAdd("rx_wmgr.get_mag_size")
	return read_if_exist_float(section,"ammo_mag_size",1)
end

function get_cost(section) counterAdd("rx_wmgr.get_cost")
	return read_if_exist_float(section,"cost",333)
end

function get_ammo_section(section) counterAdd("rx_wmgr.get_ammo_section")
	return rx_utils.parse_list_new(nil,section,"ammo_class")
end

function get_enemyt(section) counterAdd("rx_wmgr.get_enemyt")
	local enemyt = read_if_exist_string(section,"enemy",nil)
	if enemyt then
		local tmp = Parse_StrToTbl(enemyt,",")
		enemyt = {}
		local v
		for i = 1, #tmp do
			v = tmp[i]
			local p = string_find(v,":",1,true)
			enemyt[string_sub(v,1,p-1)] = string_sub(v,p+1,-1)
		end
	end
	return enemyt
end

function get_rsect(section) counterAdd("rx_wmgr.get_rsect")
	local rsect = read_if_exist_string(section,"rsec",nil)
	if rsect then
		rsect = Parse_StrToTbl(rsect,",")
		if #rsect < 3 then
			abort("number of values in rsec(%s) '%s' < 3!",section,#rsect)
		end
	end
	return rsect
end

function get_box() counterAdd("rx_wmgr.get_box")
	return boxid and level.object_by_id(boxid)
end

function manage_box() counterAdd("rx_wmgr.manage_box")
	local sim = alife()
	local box = boxid and sim:object(boxid)
	if not (get_box() and box) then
		boxid = nil
		local ggraph = game_graph()
		if not ggraph:valid_vertex_id(db.actor:game_vertex_id()) then
			return
		end
		local clid = ggraph:vertex(db.actor:game_vertex_id()):level_id()
		local obj
		for id=1,65534 do
			obj = sim:object(id)
			if obj and obj:section_name() == "rx_inventory_box" and ggraph:vertex(obj.m_game_vertex_id):level_id() == clid then
				box = obj
				boxid = id
				break
			end
		end
	end
	if not box then
		create_box()
		return
	end
	if not get_box() then
		box:can_switch_offline(false)
		rx_utils.switch_online(boxid)
		return
	end
end

local box, lbox

function manage_box_0() counterAdd("rx_wmgr.manage_box_0")
	box = boxid and alife():object(boxid)
	lbox = boxid and level.object_by_id(boxid)
	if not (lbox and box) then
		boxid = nil
	end
end

function manage_box_single(obj, clid, lvl, sect, id) counterAdd("rx_wmgr.manage_box_single")
	if not (lbox and box) and obj and sect == "rx_inventory_box" and lvl == clid then
		box = obj
		boxid = id
		if boxid then
			lbox = level.object_by_id(boxid)
		end
	end
end
function manage_box_2() counterAdd("rx_wmgr.manage_box_2")
	if not box then
		create_box()
		return
	end
	if not get_box() then
		box:can_switch_offline(false)
		switch_online(boxid)
		return
	end
end

function create_box() counterAdd("rx_wmgr.create_box")
	local pos = vector():set(0,-300,0)
	if db.actor then
		local obj = alife():create("rx_inventory_box",pos,db.actor:level_vertex_id(),db.actor:game_vertex_id())
		if obj then
			boxid = obj.id
			amk_offline_alife.protected.ids[boxid] = true
		end
	end
end

function net_spawn() counterAdd("rx_wmgr.net_spawn")
--	local boxid = xr_logic.pstor_retrieve(db.actor,"wm_boxid_"..level.name(),nil)
	if boxid then
		local sim = alife()
		local sobj
		for i=1,65534 do
			sobj = sim:object(i)
			if sobj and sobj.parent_id == boxid then
				sim:release(sobj,true)
			end
		end
	end
end

function net_spawn_single(sobj) counterAdd("rx_wmgr.net_spawn_single")
	if boxid then
		if sobj and sobj.parent_id == boxid then
			alife():release(sobj,true)
		end
	end
end
