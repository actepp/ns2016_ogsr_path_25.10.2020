---- Rulix aka Bak --- 8.5.2009
-- создано на базе схемы метани€ гранат от   xStream  (xrs_grenade.script)

local math_random = math.random
local math_abs = math.abs
local math_max = math.max
local string_find = string.find
local string_sub = string.sub
local table_insert = table.insert
class "evaluator_gl_ready" (property_evaluator)		-- определяет, есть ли занятие для схемы, запоминает цели для стрельбы
function evaluator_gl_ready:__init(npc,name,storage) super (nil,name)
	self.st = storage
	self.check_time = 0
	self.mem_time = 0
	self.st.squad = string.format("%s-%s-%s",npc:team(),npc:squad(),npc:group())	-- не переопределяется при изменении сквада
	rx_ai.subscribe_for_events(npc,self)
end
function evaluator_gl_ready:evaluate()
	local npc,stor = self.object,self.st
	local be,tg = npc:best_enemy(),time_global()
	if be and enemy_memory[stor.squad] and self.mem_time < tg and npc:memory_time(be)+1500 > tg and IsStalker(be) then
		local mtime = rx_utils.is_actor(be) and 30000 or 20000
		enemy_memory[stor.squad][be:id()] = {be:position(),be:level_vertex_id(),tg+mtime,be}
		self.mem_time = tg+1000
	end
	if self.check_time > tg then
		return false
	end
	local res,ammo = check_ammo(npc)
	stor.gl_ready = res
	stor.can_fire = false
	if res then	-- основное условие - наличие гранатомёта и гранат
		stor.ammo = ammo
		if stor.charged then
			if be and not be:wounded() then
				stor.can_fire = true
			else
				res = false	-- врагов нет - расходимся
			end
		end
	else
		self.check_time = tg+(be and 2000 or 10000)
	end
	return res
end
function evaluator_gl_ready:hit_callback(amount,dir,who)
	local npc = self.object
	--[[if enemy_memory[self.st.squad] and who and who:alive() and IsStalker(who) and npc:relation(who) == game_object.enemy and not xr_combat_ignore.is_ignored(npc,who) then
		enemy_memory[self.st.squad][who:id()] = {who:position(),who:level_vertex_id(),time_global()+30000,who}
	end
	--]]
end
-- удаление мусора из инвентаря при смерти
function evaluator_gl_ready:death_callback()
	local npc,sim = self.object,alife()
	for i=0,npc:object_count()-1 do
		local item = npc:object(i)
		local sec = item:section()
		if (string.find(sec,"gl_fake_missile") or string.find(sec,"gl_test_shell")) and sim:object(item:id()) then
			delete_obj(item:id())
		end
	end
end
function read_from_ini(iniFileName,sec,val,def,typ,sub) counterAdd("rx_gl.read_from_ini")
	--local res = rx_utils.read_from_ini(ini,sec,val,def,typ)
	local res = rx_utils.read_from_ini_new(iniFileName,sec,val,def,typ)
	if sub and type(res) == "string" then
		local p = string_find(res,sub,1,true)
		if p then
			res = string_sub(res,1,p-1)
		end
	end
	return res
end

local iniFileName = "misc\\rx_gl.ltx"
local gl_ini = g_ini_file(iniFileName)
local temp = {fms = {},npcs = {},rem = {}}

local test_res = {}
local active_shells = {}
local config_data = {}
local enemy_memory = {}


local gl_sets = {forbiddens = {weapons = {},factions = {},npcs = {}},
				weapons = {},
				ranks = {},
				fms = {},
				min_dist = read_from_ini(iniFileName,"main","min_dist",5),
				max_dist = read_from_ini(iniFileName,"main","max_dist",80),
				enabled = read_from_ini(iniFileName,"main","enabled",true,0),
				check_prd = read_from_ini(iniFileName,"main","check_period",2000),
				spawn_prd = read_from_ini(iniFileName,"main","spawn_period",180)}

local bad_acts = {xr_actions_id.stohe_meet_base+1,
				watcher_act and watcher_act.actid_reach_item,
				watcher_act and watcher_act.actid_grab_item,
				watcher_act and watcher_act.actid_grab_body,
				watcher_act and watcher_act.actid_correct_position}

local test_mem = {}

function init() counterAdd("rx_gl.init")
	local ranks = {"novice","experienced","veteran","master"}
	local v
	for i = 1, #ranks do
		v = ranks[i]
		gl_sets.ranks[v] = {aim = read_from_ini(iniFileName,v,"aim_time",100),reload = read_from_ini(iniFileName,v,"reload_time",3200)}
	end
	gl_sets.forbiddens.weapons = rx_utils.parse_list_new(iniFileName,"main","forbidden_weapons",true)
	gl_sets.forbiddens.factions = rx_utils.parse_list_new(iniFileName,"main","forbidden_factions",true)
	gl_sets.forbiddens.npcs = rx_utils.parse_list_new(iniFileName,"main","forbidden_npcs",true)
	gl_sets.inited = true
end


class "evaluator_launch_grenade" (property_evaluator)
function evaluator_launch_grenade:__init(npc,name,storage) super (nil,name) counterAdd("rx_gl.evaluator_launch_grenade.__init")
	self.st = storage
	self.st.check_time = time_global()+math_random(2000,10000)
end
function evaluator_launch_grenade:evaluate() counterAdd("rx_gl.evaluator_launch_grenade.evaluate")
--	self.st.charged = true
	local npc = self.object
	local wpn = npc:active_item()
	local tg = time_global()
	local be = npc:best_enemy()
	if self.st.launch then
		if self.st.charged and check_weapon(wpn) then
			return true
		else
			self.st.launch = nil
			self.st.check_time = tg+gl_sets.check_prd+math_random(gl_sets.check_prd)*(4 - level.get_game_difficulty())
			return false
		end
	elseif not (be and self.st.charged and npc:weapon_unstrapped() and check_ammo(npc)) then
		return false
	end
	
	local shell = {}
	local s
	for k,v in pairs(gl_sets.weapons[wpn:section()].shells) do
		s = npc:object(v)
		if s then
			table_insert(shell,v)
		end
	end
	
	self.shell = shell[math_random(#shell)]
	
	local targetCandidats = {}
--	local bd = npc:best_danger()
	local target = be --or (bd and bd:object())
	if self.st.check_time < tg and target --[[and not xr_wounded.is_wounded(target)]] then
		-- собираем врагов и друзей
		local enemies = {}
		local friends = {}
		enemies[target:id()] = {["present"] = true}

		local obj
	
		for o,_ in npc:memory_visible_objects() do
			obj = o:object()
			if obj and not enemies[obj:id()] and not friends[obj:id()] and (IAmAStalker[obj:clsid()] or IAmAMonster[obj:clsid()]) and obj:alive() 
				and npc:see(obj) and not xr_wounded.is_wounded(obj)
				and getIniValueFloatSimple(obj:section(), "ph_mass", 100) > 25
			then
				if npc:relation(obj) == game_object.enemy then
					enemies[obj:id()] = {["present"] = true}
				else
					friends[obj:id()] = true
				end
			end
		end
		
		for o,_ in npc:memory_sound_objects() do
			obj = o:object()
			if obj and not enemies[obj:id()] and not friends[obj:id()] and (IAmAStalker[obj:clsid()] or IAmAMonster[obj:clsid()]) and obj:alive() 
				and npc:see(obj) and not xr_wounded.is_wounded(obj)
				and getIniValueFloatSimple(obj:section(), "ph_mass", 100) > 25
			then
				if npc:relation(obj) == game_object.enemy then
					enemies[obj:id()] = {["present"] = true}
				else
					friends[obj:id()] = true
				end
			end
		end
		
		local r = get_shell_params(self.shell).radius
		
		-- смотрим чтобы друзь€ не были слишком близко к врагам
		for fid, fpresent in pairs(friends) do
			local friend = level.object_by_id(fid)
			local fpos = friend and friend:position()
			r = r*r
			for eid, einfo in pairs(enemies) do
				if einfo["present"] then
					local enemy = level.object_by_id(eid)
					local epos = enemy and enemy:position()
					if not epos or epos:distance_to_sqr(fpos) < r*2 then
						enemies[eid]["present"] = false
					end
				end
			end
		end
		
		-- кто из врагов в толпе
		local best_enemy_id = nil
		local best_enemy_value = 0
		for eid, einfo in pairs(enemies) do
			if einfo["present"] then
				local enemy = level.object_by_id(eid)
				local epos = enemy and enemy:position()
				enemies[eid]["value"] = getIniValueFloatSimple(enemy:section(), 'Health', 1) / getIniValueFloatSimple(enemy:section(), 'explosion_immunity', 1)
				for eid_near, einfo_near in pairs(enemies) do
					if eid ~= eid_near then
						local enemy_near = level.object_by_id(eid_near)
						local epos_near = enemy_near and enemy_near:position()
						if epos_near:distance_to_sqr(epos) < r then
							enemies[eid]["value"] = enemies[eid]["value"] + getIniValueFloatSimple(enemy_near:section(), 'Health', 1) / getIniValueFloatSimple(enemy_near:section(), 'explosion_immunity', 1)
						end
					end
				end
				
				if enemies[eid]["value"] > best_enemy_value then
					best_enemy_id = eid
				end
			end
		end
		
		if best_enemy_id then
			-- все хорошо - пробуем
			self.st.target = best_enemy_id
			self.st.launch = true
			return true
		else
			self.st.check_time = tg+gl_sets.check_prd+math_random(gl_sets.check_prd)*(4 - level.get_game_difficulty())
		end

	end
	return false
end


class "action_launch_grenade" (action_base)
function action_launch_grenade:__init (npc,action_name,storage) super (nil,action_name) counterAdd("rx_gl.action_launch_grenade:__init")
	self.st = storage
end

function action_launch_grenade:initialize() counterAdd("rx_gl.action_launch_grenade:initialize")
	action_base.initialize(self)
	local npc,wpn = self.object,self.object:active_item()
	if check_weapon(wpn) then
		local shell = {}
		local s
		for k,v in pairs(gl_sets.weapons[wpn:section()].shells) do
			s = npc:object(v)
			if s then
				table_insert(shell,v)
			end
		end
		self.shell = shell[math_random(#shell)]
	end
	local target_obj = self.st.target and level.object_by_id(self.st.target) or false
	if not (self.shell and target_obj and target_obj:alive()) then
		self:cancel(1500)
		return
	end
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_movement_type(move.stand)
	npc:set_mental_state(anim.danger)
	npc:set_item(object.idle,wpn)
	self.lvid = npc:level_vertex_id()
	self.bodystate = npc:body_state()
	self.target_point = target_obj:position()
	self.direction = utils.vector_copy_by_val(self.target_point):sub(npc:position()):add(vector():set(0,1,0))
	self.test_end = time_global()+5000
	if rx_wmgr then
		rx_wmgr.get_wm(npc):disable(10000)
	end
	self.stage = 0
	--[[if test_mem[self.lvid] and npc:object(self.shell) then
		for l,t in ipairs(test_mem[self.lvid]) do
			if npc:position():distance_to(t.pos) < 0.2 and self.target_point:distance_to(t.str) < get_shell_params(self.shell).radius then
				if check_victims(npc,t.str,get_shell_params(self.shell).radius,true) then
					self.target_point = t.trg
					self.launch_pos = t.lps
					self.str_pos = t.str
					self.type = t.typ
					self.aim_time = time_global()+600
					self.stage = 3
					return
				end
			end
		end
	end]]
end

function action_launch_grenade:execute() counterAdd("rx_gl.action_launch_grenade:execute")
	action_base.execute(self)
	local npc,wpn,tg = self.object,self.object:active_item(),time_global()
	if not self.stage then
		return
	elseif not wpn or wpn:get_ammo_in_magazine() == 0 then
		self:cancel(2500,true)
		return
	end
	npc:set_movement_type(move.stand)
	npc:set_body_state(self.bodystate)
--	npc:set_sight(look.direction,self.direction)
	npc:set_sight(look.fire_point,self.target_point)
	if self.stage == 0 then
		local s = alife():create("gl_test_shell_"..self.shell,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
		self.test_shell = s.id
		self.stage = 1
	elseif self.stage == 1 then -- запуск
		if check_victims(npc,self.target_point,get_shell_params(self.shell).radius,true) then
			self.launch_pos = npc:bone_position("bip01_head")
			self.type = math_random(8)
			launch2(npc,self.test_shell,self.target_point,self.launch_pos,get_shell_params(self.shell).radius,self.type,true)
			gl_switch(npc)
			self.stage = 2
		else
			self:cancel(3000)
		end
	elseif self.stage == 2 then -- ожидание
		local trg = self.st.target and level.object_by_id(self.st.target) or npc:best_enemy()
		if trg and npc:see(trg) and npc:animation_count() == 0 then
			npc:set_sight(look.fire_point,trg:position())
			npc:set_item(object.fire1,wpn,1,700)
		else
			npc:set_item(object.aim1,wpn)
			npc:set_sight(look.fire_point,self.target_point)
		end
		local ts = temp.fms[self.test_shell]
		if not ts then
			self:cancel(3000)
		elseif self.test_end < tg then
			self:cancel(3000)
		elseif ts.explode then
			self.str_pos = ts.pos
			self.aim_time = tg+gl_sets.ranks[ranks.get_obj_rank_name(npc)].aim
			self.stage = 3
		end
	elseif self.stage == 3 then -- ожидание
		if self.aim_time > tg then
			npc:set_item(object.aim1,wpn)
			npc:set_sight(look.direction,self.direction)
		else
			if check_victims(npc,self.str_pos,get_shell_params(self.shell).radius,true) and npc:object(self.shell) then
--				if not test_mem[self.lvid] then
--					test_mem[self.lvid] = {}
--				end
				npc:set_item(object.aim1,wpn)
--				table_insert(test_mem[self.lvid],{pos = npc:position(),trg = self.target_point,str = self.str_pos,lps = self.launch_pos,typ = self.type})
				local s = alife():create("gl_fake_missile_"..self.shell,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
				self.fake_missile = s.id
				self.stage = 4
			else
				self:cancel(3000)
			end
		end
	elseif self.stage == 4 then -- запуск
		launch2(npc,self.fake_missile,self.target_point,self.launch_pos,get_shell_params(self.shell).radius,self.type)
		particles_object(gl_sets.weapons[wpn:section()].prtcl):play_at_pos(npc:bone_position("bip01_l_finger02"))
		--rx_utils.get_sound(gl_sets.weapons[wpn:section()].sshoot):play_at_pos(npc,npc:position(),0,sound_object.s3d)
		rx_sound.set_sound_play(npc:id(),"gl_fire")
		local anim
		if self.bodystate == move.crouch then
			anim = "cr_torso_4_attack_0"
		else
			anim = "norm_torso_4_attack_0"
		end
		npc:clear_animations()
		rx_utils.add_anim(npc,anim)
		self.st.charged = false
		local rem = npc:object(self.shell)
		if rem then
			temp.rem[rem:id()] = true
		end
		self:cancel(3000)
	end
end

function action_launch_grenade:cancel(ms) counterAdd("rx_gl.action_launch_grenade:cancel")
	local npc = self.object
	if self.test_shell then
		temp.fms[self.test_shell] = nil
		temp.rem[self.test_shell] = false
	end
	self.st.launch = nil
	self.bodystate = nil
	self.stage = nil
	self.shell = nil
	self.direction = nil
	self.test_shell = nil
	self.fake_missile = nil
	self.target_point = nil
	self.type = nil
	self.test_end = nil
	self.str_pos = nil
	if ms then
		self.st.check_time = time_global()+ms
	end
end

function action_launch_grenade:finalize() counterAdd("rx_gl.action_launch_grenade:finalize")
    action_base.finalize(self)
	if self.st.launch then
		self:cancel()
	end
	self.object:set_item(object.idle,self.object:active_item())
	if rx_wmgr then
		rx_wmgr.get_wm(self.object):enable()
	end
end


class "evaluator_reload_gl" (property_evaluator)
function evaluator_reload_gl:__init(npc,name,storage) super (nil,name) counterAdd("evaluator_reload_gl:__init")
	self.st = storage
	self.evn = false
	self.wait = time_global()+math_random(6000)
	rx_ai.subscribe_for_events(npc,self)
end
function evaluator_reload_gl:evaluate() counterAdd("rx_gl.evaluator_reload_gl:evaluate")
	local npc = self.object
	if self.st.charged then
		return false
	end
	
	if self.st.gl_ready and not (self.st.charged or npc:mental_state() == anim.panic or npc:is_talking()) then
		return safe_to_reload(npc,self)
	end
	local wpn = npc:active_item()
	if not (wpn and wpn:id() == self.st.wpn_id) then
		self.evn = false
	end
	if self.dif then
		self.dif = nil
	else
		self.dif = true
		return self.evn
	end
	if self.wait < time_global() and check_ammo(npc) then
		local in_cover = rx_utils.npc_in_cover(npc)
		if not in_cover then
			self.evn = false
			self.wait = time_global()+1600
		else
			self.st.wpn_id = wpn and wpn:id()
			self.evn = true
		end
	else
		self.evn = false
	end
	return self.evn
end
function evaluator_reload_gl:hit_callback(amount) counterAdd("rx_gl.evaluator_reload_gl:hit_callback")
	self.wait = time_global()+amount*10000
end


class "action_reload_gl" (action_base)
function action_reload_gl:__init (npc,action_name,storage) super (nil,action_name) counterAdd("rx_gl.action_reload_gl:__init")
	self.st = storage
	self.st.charged = true
end
function action_reload_gl:initialize() counterAdd("rx_gl.action_reload_gl:initialize")
	action_base.initialize(self)
	local npc = self.object
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_movement_type(move.stand)
	npc:set_item(object.idle,npc:active_item())
	self.dir = npc:direction()
	self.end_time = time_global()+(self.st.charge_time or gl_sets.ranks[ranks.get_obj_rank_name(npc)].reload or 3000)
	if rx_wmgr then
		rx_wmgr.get_wm(npc):disable(self.end_time)
	end
	self.mgr = npc:motivation_action_manager()
	for k,v in pairs(bad_acts) do
		local actn = self.mgr:action(v)
		if actn then
			actn:add_precondition(world_property(evid_gl_reload,false))
		end
	end
end
function action_reload_gl:execute() counterAdd("rx_gl.action_reload_gl:execute")
	action_base.execute(self)
	local npc,anim = self.object
	npc:set_sight(look.direction,self.dir)
	npc:set_movement_type(move.stand)
	local wpn = npc:active_item()
	if not (wpn and wpn:id() == self.st.wpn_id) then
		return
	end
	if self.play then
		if self.end_time <= time_global() then
			self.st.charged = true
		end
	else
		if not npc:weapon_unstrapped() then
			npc:set_item(object.idle,wpn)
			return
		end
		if npc:body_state() == move.crouch then
			anim = "cr_torso_3_reload_0"
		else
			anim = "norm_torso_3_reload_0"
		end
		if wpn then
			rx_utils.add_anim(npc,anim)
			rx_utils.get_sound(gl_sets.weapons[wpn:section()].sreload):play_at_pos(npc,npc:position(),2)
		end
		self.play = true
	end
end
function action_reload_gl:finalize() counterAdd("rx_gl.action_reload_gl:finalize")
    action_base.finalize(self)
	if self.end_time <= time_global()+1500 then
		self.st.charged = true
	end
	self.object:clear_animations()
	self.dir = nil
	self.play = nil
	self.end_time = nil
	self.direction = nil
	if rx_wmgr then
		rx_wmgr.get_wm(self.object):enable()
	end
	for k,v in pairs(bad_acts) do
		local actn = self.mgr:action(v)
		if actn then
			actn:remove_precondition(evid_gl_reload)
		end
	end
	self.mgr = nil
end


function launch(obj,target,typ) counterAdd("rx_gl.launch")
	local dir = utils.vector_copy_by_val(target):sub(obj:position())
	local dist_xz = obj:position():distance_to_xz(target)
	local lvel = 75
	local add = vector():set(0,0,0)
	add.y = (dist_xz/22)^1.8
	if typ == 1 then
		add.y = add.y+dist_xz/100
	elseif typ == 2 then
		add.y = add.y+dist_xz*2/100
	elseif typ == 3 then
		add.y = add.y-dist_xz/100
	elseif typ == 4 then
		add.y = add.y-dist_xz*2/100
	elseif typ == 5 then
		add.y = add.y-dist_xz*3/100
	end
	dir:add(add)
	obj:set_desired_direction(dir)
	local hit = hit()
	hit.type = hit.strike
	hit.power = 0
	hit.impulse = lvel*15
	hit.draftsman = obj
	hit.direction = dir
	obj:hit(hit)
end

function launch2(npc,id,target,pos,radius,typ,test) counterAdd("rx_gl.launch2")
	npc:drop_item_and_teleport(level.object_by_id(id),pos)
	temp.fms[id] = {npc_id = npc:id(),time = time_global()+6000,radius = radius,target = target,cnt = 0,vel = 0,launch = true,type = typ,test = test}
end

function gl_switch(npc) counterAdd("rx_gl.gl_switch")
	local wpn = npc:active_item()
	if check_weapon(wpn) and npc:weapon_unstrapped() then
		local anim
		if npc:body_state() == move.crouch then
			anim = "cr_torso_7_draw_0"
		else
			anim = "norm_torso_7_draw_0"
		end
		npc:set_item(object.idle,wpn)
		npc:clear_animations()
		rx_utils.add_anim(npc,anim)
		rx_utils.get_sound(gl_sets.weapons[wpn:section()].sswitch):play_no_feedback(npc,sound_object.s3d,0,npc:position(),1.0)
	end
end

function get_shell_params(sec) counterAdd("rx_gl.get_shell_params")
	if not gl_sets.fms[sec] then
		local fake = read_from_ini(nil,sec,"fake_grenade_name","wpn_fake_missile",1)
		local br = read_from_ini(nil,fake,"blast_r",10)
		local fr = read_from_ini(nil,fake,"frags_r",15)
		gl_sets.fms[sec] = {radius = math_max(br,fr), fake = fake}
	end
	return gl_sets.fms[sec]
end

function check_weapon(wpn) counterAdd("rx_gl.check_weapon")
	if not wpn then
		return false
	end
	local sec = wpn:section()
	if rx_utils.IAmAWeaponFA[wpn:clsid()] and gl_sets.forbiddens.weapons[sec] ~= true then
		if rx_utils.addon_attached(wpn,"gl") then
			if not gl_sets.weapons[sec] then
				local particles = read_from_ini(nil,sec,"grenade_flame_particles","weapons\\generic_weapon01",2)
				local sound_shoot = read_from_ini(nil,sec,"snd_shoot_grenade","weapons\\gen_grenshoot",2,',')
				local sound_reload = read_from_ini(nil,sec,"snd_reload_grenade","weapons\\gen_grenload",2,',')
				local sound_switch = read_from_ini(nil,sec,"snd_switch","weapons\\groza_switch",2,',')
				local launcher = read_from_ini(nil,sec,"grenade_launcher_name",nil,1)
				if not launcher then
					launcher = sec
				end
				local vel =	read_from_ini(nil,launcher,"grenade_vel",76)
				local shells = {}
				local grenade_class = rx_utils.parse_list_new(nil,sec,"grenade_class")
				local s
				for i = 1, #grenade_class do
					s = grenade_class[i]
					if iniSectionExistSimple("gl_test_shell_"..s) and iniSectionExistSimple("gl_fake_missile_"..s) then
						table_insert(shells,s)
					end
				end
				gl_sets.weapons[sec] = {shells = shells,vel = vel,prtcl = particles,sshoot = sound_shoot,sreload = sound_reload,sswitch = sound_switch}
			end
			return #gl_sets.weapons[sec].shells ~= 0 
		end
	end
	return false
end

function check_ammo(npc) counterAdd("rx_gl.check_ammo")
	local wpn = npc:active_item()
	if not check_weapon(wpn) then
		return false
	end
	local shells = gl_sets.weapons[wpn:section()].shells
	for k,v in pairs(shells) do
		if npc:object(v) then
			return true
		end
	end
	return false
end

function check_enemy(npc,be) counterAdd("rx_gl.check_enemy")
	return be:alive() and npc:see(be) and not xr_wounded.is_wounded(be) -- and be:position():distance_to(level.vertex_position(be:level_vertex_id()))<2
end

function check_victims(npc,pos,radius,pre) counterAdd("rx_gl.check_victims")
	local nid = npc:id()
	if not radius then
		radius = 1
	else
		radius = radius * radius
	end
	if npc:position():distance_to_sqr(pos) < radius*1.5 then
		return false
	end
	local enemy = false
	local obj
	local dist
	local objects = {}
	--local level_object_by_id = level.object_by_id
	--for k,v in pairs(db.storage) do
	--	obj = level_object_by_id(k)
	for o in npc:memory_visible_objects() do
		obj = o:object()
		if obj and (IAmAStalker[obj:clsid()] or IAmAMonster[obj:clsid()]) and obj:alive() --[[and npc:see(obj)]] then
			objects[obj:id()] = true
			dist = obj:position():distance_to_sqr(pos)
			if dist < radius then
				if npc:relation(obj) == game_object.enemy or IAmAMonster[obj:clsid()] then
					enemy = true
				else
					return false
				end
			elseif dist < radius*2 and IAmAStalker[obj:clsid()] and npc:relation(obj) ~= game_object.enemy then
				return false
			end
		end
	end
	for o in npc:memory_sound_objects() do
		obj = o:object()
		if obj and not objects[obj:id()] and (IAmAStalker[obj:clsid()] or IAmAMonster[obj:clsid()]) and obj:alive() --[[and npc:see(obj)]] then
			objects[obj:id()] = true
			dist = obj:position():distance_to_sqr(pos)
			if dist < radius then
				if npc:relation(obj) == game_object.enemy or IAmAMonster[obj:clsid()] then
					enemy = true
				else
					return false
				end
			elseif dist < radius*2 and IAmAStalker[obj:clsid()] and npc:relation(obj) ~= game_object.enemy then
				return false
			end
		end
	end
	if pre then
		return enemy
	else
		return true
	end
end

function spawn_shell(npc) counterAdd("rx_gl.spawn_shell")
	local wpn = npc:active_item()
	if check_weapon(wpn) then
		local cnt = #gl_sets.weapons[wpn:section()].shells
		if cnt ~= 0 then
			local shell = gl_sets.weapons[wpn:section()].shells[math_random(cnt)]
			alife():create(shell,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
		end
	end
end

function update(tg) counterAdd("rx_gl.update")
	local sim = alife()
	local sobj
	local obj
	local vel
	local pos
	local level_object_by_id = level.object_by_id
	for k,v in pairs(temp.fms) do
		sobj = sim:object(k)
		if sobj then
			obj = level_object_by_id(k)
			if obj and obj:parent() then
			elseif obj then
				if v.launch then
					launch(obj,v.target,v.type)
					temp.fms[k].launch = nil
					temp.fms[k].type = nil
				end
				vel = get_atn_vel(obj)
				if v.explode then
				elseif v.time < tg then
					temp.rem[k] = true
					temp.fms[k] = nil
				elseif v.cnt > 6 or v.vel > 20 then
					pos = obj:position()
					if vel < v.vel*0.92 or vel > v.vel*1.11 then
						if v.test then
							temp.fms[k].pos = pos
							temp.fms[k].explode = true
							temp.rem[k] = true
						else
							obj:explode_initiator( v.npc_id )
							temp.fms[k] = nil
						end
					else
						temp.fms[k].vel = vel
						temp.fms[k].cnt = v.cnt + 1
--						obj:set_desired_direction(utils.vector_copy_by_val(v.target):sub(pos))
					end
				else
					temp.fms[k].vel = vel
					temp.fms[k].cnt = v.cnt + 1
				end
			else
				temp.rem[k] = true
				temp.fms[k] = nil
			end
		elseif not v.explode then
			temp.fms[k] = nil
		end
	end
	for id,v in pairs(temp.rem) do
		sobj = sim:object(id)
		-- кос€к
		--if sobj or (sobj == false and sobj.parent_id and sobj.parent_id ~= 65535) then
		if sobj then
			sim:release(sobj, true)
		end
	end
	temp.rem = {}
end

function npc_update(npc,st) counterAdd("rx_gl.npc_update")
	if gl_sets.spawn_prd == 0 or not gl_sets.enabled or gl_sets.forbiddens.factions[npc:character_community()] or gl_sets.forbiddens.npcs[npc:name()] then
		return
	end
	local tg = time_global()
	if not st.gl_shell_spawn then
		st.gl_shell_spawn = tg+gl_sets.spawn_prd*1000+math_random(2000)
		return
	end
	if npc:alive() and tg > st.gl_shell_spawn then
		st.gl_shell_spawn = tg+gl_sets.spawn_prd*1000
		local wpn = npc:active_item()
		if check_weapon(wpn) then
			local prb = sol_utils.getRankById(npc:id())/1500
			if prb > 0.9 then
				prb = 0.9
			elseif prb < 0.01 then
				prb = 0.01
			end
			if math_random() < prb then
				local have_shell
				local shells = gl_sets.weapons[wpn:section()].shells
				if #shells == 0 then
					return
				end
				for i = 1, #shells do
					if npc:object(shells[i]) then
						have_shell = true
						break
					end
				end
				if not have_shell then
					local shell = shells[math_random(#shells)]
					alife():create(shell,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
				end
			end
		end
	end
end

function death(npc) counterAdd("rx_gl.death")
	local function remove_fms(q,item)
		local sec = item:section()
		if string_find(sec,"gl_test_shell",1,true) or string_find(sec,"gl_fake_missile",1,true) then
			temp.rem[item:id()] = true
		end
	end
	npc:iterate_inventory(remove_fms,q)
end

function net_spawn() counterAdd("rx_gl.net_spawn")
	local sim = alife()
	local sobj
	for a=1,65534 do
		sobj = sim:object(a)
		if sobj then
			net_spawn_single(sobj, sobj:section_name(), a)
		end
	end
end

function net_spawn_single(sobj, sec, id) counterAdd("rx_gl.net_spawn_single")
	if sobj then
		if string_find(sec,"gl_test_shell",1,true) or string_find(sec,"gl_fake_missile",1,true) then
			temp.rem[id] = true
		end
	end
end

function fake_pickup(obj) counterAdd("rx_gl.fake_pickup")
	local sec = obj:section()
	if string_find(sec,"gl_test_shell",1,true) or string_find(sec,"gl_fake_missile",1,true) then
		temp.rem[obj:id()] = true
	end
end

function get_atn_vel(obj) counterAdd("rx_gl.get_atn_vel")
	if not obj or not obj.get_physics_shell or not obj:get_physics_shell() then
		return 0
	end
	local vel = vector():set(0,0,0)
	obj:get_physics_shell():get_linear_vel(vel)
	vel = math_abs(vel.x)+math_abs(vel.y)+math_abs(vel.z)
	return vel
end

evid_gl_ready = rx_ai.base_id+1
evid_gl_fire = evid_gl_ready+1
evid_gl_fire = rx_ai.base_id+1
evid_gl_reload = evid_gl_fire+1
actid_gl_fire = evid_gl_fire
actid_gl_reload = evid_gl_reload


function add_to_binder(npc,ini,scheme,section,storage) counterAdd("rx_gl.add_to_binder")
	if not gl_sets.inited then
		init()
	end
	local manager = npc:motivation_action_manager()
	if not (gl_sets.enabled and not gl_sets.forbiddens.factions[npc:character_community()] and not gl_sets.forbiddens.npcs[npc:name()]) then
		manager:add_evaluator(evid_gl_fire,property_evaluator_const(false))
		manager:add_evaluator(evid_gl_reload,property_evaluator_const(false))
		manager:add_evaluator(evid_gl_ready,property_evaluator_const(false))
		return
	end
	manager:add_evaluator(evid_gl_ready,evaluator_gl_ready(npc,"eva_gl_ready",storage))
	manager:add_evaluator(evid_gl_fire,evaluator_launch_grenade(npc,"eva_launch_grenade",storage))
	manager:add_evaluator(evid_gl_reload,evaluator_reload_gl(npc,"eva_reload_gl",storage))

	local action = action_launch_grenade(npc,"act_launch_grenade",storage)
	action:add_precondition(world_property(stalker_ids.property_alive,true))
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
	
	if rx_facer then
		action:add_precondition(world_property(rx_facer.evid_facer,false))
	end
	if rx_ff then
		action:add_precondition(world_property(rx_ff.evid_dont_shoot,false))
	end
	if xrs_grenade and xrs_grenade.evid_aaa_grenade then
		action:add_precondition(world_property(xrs_grenade.evid_aaa_grenade,false))
	end
	if blowout_scheme and blowout_scheme.evid_outside then
		action:add_precondition(world_property(blowout_scheme.evid_outside,false))
	end
	action:add_precondition(world_property(evid_gl_fire,true))
	action:add_effect(world_property(evid_gl_fire,false))
	action:add_precondition(world_property(evid_gl_ready,true))
	manager:add_action(actid_gl_fire,action)
	action = action_reload_gl(npc,"act_reload_gl",storage)
	action:add_precondition(world_property(stalker_ids.property_alive,true))
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
	if rx_bandage then
		action:add_precondition(world_property(rx_bandage.evid_bandage,false))
	end
	if rx_facer then
		action:add_precondition(world_property(rx_facer.evid_facer,false))
	end
	if xrs_grenade and xrs_grenade.evid_aaa_grenade then
		action:add_precondition(world_property(xrs_grenade.evid_aaa_grenade,false))
	end
	if xrs_medic and xrs_medic.evid_self_medic then
		action:add_precondition(world_property(xrs_medic.evid_self_medic,false))
	end
	
	if xr_help_wounded then
		action:add_precondition(world_property(xr_help_wounded.evid_wounded_exist,false))
	end
	
	if rx_knife then
		action:add_precondition(world_property(rx_knife.evid_knife_attack,false))
	end
	
	if blowout_scheme and blowout_scheme.evid_outside then
		action:add_precondition(world_property(blowout_scheme.evid_outside,false))
	end
	action:add_precondition(world_property(evid_gl_reload,true))
	action:add_effect(world_property(evid_gl_reload,false))
	manager:add_action(actid_gl_reload,action)
	local acts = {xr_actions_id.alife,stalker_ids.action_combat_planner,stalker_ids.action_danger_planner}
	for i = 1, #acts do
		action = manager:action(acts[i])
		action:add_precondition(world_property(evid_gl_fire,false))
		action:add_precondition(world_property(evid_gl_reload,false))
	end
end


function set_scheme(npc,ini,scheme,section) counterAdd("rx_gl.set_scheme")
	local st = xr_logic.assign_storage_and_bind(npc,ini,scheme,section)
end

function disable_scheme(npc,scheme) counterAdd("rx_gl.disable_scheme")
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end
