local esc_first = {'wpn_pm','wpn_fort','wpn_bm16'}
local esc_first_thing = {'medkit','wpn_binoc','bread','flaska'}
local esc_art_part3 = { 'af_night_star', 'af_gold_fish', 'af_cristall', 'af_soul',
	'af_electra_moonlight','af_ameba_mica','af_rusty_sea_urchin' }
local esc_art_name3 = { 'Ночная звезда','Золотая рыбка','Кристалл','Душа',
	'Лунный свет', 'Слюда', 'Морской ёж' }
local esc_first_info = {'esc_bridge_first', 'esc_bridge_post1', 'esc_bridge_post2', 'esc_bridge_post3', 'esc_bridge_start', 'esc_kuznetsov_start', 'esc_sidor2_start', 'esc_talk_start'}
local esc_kuzya_ammo = {'ammo_7.62x54_ap','ammo_7.62x39_ap','ammo_5.45x39_ap'}

function first_thing(speak,reply)
	local actor = db.actor
	local sim = alife()
	local pos = actor:position()
	local lv = actor:level_vertex_id()
	local gv = actor:game_vertex_id()
	local id = actor:id()
	local num = math.random(1,3)
	local wpn = esc_first[num]
	local ammo = 'ammo_9x18_fmj'
	if num == 3 then
		ammo = 'ammo_12x70_buck'
	end
	sim:create(wpn,pos,lv,gv,id)
	num = math.random(3,10)
	create_ammo(ammo,pos,lv,gv,id,num)
	for k,v in pairs(esc_first_thing) do
		sim:create(v,pos,lv,gv,id)
	end
	for k,v in pairs(esc_first_info) do
		actor:give_info_portion(v)
	end
end

function zvezd_art(speak,reply)
	local actor = db.actor
	local num = math.random(1,#esc_art_part3)
	local art = esc_art_part3[num]
	alife():create(art,actor:position(),actor:level_vertex_id(),actor:game_vertex_id(),actor:id())
	ex_all.news_item_in(actor,art,1)
end

function bridge_have(actor,npc)	
	return db.actor and db.actor:object('vodka') ~= nil
end

function bridge_no_have(actor,npc)	
	return db.actor and not db.actor:object('vodka')
end

function bridge_give(speak,reply)
	local sim = alife()
	local item = db.actor:object('vodka')
	local id = item and (item:id() or item.id)
	local sobj = id and sim:object(id)
	if sobj then
		sim:release(sobj,true)
		return true
	end
	return false	
end

function kuznetsov_vodka_have(speak,reply)
	return amk_utils.inventory_search('vodka',10)
end

function kuznetsov_vodka_no_have(speak,reply)
	return amk_utils.inventory_search('vodka',10) ~= true
end

function kuznetsov_vodka_give(speak,reply)
	return item_GG_out('vodka',10)
end

function kuznetsov_vodka_ammo(speak,reply)
	local actor = db.actor
	local sim = alife()
	local pos = actor:position()
	local lv = actor:level_vertex_id()
	local gv = actor:game_vertex_id()
	local id = actor:id()
	local count = math.random(50,70)
	local max,min,num
	for k,v in pairs(esc_kuzya_ammo) do
		if k ~= #esc_kuzya_ammo then
			min = k*5
			max = k*min + min
			num = math.random(min,max)
			count = count - num
			create_ammo(v,pos,lv,gv,id,num)
		else
			create_ammo(v,pos,lv,gv,id,count)
		end
	end
end


local kuz_a1, kuz_a2

function kuznetsov_art_choice()
	local max = #esc_art_part3
	local kuz_a1 = math.random( max )	-- случайный номер позиции
	kuz_a2 = kuz_a1
	while kuz_a2 == kuz_a1 do kuz_a2 = math.random( max ) end	-- любой, кроме уже выданного

	db.storage[0].pstor.kuznetsov_art = kuz_a1 .. kuz_a2
	db.actor:give_talk_message( 'Нужны арты ' .. esc_art_name3[kuz_a1] .. ' и '
		.. esc_art_name3[kuz_a2], "ui\\ui_iconstotal", Frect():set(0,0,10,10),
		"simple_answer_item" )
end


function kuznetsov_art_start()
	local s = db.storage[0].pstor.kuznetsov_art
	if s then
		kuz_a1 = string.sub( s, 1, 1 ) + 0
		kuz_a2 = string.sub( s, 2, 2 ) + 0
		local task = CGameTask()
		task:load( 'esc_kuznetsov_art' )
		local objective = task:get_objective( 1 )
		objective:set_description( 'Нужны два артефакта: ' .. esc_art_name3[kuz_a1]
			.. ' и ' .. esc_art_name3[kuz_a2] )
		db.actor:give_task( task, nil, false )
	end
end


function kuznetsov_art_have()
	local s = db.storage[0].pstor.kuznetsov_art
	if s then
		kuz_a1 = string.sub( s, 1, 1 ) + 0
		kuz_a2 = string.sub( s, 2, 2 ) + 0
		if db.actor:object( esc_art_part3[kuz_a1] )
		  and db.actor:object( esc_art_part3[kuz_a2] ) then
			return true
		end
	end
	return false
end


function kuznetsov_art_no_have()
	return not kuznetsov_art_have()
end


function kuznetsov_art_give(speak,reply)
	if kuznetsov_art_have() then
		item_GG_out( esc_art_part3[kuz_a1], 1, 1 )
		item_GG_out( esc_art_part3[kuz_a2], 1, 1 )
		db.storage[0].pstor.kuznetsov_art = nil
		return true
	end
	return false
end

--------------------------------------------------------------------------------------------------------
-- Trader Repair
--------------------------------------------------------------------------------------------------------





function trader_miniquest_precond(trader, actor)
	local zz = false
	-- Читаем customdata
	local obj = alife():story_object(3)
	if (obj) then
		local t = amk.get_trader_data(obj)
		local cd = amk.parse_custom_data(t.custom)
		if (cd.microquest and cd.microquest.reward_money and cd.microquest.reward_items and tonumber(cd.microquest.reward_money) > 0 and cd.microquest.reward_items ~= "") then
			zz = true
		end
	end
	return zz
end

function trader_check_money_miniquest(trader, actor)
	local zz = false
	if (db.actor:money() >= 100) then
		zz = true
	end
	return zz
end

function trader_miniquest_transfer(trader, actor)
	dialogs.relocate_money(actor, 100, "out")
	news_main.on_miniquest_reward(trader)
end

function trader_miniquest_free_transfer(trader, actor)
	news_main.on_miniquest_reward(trader)
end

function trader_check_miniquest_free(trader, actor)
	if (has_alife_info("esc_trader_miniquest_free")) then
		return true
	end
	return false
end

function trader_check_miniquest_free_neg(trader, actor)
	if (has_alife_info("esc_trader_miniquest_free")) then
		return false
	end
	return true
end

function trader_check_miniquest_free_all_neg(trader, actor)
	if (has_alife_info("esc_trader_miniquest_free") or has_alife_info("esc_trader_miniquest_notfree")) then
		return false
	end
	return true
end


--------------------------------------------------------------------------------------------------------
-- Dialog & InfoPortions Function
--------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------
-- Trader
--------------------------------------------------------------------------------------------------------


function transfer_deneg(first_speaker, second_speaker)
    dialogs.relocate_money(second_speaker, 1400, "in")
    dialogs.relocate_item_section(second_speaker, "detector_simple", "in")
	dialogs.relocate_item_section(second_speaker, "arc_art_box_8basic", "in")
	dialogs.relocate_item_section(first_speaker, "arc_art_box_1basic", "out")
end
   

function give_weapon_from_trader(trader, actor)
	dialogs.relocate_item_section(trader, "arc_art_box_1basic", "in")
end

function otday_art (first_speaker, second_speaker)
	sol_utils.delete_item_count("af_night_star", 1)
end

function have_a_art()
    local actor = db.actor
    if actor ~= nil and actor:object("af_night_star") ~= nil and actor:dont_has_info("test_quest_art_vziat") then
	actor:give_info_portion("test_quest_art_vziat")
    end
end

function have_a_art2 (stalker, player)
    local actor = db.actor
    return (actor:object("af_night_star") ~= nil and actor:object("arc_art_box_1basic") ~= nil)
end


function trader_alredy_give_job(trader, actor)
	if (has_alife_info("agroprom_military_case") and not has_alife_info("agroprom_military_case_done")) or
	   (has_alife_info("escape_blockpost_case") and not has_alife_info("escape_blockpost_case_done")) or
	   (has_alife_info("tutorial_artefact_start") and not has_alife_info("tutorial_artefact_done")) or
	   (has_alife_info("tutorial_wounded_start") and not has_alife_info("esc_serious_talk"))
	then
		return true
	end
	return false 
end

function trader_give_extra_job(trader, actor)
	local actor = db.actor
	if has_alife_info("escape_blockpost_case") and not has_alife_info("escape_blockpost_case_done")
	then
		return true
	end
	return false
end

function bandits_die(actor,npc)
	local actor = db.actor
	if has_alife_info("esc_kill_bandits_quest_kill") and not has_alife_info("esc_kill_bandits_noquest_kill")
	then
		return true
	end
	return false
end

function trader_need_extra_job(trader, actor)
	if not has_alife_info("escape_blockpost_case") and 
	    has_alife_info("esc_return")
	then
		return true
	end
	return false
end

function is_tutorial()
	return not has_alife_info("tutorial_end")
end

function is_not_tutorial()
	return has_alife_info("tutorial_end")
end


function not_final_job(trader, actor)
	local actor = db.actor
	return not has_alife_info("escape_blockpost_case_done")
end

function trader_test(actor, npc)	
	return true
end



function trader_dont_give_job(first_speaker, second_speaker)
	return not trader_alredy_give_job(first_speaker, second_speaker)
end


function trader_dont_has_job(first_speaker, second_speaker)
    if trader_need_military_case(first_speaker, second_speaker) == false and
	   trader_need_blockpost_box(first_speaker, second_speaker) == false
	then
		return true
	end
	return false
end




--' Meet fox
function have_fox_info(first_speaker, second_speaker)
  	return first_speaker:object("fox_flash") ~= nil
end

--' fox help

function transfer_medikit_to_fox (player, wounded)
	sol_utils.setRelation(wounded, game_object.friend, player)
	db.actor:give_info_portion("escape_fox_heal")
end

function give_weapon_to_actor (trader, actor)
	if not has_alife_info("kvest_art_started") then
		dialogs.relocate_item_section(trader, "fake_wpn_knifa", "in")
		dialogs.relocate_item_section(first_speaker, "bandage", "in")
	else
		dialogs.relocate_item_section(trader, "fake_wpn_knifa", "in")
		dialogs.relocate_item_section(first_speaker, "bandage", "in")
		dialogs.relocate_item_section(first_speaker, "medkit", "in")
		dialogs.relocate_item_section(trader, "vodka", "in")
	end
end


--' Escape blockpost box
function have_blockpost_case(first_speaker, second_speaker)
  	return first_speaker:object("quest_case_01") ~= nil
end

function give_blockpost_case(first_speaker, second_speaker)
	sol_utils.delete_item_count("quest_case_01", 1)
end

function give_blockpost_case_reward(first_speaker, second_speaker)
	dialogs.relocate_money(first_speaker, 2000, "in")
end

--' Agroprom military case
function trader_need_military_case(first_speaker, second_speaker)
    if has_alife_info("esc_serious_talk") and
	   not has_alife_info("agroprom_military_case")
	then
		return true
	end
	return false
end

--' Escape trader artefact
function have_artefact_from_fleshes(first_speaker, second_speaker)
	local actor = db.actor
	if actor ~= nil and
	   (actor:object("af_vyvert") ~= nil or
	   actor:object("af_gravi") ~= nil or
	   actor:object("af_gold_fish") ~= nil)
	then
		return true
	end
  	return false
end


--' Ящик с блокпоста
function trader_need_blockpost_box(first_speaker, second_speaker)
    if has_alife_info("tutorial_end") and
	   has_alife_info("esc_trader_speak") and
	   not has_alife_info("escape_blockpost_case")
	then
		return true
	end
	return false
end

--' tutorial wounded in vagon
function wounded_need_help(first_speaker, second_speaker)
	local actor = db.actor
	return actor ~= nil and not has_alife_info( "tutorial_wounded_help" )
end

--' trader needs military documents
function trader_need_military_document(first_speaker, second_speaker)
    if has_alife_info("escape_blockpost_case_done") and
	   not has_alife_info("agroprom_military_case")
	then
		return true
	end
	return false
end

--' trader dialog about docs from labx18
function actor_has_documents (actor, npc)
	if actor:object("dar_document4") then
		return true
	else
		return false
	end
end

--' Escape dynamite for Wolf
function transfer_wolf_reward(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "af_medusa", "in")
end

function wolf_additional_reward(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "wpn_fort", "in")
	dialogs.relocate_item_section(first_speaker, "grenade_rgd5", "in")
	dialogs.relocate_item_section(first_speaker, "ammo_9x18_pmm", "in")
end


--' Escape Wounded's flash
function wounded_give_flash(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "esc_wounded_flash", "in")
end

function have_wounded_flash(first_speaker, second_speaker)
  	return first_speaker:object("esc_wounded_flash") ~= nil
end
function dont_have_wounded_flash(first_speaker, second_speaker)
  	return not have_wounded_flash(first_speaker, second_speaker)
end

function give_wounded_flash(first_speaker, second_speaker)
	sol_utils.delete_item_count("esc_wounded_flash", 1)
	dialogs.relocate_money(second_speaker, 1500, "in")
end

--' Escape bandits factory
function give_factory_reward_trader(first_speaker, second_speaker)
	dialogs.relocate_money(first_speaker, 500, "in")
end

--' Give X-18 documents read

function give_documents_reward (first_speaker, second_speaker)
	dialogs.relocate_money(first_speaker, 1000, "in")
end


--' Kill killers raid
function give_reward_killers(first_speaker, second_speaker)
	dialogs.relocate_money(first_speaker, 2500, "in")
end


function fox_pay_money(actor, npc)
	dialogs.relocate_money(npc, 1500, "in")	
	treasure_manager.get_treasure_manager():give_treasure("esc_secret_truck_goods", npc)
end

function run_tutorial_pda(first_speaker, second_speaker)
	first_speaker:stop_talk()
    second_speaker:stop_talk()
	game.start_tutorial("part_1_pda")
end

function wolf_precond_univ (actor, npc)
	return has_alife_info("esc_kill_bandits_quest_done") or (has_alife_info("tutorial_wounded_give_info") and not has_alife_info("esc_kill_bandits_quest_have"))
end


--------------------------------------------------------------------------------------------------------
-- Trader Factions - ABC1 Mod by Speed aka LW. Правка Архара
--------------------------------------------------------------------------------------------------------

function factions_repair_checkduty_r(trader, actor)
   if relation_registry.community_goodwill ("dolg", db.actor:id ()) < 0 then
		local chkgoodwill = relation_registry.community_goodwill("dolg",  db.actor:id())
		if chkgoodwill > -100 and db.actor:money() >= 250000 then return true end
		if chkgoodwill < -100 and chkgoodwill >= -1000 and db.actor:money() >= 250000 then return true end
		if chkgoodwill < -1000 and db.actor:money() >= 350000 then return true end
   end
return false
end

function factions_repair_checkduty_j(trader, actor)
local whatami = db.actor:character_community()
   if (relation_registry.community_goodwill ("dolg", db.actor:id()) >= 0) and (db.actor:money() >= 250000) and (whatami ~= "dolg") then return true
   else return false
   end
end

function factions_repair_checkfree_r(trader, actor)
   if relation_registry.community_goodwill ("freedom", db.actor:id()) < 0 then
		local chkgoodwill = relation_registry.community_goodwill("freedom",  db.actor:id())
		if chkgoodwill > -100 and db.actor:money() >= 250000 then return true end
		if chkgoodwill < -100 and chkgoodwill >= -1000 and  db.actor:money() >= 250000 then return true end
		if chkgoodwill < -1000 and db.actor:money() >= 350000 then return true end
   else return false
   end
return false
end

function factions_repair_checkfree_j(trader, actor)
local whatami = db.actor:character_community()
   if (relation_registry.community_goodwill ("freedom", db.actor:id()) >= 0) and (db.actor:money() >= 250000) and (whatami ~= "freedom") then return true
   else return false
   end
end

function factions_repair_checkstalker_r(trader, actor)
	local whatami = db.actor:character_community()
    local gulag = xr_gulag.get_gulag_by_name ("esc_lager")
	-- logf("testing stalker " .. whatami)
	if (gulag) then
		if (gulag:npc_is_enemy_to_anybody(db.actor)) and (db.actor:money() >= 250000) and (whatami ~= "monolith") and (whatami ~= "bandit") and (whatami ~= "military") and (whatami ~= "killer") then
	       return true
		end
	end
    return false
end

function factions_repair_checkstalker(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 250000
    local gulag = xr_gulag.get_gulag_by_name ("esc_lager")
	if (gulag) then
		if gulag:npc_is_enemy_to_anybody(db.actor) and db.actor:money() >= 250000 then
			item_name_and_price = game.translate_string("list_factions_repair_4").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
	end
end

function factions_repair_setstalker_r(trader, actor)
	local howmuch = 250000
    local gulag = xr_gulag.get_gulag_by_name ("esc_lager")
	if (gulag) then
		if gulag:npc_is_enemy_to_anybody(db.actor) and db.actor:money() >= 250000 then
			local chkgoodwill = relation_registry.community_goodwill("stalker",  db.actor:id())
			xr_gulag.setGulagRelation ("esc_lager", game_object.neutral, db.actor)	
			relation_registry.set_community_goodwill ("stalker", db.actor:id(), 120)	
			sol_utils.minimapSpotReset()
			dialogs.relocate_money(actor, howmuch, "out")
		end
	end
end

function factions_repair_checkduty(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 0
	if db.actor ~= nil then 
	  if relation_registry.community_goodwill ("dolg", db.actor:id()) < 0 then
		local chkgoodwill = relation_registry.community_goodwill("dolg",  db.actor:id())
		if chkgoodwill > -100 and db.actor:money() >= 250000 then howmuch = 250000 	end
		if chkgoodwill < -100 and chkgoodwill >= -1000 and db.actor:money() >= 250000 then howmuch = 250000 end
		if chkgoodwill < -1000 and db.actor:money() >= 350000 then howmuch = 350000 end
		item_name_and_price = game.translate_string("list_factions_repair_0").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
		db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
	  elseif (relation_registry.community_goodwill ("dolg", db.actor:id()) >= 0) and (db.actor:money() >= 250000) then
		howmuch = 250000
		item_name_and_price = game.translate_string("list_factions_repair_1").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
		db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
	  end
    end
end

function factions_repair_checkfree(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 0
  if db.actor ~= nil then 
   if relation_registry.community_goodwill ("freedom", db.actor:id()) < 0 then
		local chkgoodwill = relation_registry.community_goodwill("freedom",  db.actor:id ())
		if chkgoodwill > -100 and db.actor:money() >= 250000 then howmuch = 250000 end
		if chkgoodwill < -100 and chkgoodwill >= -1000 and db.actor:money() >= 350000 then howmuch = 350000 end
		if chkgoodwill < -1000 and  db.actor:money() >= 350000 then howmuch = 350000 end
		item_name_and_price = game.translate_string("list_factions_repair_2").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
		db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
	elseif (relation_registry.community_goodwill ("freedom", db.actor:id()) >= 0) and (db.actor:money() >= 350000) then
		howmuch = 350000
		item_name_and_price = game.translate_string("list_factions_repair_3").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
		db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
	end
  end
end

function factions_repair_setduty_r(trader, actor)
	local howmuch = 0
	if db.actor ~= nil then 
		local chkgoodwill = relation_registry.community_goodwill("dolg",  db.actor:id())
		if chkgoodwill > -100 and db.actor:money() >= 250000 then howmuch = 250000 end
		if chkgoodwill < -100 and chkgoodwill >= -1000 and db.actor:money() >= 250000 then howmuch = 250000 end
		if chkgoodwill < -1000 and  db.actor:money() >= 350000 then howmuch = 350000 end
		dialogs.relocate_money(actor, howmuch, "out")
		relation_registry.set_community_goodwill ("dolg", db.actor:id(), 500)
		sol_utils.minimapSpotReset()
	end
end

function factions_repair_setduty_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 350000, "out")
		-- особый случай и на sol_utils.setCharacterCommunity() переводить нельзя
		db.actor:set_character_community("dolg", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("dolg",  db.actor:id())
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("dolg", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("dolg", db.actor:id (), 200)
		end
		sol_utils.minimapSpotReset()
	end
end

function factions_repair_setfree_r(trader, actor)
	local howmuch = 0
	if db.actor ~= nil then 
		local chkgoodwill = relation_registry.community_goodwill("freedom",  db.actor:id())
		if chkgoodwill > -100 and db.actor:money() >= 250000 then howmuch = 250000 end
		if chkgoodwill < -100 and chkgoodwill >= -1000 and db.actor:money() >= 250000 then howmuch = 250000 end
		if chkgoodwill < -1000 and  db.actor:money() >= 350000 then howmuch = 350000 end
		dialogs.relocate_money(actor, howmuch, "out")
		relation_registry.set_community_goodwill ("freedom", db.actor:id(), 1000)
		sol_utils.minimapSpotReset()
	end
end

function factions_repair_setfree_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 350000, "out")
		-- особый случай и на sol_utils.setCharacterCommunity() переводить нельзя
		db.actor:set_character_community("freedom", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("freedom",  db.actor:id())
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 250
			relation_registry.set_community_goodwill ("freedom", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("freedom", db.actor:id(), 250)
		end
		sol_utils.minimapSpotReset()
	end
end

function factions_repair_checkmon_j(trader, actor)
   local whatami = db.actor:character_community()
   local playhitemb = db.actor:object("h_2")
   if (playhitemb ~= nil or db.joinfactions == "yes") and (db.actor:money() >= 250000) and (whatami ~= "monolith") and (whatami == "actor") then return true
   else return false
   end
end

function factions_repair_checkmonolith(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 250000
		if  db.actor:money() >= 250000 then
			item_name_and_price = game.translate_string("list_factions_repair_5").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
end

function factions_repair_setmon_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 250000, "out")
		-- особый случай и на sol_utils.setCharacterCommunity() переводить нельзя
		db.actor:set_character_community("monolith", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("monolith",  db.actor:id())
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("monolith", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("monolith", db.actor:id(), 200)
		end
		sol_utils.minimapSpotReset()
	end
end

function factions_repair_bandit_j(trader, actor)
   local whatami = db.actor:character_community()
   local playhitemb = db.actor:object("h_2")
   if (playhitemb ~= nil or db.joinfactions == "yes") and (db.actor:money() >= 250000) and (whatami ~= "bandit") and (whatami == "actor") then return true
   else return false
   end
end

function factions_repair_checkbandit(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 250000
		if  db.actor:money() >= 250000 then
			item_name_and_price = game.translate_string("list_factions_repair_7").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
end

function factions_repair_setbandit_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 250000, "out")
		-- особый случай и на sol_utils.setCharacterCommunity() переводить нельзя
		db.actor:set_character_community("bandit", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("bandit",  db.actor:id())
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("bandit", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("bandit", db.actor:id(), 200)
		end
		sol_utils.minimapSpotReset()
	end
end


function factions_repair_mil_j(trader, actor)
   local whatami = db.actor:character_community()
   local playhitemb = db.actor:object("h_2")
   if (playhitemb ~= nil or db.joinfactions == "yes") and (db.actor:money() >= 400000) and (whatami ~= "military") and (whatami == "actor") then return true
   else return false
   end
end

function factions_repair_checkmil(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 400000
		if  db.actor:money() >= 400000 then
			item_name_and_price = game.translate_string("list_factions_repair_6").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
end

function factions_repair_setmil_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 400000, "out")
		-- особый случай и на sol_utils.setCharacterCommunity() переводить нельзя
		db.actor:set_character_community("military", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("military",  db.actor:id())
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("military", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("military", db.actor:id(), 200)
		end
		sol_utils.minimapSpotReset()
	end
end


function factions_repair_kill_j(trader, actor)
   local whatami = db.actor:character_community()
   local playhitemb = db.actor:object("h_2")
   if (playhitemb ~= nil or db.joinfactions == "yes") and (db.actor:money() >= 300000) and (whatami ~= "killer") and (whatami == "actor") then return true
   else return false
   end
end

function factions_repair_checkkill(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 300000
		if  db.actor:money() >= 300000 then
			item_name_and_price = game.translate_string("list_factions_repair_8").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
end

function factions_repair_setkill_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 300000, "out")
		-- особый случай и на sol_utils.setCharacterCommunity() переводить нельзя
		db.actor:set_character_community("killer", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("military",  db.actor:id())
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("killer", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("killer", db.actor:id(), 200)
		end
		sol_utils.minimapSpotReset()
	end
end


function factions_repair_eco_j(trader, actor)
   local whatami = db.actor:character_community()
   if (db.actor:money() >= 300000) and (whatami ~= "ecolog") and (whatami == "actor") then return true
   else return false
   end
end

function factions_repair_checkeco(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 500000
		if  db.actor:money() >= 300000 then
			item_name_and_price = game.translate_string("list_factions_repair_10").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
end

function factions_repair_seteco_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 300000, "out")
		-- особый случай и на sol_utils.setCharacterCommunity() переводить нельзя
		db.actor:set_character_community("ecolog", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("ecolog",  db.actor:id())
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("ecolog", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("ecolog", db.actor:id(), 200)
		end
		sol_utils.minimapSpotReset()
	end
end


function factions_repair_quit_j(trader, actor)
   local whatami = db.actor:character_community()
   if (whatami == "monolith") or (whatami == "bandit") or (whatami == "military") or (whatami == "killer") or (whatami == "ecolog") then
	   if (db.actor:money() >= 250000) then return true end
   end
   return false
end

function factions_repair_checkquit(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 250000
		if  db.actor:money() >= 250000 then
			item_name_and_price = game.translate_string("list_factions_repair_9").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
end

function factions_repair_setquit_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 250000, "out")
		sol_utils.setCharacterCommunity(db.actor:id(), "actor")
	end
end


function give_medkit(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "medkit", "in")
end



--' Escape tutorial artefact
function is_not_tutorial_art(actor, trader)
	local tutorial_artefact = db.actor:object("af_blood")
	if (has_alife_info("tutorial_artefact_start") and not has_alife_info("tutorial_artefact_done")
		and  tutorial_artefact ~= nil) or has_alife_info("tutorial_artefact_done")
	then
		return true
	end
	return false
end

function tutorial_artefact_end(first_speaker, second_speaker)
	local actor = db.actor
	local tutorial_artefact = first_speaker:object("af_blood")
	if has_alife_info("tutorial_artefact_start") and 
	   not has_alife_info("tutorial_artefact_done") and
	   tutorial_artefact ~= nil
	then
		return true
	end
	return false
end

function tutorial_artefact_have_not(first_speaker, second_speaker)
	local actor = db.actor
	local tutorial_artefact = first_speaker:object("af_blood")
	if has_alife_info("tutorial_artefact_start") and 
	   not has_alife_info("tutorial_artefact_done") and
	   tutorial_artefact == nil
	then
		return true
	end
	return false
end
function have_tutorial_artefact(first_speaker, second_speaker)
  	return first_speaker:object("af_blood") ~= nil
end


function give_tutorial_artefact(first_speaker, second_speaker)
	sol_utils.delete_item_count("af_blood", 1)
end


function finalize_quests(first_speaker, second_speaker)
	if tutorial_artefact_end(first_speaker, second_speaker) == true or
	   tutorial_wounded_end(first_speaker, second_speaker) == true
	then
		return true
	end
	return false
end

function not_finalize_quests(first_speaker, second_speaker)
	return not this.finalize_quests(first_speaker, second_speaker)	
end



function tutorial_wounded_end(first_speaker, second_speaker)
	local actor = db.actor
	-- local wounded_flash = first_speaker:object("esc_wounded_flash")
	if has_alife_info("tutorial_wounded_start")	and 
		has_alife_info("tutorial_wounded_give_info")	and 	
	   not has_alife_info("esc_serious_talk")
 -- and   wounded_flash ~= nil
	then
		return true
	end
	return false
end

---' Вспомогательные функции '---

--' Спавн патронов:
function create_ammo(sect,pos,lv,gv,id,num)
	local sim = alife()
	local box_size = getIniValueU32Simple(sect,"box_size")
	while num > box_size do
		sim:create_ammo(sect,pos,lv,gv,id,box_size)
		num = num - box_size
	end
	if num > 0 then
		sim:create_ammo(sect,pos,lv,gv,id,num)
	end
end

--' Удаление из рюкзака ГГ предмета с заданным количеством:
-- поддержка диалогов на сдачу хабара
function item_GG_out(thing,num,news)
	local actor = db.actor
	local sim = alife()
	local id,item,sect,sobj
	local count = actor:object_count()
	local ind1,ind2 = 0,num
	for i = 0, count - 1 do
		if ind2 == 0 then
			break
		end
		item = actor:object(i)
		sect = item and item:section()
		if sect and sect == thing then
			id = item:id() or item.id
			sobj = id and sim:object(id)
			if sobj then
				ind2 = ind2 - 1
				ind1 = ind1 + 1
				sim:release(sobj)
			end
		end
	end
	if ind1 ~= num then
		return false
	end
	if news then
		ex_all.news_item_out(actor,thing,ind1)
	end
	return true
end

--' Удаление из рюкзака ГГ предметов из индексированной таблицы:
-- поддержка диалогов на сдачу хабара
function tabl_GG_out(tbl,news)
	if tbl then
		local actor = db.actor
		local sim = alife()
		local id,item,sobj
		for i = 1, #tbl do
			item = actor:object(tbl[i])
			id = item and (item:id() or item.id)
			sobj = id and sim:object(id)
			if sobj then
				sim:release(sobj,true)
			else
				return false
			end
		end
		if news then
			for i = 1, #tbl do
				ex_all.news_item_out(actor,tbl[i],1)
			end
		end
		return true
	end
	return false
end
