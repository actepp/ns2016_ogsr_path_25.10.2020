--' by Stohe (ƒиденко –услан)
---' revision and adaptation for NS_2013 lsclon 04.02.13 '---
--' Wounded. —хема раненного.


-- KRodin: в оллспавне многим раненым квестовым непис€м здоровье прописано 0.1
-- и видимо, в некоторых случа€х (не всегда) из за отличающейс€ точности вычислений на x64 оно округл€етс€ как-то в большую сторону
-- и тот кто должен быть ранен получаетс€ не ранен.
-- «десь выставл€ем таким Ќѕ—ам псевдораненность принудительно.
-- Ќо конечно в идеале надо изначально прописывать раненым в оллспавне здоровье 0.089 (у многих так и сделано, но не у всех.)
local pseudo_wounded = {
	[ "avu_killer" ]             = true,
	[ "esc_fox" ]                = true,
	[ "esc_foto_muzhik_zapas" ]  = true,
	[ "esc_foto_muzhik" ]        = true,
	[ "milit_zapas_fotomuzhik" ] = true,
	[ "military_fotomuzhik" ]    = true,
	[ "foto_monolitovets" ]      = true,
	[ "nevid_monolit" ]          = true,
}

local function is_pseudo_wounded( npc )
	if npc.health > 0.3 then return false end --Ќа случай если вылечили

	return pseudo_wounded[ npc:name() ]
end

function wounded_fight(npc_id)
	if db.storage[npc_id].wounded ~= nil then
		return db.storage[npc_id].wounded.wound_manager.fight ~= "false"
	end
	return false
end
---''' Evaluators
class "evaluator_wound" (property_evaluator)
function evaluator_wound:__init(name,storage) super(nil,name)
	self.a = storage
end

function evaluator_wound:evaluate()
	local npc = self.object
	if not self.a.wounded_set then
		return false
	end
	if not self.a.regen and not is_pseudo_wounded( npc ) then
		self.a.regen = npc:character_community() == "zombied" or npc:character_community() == "monolith"
	end
	local sobj = alife():object(npc:id())
	if sobj and sobj.wounded then
		if npc.health > 0.95 and self.a.regen and tostring(xr_logic.pstor_retrieve(npc,"wounded_state")) ~= "nil" then
			sobj.wounded = false
			self.a.wound_manager:hit_callback()
		elseif tostring(xr_logic.pstor_retrieve(npc,"wounded_state")) == "nil" then
			self.a.wound_manager:hit_callback()
		end
	end
	if npc:critically_wounded() then
		return false
	end
	if self.mgr == nil then
		self.mgr = npc:motivation_action_manager()
	end
	if self.mgr:evaluator(stalker_ids.property_enemy):evaluate() and xr_logic.pstor_retrieve(npc,"wounded_fight") == "true" then
		return false
	end
	return tostring(xr_logic.pstor_retrieve(npc,"wounded_state")) ~= "nil"
end

class "evaluator_can_fight" (property_evaluator)
function evaluator_can_fight:__init(name,storage) super(nil,name)
	self.a = storage
end

function evaluator_can_fight:evaluate()
	if self.object:critically_wounded() then
		return true
	end
	return xr_logic.pstor_retrieve(self.object,"wounded_fight") ~= "false"
end


---''' Actions
class "action_wounded" (action_base)
function action_wounded:__init(name,storage) super(nil,name)
	self.a = storage
end

function action_wounded:initialize()
	action_base.initialize(self)
	self.object:set_desired_position()
	self.object:set_desired_direction()
	self.sound = "nil"
	-- запрет торговли - Xiani
	self.object:disable_trade()
	if self.a.help_start_dialog then
		self.object:set_start_dialog(self.a.help_start_dialog)
	end
	if not self.a.regen then
		self.object:wounded(true)
	end
	news_main.on_wound(self.object)
end

function action_wounded:execute()
	action_base.execute(self)
	wound_manager = self.a.wound_manager
	local synsound,emerg,victim
	if self.object:character_community() ~= "zombied" then
		self.object:enable_talk()
	else
		self.object:disable_talk()
	end
	wound_manager_state = xr_logic.pstor_retrieve(self.object, "wounded_state")
	wound_manager_sound = xr_logic.pstor_retrieve(self.object, "wounded_sound")
	if wound_manager_state == "true" then
		local h = hit()
		h.power = 0
		h.direction = self.object:direction()
		h.bone = "bip01_spine"
		h.draftsman = db.actor
		h.impulse = 0
		h.type = hit.wound
		self.object:hit(h)
	else
		-- €вл€етс€ ли текущий звук синхронным дл€ текущего стейта
		for k,v in pairs(self.a.syndata) do
			if v.state == wound_manager_state and v.sound == wound_manager_sound then
				synsound = wound_manager_sound
			end
		end
		-- жрание аптечек и прочей срани.
		-- использовать можно только если нам можно сейчас есть аптечку.
		if self.a.use_medkit == true then
			wound_manager:eat_medkit()
		end
		if wound_manager_state == "psy_shoot" then
			emerg = {animation_nout = true}
		end
		wound_manager_victim = xr_logic.pstor_retrieve(self.object,"wounded_victim")
		if tostring(wound_manager_victim) ~= "nil" then
			if wound_manager_victim == "actor" then
				victim = db.actor
			else
				local sobj = alife():story_object(tonumber(wound_manager_victim))
				if sobj then
					victim = sobj
				end
			end
		end
		state_mgr.set_state(self.object,wound_manager_state,nil,nil,{look_object = victim},emerg,synsound)
	end
	if not synsound then
		-- нужно отыграть фоновый
		if self.sound ~= wound_manager_sound then
			self.sound = wound_manager_sound
			if self.sound == "nil" then
				xr_sound.set_sound(self.object, nil)
			else
				xr_sound.set_sound(self.object, wound_manager_sound)
			end
		end
	else
		-- нужно зарубить фоновый
		if self.sound then
			self.sound = "nil"
			xr_sound.set_sound(self.object, nil)
		end
	end
	local stor = db.storage[self.object:id()]
	if stor.active_scheme and not self.object:is_talking() then
		if db.actor and xr_logic.try_switch_to_another_section(self.object,stor[stor.active_scheme],db.actor) then
			return
		end
	end
end

function action_wounded:finalize()
	action_base.finalize(self)
	-- откроем торговлю - Xiani
	self.object:enable_trade()
	self.object:disable_talk()
	xr_sound.set_sound(self.object,nil)
	self.object:wounded(false)
end


---''' Class wound_manager
class "Cwound_manager"
function Cwound_manager:__init(npc, storage)
	self.npc = npc
	self.a = storage
	self.can_use_medkit = false
	self.medkit_eaten = nil
end

function Cwound_manager:update()
	local hp = 100*self.npc.health
	local psy = 100*self.npc.psy_health
	local sobj = alife():object(self.npc:id())
	if sobj then
		if sobj.wounded and (not self.a.regen) and (not self.medkit_eaten) then
			-- симулируем раненость
			hp = 1
		end
		self.state, self.sound = self:process_psy_wound(psy)
		if self.state == "nil" and self.sound == "nil" then
			-- провер€ем на обычную раненость
			self.fight = self:process_fight(hp)
			self.victim = self:process_victim(hp)
			self.state, self.sound = self:process_hp_wound(hp)
		else
			-- устанавливаем пси раненость
			self.fight = "false"
			self.cover = "false"
			self.victim = "nil"
		end
		xr_logic.pstor_store(self.npc, "wounded_state", self.state)
		xr_logic.pstor_store(self.npc, "wounded_sound", self.sound)
		xr_logic.pstor_store(self.npc, "wounded_fight", self.fight)
		xr_logic.pstor_store(self.npc, "wounded_victim", self.victim)
		if not self.state or self.state == "nil" then
			self.medkit_eaten = nil
			sobj.wounded = false
		else
			sobj.wounded = true
		end
	end
end

function Cwound_manager:unlock_medkit()
	self.can_use_medkit = true
end

function Cwound_manager:eat_medkit()
	if self.can_use_medkit then
		local medkit_eaten = false
		local medkit = self.npc:object("medkit") or self.npc:object("medkit_army") or self.npc:object("medkit_scientic")
		if medkit then
			self.npc:eat(medkit)
			medkit_eaten = true
		end
		if medkit_eaten then
			local sobj = alife():object(self.npc:id())
			-- позвол€ем выйти из состо€ни€ раненности
			if sobj then
				sobj.wounded = false
				self.medkit_eaten = true
				self.can_use_medkit = false
			end
		end
	end
	self:hit_callback()
end

function Cwound_manager:process_fight(hp)
	local fight = self.a.hp_fight
	local key = self:get_key_from_distance(fight,hp)
	if key and fight[key].state then
		return tostring(xr_logic.pick_section_from_condlist(db.actor,self.npc,fight[key].state))
	end
	return "true"
end

function Cwound_manager:process_victim(hp)
	local victim = self.a.hp_victim
	local key = self:get_key_from_distance(victim,hp)
	if key and victim[key].state then
		return tostring(xr_logic.pick_section_from_condlist(db.actor,self.npc,victim[key].state))
	end
	return "nil"
end

function Cwound_manager:process_hp_wound(hp)
	local stat = self.a.hp_state
	local key = self:get_key_from_distance(stat,hp)
	if key then
		local actor = db.actor
		local r1,r2
		if self.npc:see(actor) then
			local stat_see = self.a.hp_state_see
			if stat_see[key].state then
				r1 = xr_logic.pick_section_from_condlist(actor,self.npc,stat_see[key].state)
			end
			if stat_see[key].sound then
				r2 = xr_logic.pick_section_from_condlist(actor,self.npc,stat_see[key].sound)
			end
		else
			if stat[key].state then
				r1 = xr_logic.pick_section_from_condlist(actor,self.npc,stat[key].state)
			end
			if stat[key].sound then
				r2 = xr_logic.pick_section_from_condlist(actor,self.npc,stat[key].sound)
			end
		end
		return tostring(r1),tostring(r2)
	end
	return "nil","nil"
end

function Cwound_manager:process_psy_wound(hp)
	local psy = self.a.psy_state
	local key = self:get_key_from_distance(psy,hp)
	if key and psy[key].state and psy[key].sound then
		local actor = db.actor
		return tostring(xr_logic.pick_section_from_condlist(actor,self.npc,psy[key].state)),tostring(xr_logic.pick_section_from_condlist(actor,self.npc,psy[key].sound))
	end
	return "nil","nil"
end

function Cwound_manager:get_key_from_distance(t,hp)
	local key
	for k,v in pairs(t) do
		if v.dist >= hp then
			key = k
		else
			return key
		end
	end
	return key
end

function Cwound_manager:hit_callback()
	if self.npc:critically_wounded() or not self.npc:alive() then
		return
	end
	self:update()
end


---''' Binder
function add_to_binder (object,ini,scheme,section,st)
	local operators = {}
	local properties = {}

	properties["wounded"] = xr_evaluators_id.sidor_wounded_base
	properties["can_fight"] = xr_evaluators_id.sidor_wounded_base + 1
	operators["wounded"] = xr_actions_id.sidor_act_wounded_base + 0

	local manager = object:motivation_action_manager()
	manager:add_evaluator (properties["wounded"], this.evaluator_wound("wounded", st))
	manager:add_evaluator (properties["can_fight"], this.evaluator_can_fight("can_fight", st))

	local action = this.action_wounded("wounded_action", st)
	action:add_precondition (world_property(stalker_ids.property_alive, true))
	action:add_precondition (world_property(properties["wounded"], true))
	action:add_effect (world_property(properties["wounded"], false))
	action:add_effect (world_property(stalker_ids.property_enemy, false))
	action:add_effect (world_property(properties["can_fight"], true))
	manager:add_action (operators["wounded"], action)

	action = manager:action (xr_actions_id.alife)
	action:add_precondition (world_property(properties["wounded"], false))
	action = manager:action (stalker_ids.action_gather_items)
	action:add_precondition (world_property(properties["wounded"], false))
	action = manager:action (stalker_ids.action_combat_planner)
	action:add_precondition (world_property(properties["can_fight"], true))
	action = manager:action (stalker_ids.action_danger_planner)
	action:add_precondition (world_property(properties["can_fight"], true))
	action = manager:action (stalker_ids.action_anomaly_planner)
	action:add_precondition (world_property(properties["can_fight"], true))
end

-- ¬ызываетс€ только в начале на чтении логики, создает экшены, эвалуаторы и производит первичную настройку.
function set_wounded(npc,ini,scheme,section)
	local st = xr_logic.assign_storage_and_bind(npc,ini,scheme,section)
	st.wound_manager = Cwound_manager(npc,st)
end

-- ¬ызываетс€ на переключении на новую секцию. ѕроизводит вычитывание настроек из текущей секции.
function reset_wounded(npc,scheme,st,section)
	local wounded_section
	if scheme == nil or scheme == "nil" then
		wounded_section = utils.cfg_get_string(st.ini,st.section_logic,"wounded",npc,false,"")
	else
		wounded_section = utils.cfg_get_string(st.ini,section,"wounded",npc,false,"")
	end
	init_wounded(npc,st.ini,wounded_section,st.wounded,scheme)
	st.wounded.wound_manager:hit_callback()
end

-- ‘ункци€ чтени€ настроек. ¬ нее передаетс€ секци€, откуда их нужно читать.
local wounded_by_state = {
	[0] = "wounded_heavy",
	[1] = "wounded_heavy_2",
	[2] = "wounded_heavy_3"
}

function init_wounded(npc,ini,section,st,scheme)
	if tostring(section) == st.wounded_section and tostring(section) ~= "nil" then
		return
	end
	st.wounded_section = utils.to_str(section)
	local def = {}
	local npc_community = npc:character_community()
	local state = wounded_by_state[math.mod(npc:id(),3)]

	if npc_community == "monolith" or is_pseudo_wounded( npc ) then
		def.hp_state     = "20|"..state.."@help_heavy"
		def.hp_state_see = "20|"..state.."@help_heavy"
		def.psy_state    = ""
		def.hp_victim    = "20|nil"
		def.hp_cover     = "20|false"
		def.hp_fight     = "20|false"
		def.syndata      = ""
		def.help_dialog  = "dm_help_wounded_medkit_dialog"
		def.help_start_dialog = nil
		def.use_medkit   = true
	elseif npc_community == "zombied" then
		def.hp_state     = "50|wounded_zombie@nil"
		def.hp_state_see = "50|wounded_zombie@nil"
		def.psy_state    = ""
		def.hp_victim    = "50|nil"
		def.hp_cover     = "50|false"
		def.hp_fight     = "50|false"
		def.syndata      = ""
		def.help_dialog  = nil
		def.help_start_dialog = nil
		def.use_medkit   = false
	else
		def.hp_state     = "10|"..state.."@help_heavy"
		def.hp_state_see = "10|"..state.."@help_heavy"
		def.psy_state    = "50|{=best_pistol}psy_armed,psy_pain@wounded_psy|20|{=best_pistol}psy_shoot,psy_pain@{=best_pistol}wounded_psy_shoot,wounded_psy"
		def.hp_victim    = "10|nil"
		def.hp_cover     = "10|false"
		def.hp_fight     = "10|false"
		def.syndata      = ""
		def.help_dialog  = "dm_help_wounded_medkit_dialog"
		def.help_start_dialog = nil
		def.use_medkit   = true
	end
	if tostring(section) == "nil" then
		-- «агружаем дефолты!
		st.hp_state     = xr_meet.parse_data(npc,def.hp_state)
		st.hp_state_see = xr_meet.parse_data(npc,def.hp_state_see)
		st.psy_state    = xr_meet.parse_data(npc,def.psy_state)
		st.hp_victim    = xr_meet.parse_data(npc,def.hp_victim)
		st.hp_cover     = xr_meet.parse_data(npc,def.hp_cover)
		st.hp_fight     = xr_meet.parse_data(npc,def.hp_fight)
		st.syndata      = xr_meet.parse_syn_data(npc,def.syndata)
		st.help_dialog  = def.help_dialog
		st.help_start_dialog = nil
		st.use_medkit   = def.use_medkit
	else
		st.hp_state     = xr_meet.parse_data(npc,utils.cfg_get_string(ini,section,"hp_state",npc,false,"",def.hp_state))
		st.hp_state_see = xr_meet.parse_data(npc,utils.cfg_get_string(ini,section,"hp_state_see",npc,false,"",def.hp_state_see))
		st.psy_state    = xr_meet.parse_data(npc,utils.cfg_get_string(ini,section,"psy_state",npc,false,"",def.psy_state))
		st.hp_victim    = xr_meet.parse_data(npc,utils.cfg_get_string(ini,section,"hp_victim",npc,false,"",def.hp_victim))
		st.hp_cover     = xr_meet.parse_data(npc,utils.cfg_get_string(ini,section,"hp_cover",npc,false,"",def.hp_cover))
		st.hp_fight     = xr_meet.parse_data(npc,utils.cfg_get_string(ini,section,"hp_fight",npc,false,"",def.hp_fight))
		st.syndata      = xr_meet.parse_syn_data(npc,utils.cfg_get_string(ini,section,"syndata",npc,false,"",def.syndata)) 
		st.help_dialog  = utils.cfg_get_string(ini,section,"help_dialog",npc,false,"",def.help_dialog)
		st.help_start_dialog = utils.cfg_get_string(ini,section,"help_start_dialog",npc,false,"",nil)
		st.use_medkit   = utils.cfg_get_bool(ini,section,"use_medkit",npc,false,def.use_medkit)
	end
	-- флажок, что функци€ хот€ бы раз вызывалась
	st.wounded_set = true
end

function unlock_medkit(npc)
	if npc and db.storage[npc:id()].wounded then
		db.storage[npc:id()].wounded.wound_manager:unlock_medkit()
	end
end

function is_wounded(npc)
	if npc and db.storage[npc:id()] and db.storage[npc:id()].wounded then
		return tostring(db.storage[npc:id()].wounded.wound_manager.state) ~= "nil"
	end
	return false
end

function hit_callback(npc_id)
	if npc_id and db.storage[npc_id] and db.storage[npc_id].wounded then
		db.storage[npc_id].wounded.wound_manager:hit_callback()
	end
	return false
end

function is_heavy_wounded_by_id(npc_id)
	if npc_id and db.storage[npc_id] and db.storage[npc_id].wounded then
		return tostring(db.storage[npc_id].wounded.wound_manager.state) ~= "nil"
	end
	return false
end

local psy_wounded_state = {
	["psy_pain"] = true,
	["psy_armed"] = true,
	["psy_shoot"] = true,
	["psycho_pain"] = true,
	["psycho_shoot"] = true
}

function is_psy_wounded_by_id(npc_id)
	local wound = npc_id and db.storage[npc_id] and db.storage[npc_id].wounded
	if wound and wound.state and psy_wounded_state[wound.state] then
		return true
	end
	return false
end
