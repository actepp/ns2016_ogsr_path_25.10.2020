function allow_break_dialog(first_speaker, second_speaker, id)
	if second_speaker:profile_name() == "osoznanie" then return false end
	return true
end

function break_dialog(first_speaker, second_speaker, id)
	first_speaker:stop_talk()
	second_speaker:stop_talk()
end

function disable_talk_self(first_speaker, second_speaker)
	first_speaker:disable_talk()
end

function disable_talk_victim(first_speaker, second_speaker)
	second_speaker:disable_talk()
end

function punch(first_speaker, second_speaker)
	--abort("KICK ASS !!!!")
	--xr_punch.punch[first_speaker:id()] = second_speaker
	db.storage[second_speaker:id()].punch.enabled = true
end

function get_money_then_leave(first_speaker, second_speaker)
	db.storage[first_speaker:id()].meet.enabled = false
	db.storage[first_speaker:id()].robber.enabled = true
end

function is_wounded(first_speaker, second_speaker)
	if db.storage[first_speaker:id()].wounded ~= nil
	  and db.storage[first_speaker:id()].wounded.wound_manager.can_use_medkit == true then
		return false
	end
	return xr_wounded.is_wounded(first_speaker)
end

function is_opp_wounded(first_speaker, second_speaker, dialog_id)
	if db.storage[second_speaker:id()].wounded ~= nil
	  and db.storage[second_speaker:id()].wounded.wound_manager.can_use_medkit == true then
		return false
	end
	return xr_wounded.is_wounded(second_speaker)
end

function is_not_wounded(first_speaker, second_speaker)
	return not this.is_wounded(first_speaker, second_speaker)
end

function actor_have_medkit(first_speaker, second_speaker)
	return first_speaker:object("medkit") ~= nil
		or first_speaker:object("medkit_army") ~= nil
		or first_speaker:object("medkit_scientic") ~= nil
end

function actor_have_bandage(first_speaker, second_speaker)
	return first_speaker:object("bandage") ~= nil
end

function transfer_medkit(actor,wounded)	
	local medkit = actor:object("medkit") or actor:object("medkit_army") or actor:object("medkit_scientic")
	if medkit then
		actor:transfer_item(medkit,wounded)
		-- анлочим аптечку для использования.
		xr_wounded.unlock_medkit(wounded)
		-- выбор действия
		ex_wound_help.choice_action(actor,wounded)
	end
end

function transfer_bandage(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "bandage", "out")
	sol_utils.setRelation(second_speaker, game_object.friend, first_speaker)
end
function kill_yourself(npc, actor)
	npc:kill(actor)
end

--' Obsolete, do not use!!!
function relocate_item(victim, obj, type)
	if db.actor and victim then
		if type == "in" then
			victim:transfer_item(obj, db.actor)
		elseif type == "out" then
			db.actor:transfer_item(obj, victim)
		end
		--'news_manager.relocate_item(db.actor, type, obj)
	end
end

--' Use this function instead.
function relocate_item_section(victim, section, type)
	if db.actor and victim then
		if type == "in" then

			--' Трансферить нужно только квестовые предметы.
			if quest_section[section] == true and
			   victim:object(section) ~= nil 
			then
				victim:transfer_item(victim:object(section), db.actor)
			else
				alife():create(section,	
					    db.actor:position(),
						db.actor:level_vertex_id(),	
						db.actor:game_vertex_id(),
						db.actor:id())
			end
		elseif type == "out" then
			db.actor:transfer_item(db.actor:object(section), victim)
		end
		news_manager.relocate_item(db.actor, type, section)
	end
end


function relocate_money(victim, num, type)
	if db.actor and victim then
		if type == "in" then
			db.actor:give_money(num)
			game_stats.money_quest_update (num) 
		elseif type == "out" then
			db.actor:transfer_money(num, victim)
			game_stats.money_quest_update (-num) 
		end
		news_manager.relocate_money(db.actor, type, num)
	end
end

--'---------------------------------------------------------------------------------
--' DIALOG ALLOWED
--'---------------------------------------------------------------------------------
function dialog_allowed(object, victim, id)
	if db.storage[victim:id()].actor_dialogs ~= nil then
		for k,v in pairs(db.storage[victim:id()].actor_dialogs) do
			if v == id then return true end
		end
	end
	return false
end
function dialog_not_disable(object, victim, id)
	if db.storage[victim:id()].actor_disable ~= nil then
		for k,v in pairs(db.storage[victim:id()].actor_disable) do
			if v == id then return false end
		end
	end
	return true
end

function allow_wounded_dialog(object, victim, id)
	if db.storage[victim:id()].wounded == nil then
		return false
	end	
	if db.storage[victim:id()].wounded.help_dialog == id then
		return true
	end
	return false	
end


-- Levels functions
function level_escape(first_speaker, second_speaker)
	return level.name() == "l01_escape"
end

function level_garbage(first_speaker, second_speaker)
	return level.name() == "l02_garbage"
end

function level_agroprom(first_speaker, second_speaker)
	return level.name() == "l03_agroprom_ai2" or level.name() == "l03_agroprom"
end

-- Relation functions
function is_friend( actor, npc )
	return actor:relation( npc ) == game_object.friend
end

function is_neutral( actor, npc )
	return actor:relation( npc ) == game_object.neutral
end

function is_enemy( actor, npc )
	return actor:relation( npc ) == game_object.enemy
end

function is_not_friend( actor, npc )
	return not is_friend( actor, npc )
end

function become_friend( actor, npc )
	sol_utils.setRelation( actor, game_object.friend, npc )
end

-- Money functions
function has_2000_money( actor, npc )
	return actor:money() >= 2000
end

function has_15000_money( actor, npc )
	return actor:money() >= 15000
end

function out_15000_money( actor, npc )
	relocate_money( npc, 15000, "out" )
end

function has_30000_money( actor, npc )
	return actor:money() >= 30000
end

function out_30000_money( actor, npc )
	relocate_money( npc, 30000, "out" )
end

-- Trade functions
function trade_init(seller, buyer)
--amk.send_tip("dialogs:trade_init")
	db.storage[seller:id()].meet.begin_wait_to_see.begin = time_global()/1000
	xr_position.setPosition(db.storage[seller:id()].meet.Seller, 
	db.storage[seller:id()].meet.Seller:level_vertex_id())
	db.storage[seller:id()].meet.Buyer = buyer
end

function want_trade(seller, buyer)
--amk.send_tip("dialogs:want_trade")
	if seller:relation(buyer) == game_object.friend or
		seller:relation(buyer) == game_object.neutral
	then
		return true
	else
		return false
	end
end

function dont_want_trade(seller, buyer)
--amk.send_tip("dialogs:dont_want_trade")
	return not want_trade(seller,buyer)
end

-- Treasure functions
local treasure_check = false

function check_treasure( actor, npc )
	if math.random( 100 ) > 50 then
		treasure_check = true
	end
end

function check_info_treasure( actor, npc )
	if treasure_manager.get_treasure_manager():have_info_treasure( npc ) then
		treasure_check = true
	end
end

function give_treasure( actor, npc )
	return treasure_check
end

function no_give_treasure( actor, npc )
	return not treasure_check
end

function info_treasure( actor, npc )
	local npc_id = npc:id()
	if is_enemy( npc, actor ) or xr_wounded.is_wounded( npc ) or xr_wounded.is_heavy_wounded_by_id( npc_id ) or xr_wounded.is_psy_wounded_by_id( npc_id ) then
		return false
	end
	return true
end

function have_dialog_treasure( actor, npc )
	return treasure_manager.get_treasure_manager():have_dialog_treasure( npc )
end

function give_dialog_treasure( actor, npc )
	treasure_check = false
	treasure_manager.get_treasure_manager():give_dialog_treasure( actor )
end

function give_info_treasure( actor, npc )
	treasure_check = false
	treasure_manager.get_treasure_manager():give_info_treasure( actor )
end

function give_friend_treasure( actor, npc )
	treasure_manager.get_treasure_manager():give_dialog_treasure( actor, true )
end

function clear_info_treasure( actor, npc )
	treasure_check = false
	treasure_manager.get_treasure_manager():clear_friend_treasure()
end

function clear_dialog_treasure( actor, npc )
	treasure_check = false
	treasure_manager.get_treasure_manager():clear_dialog_treasure( actor )
end

function clear_friend_treasure( actor, npc )
	treasure_check = false
	if ( is_friend( npc, actor ) and has_15000_money( actor, npc ) ) or ( is_neutral( npc, actor ) and has_30000_money( actor, npc ) ) then
		treasure_manager.get_treasure_manager():clear_dialog_treasure( npc )
	else
		treasure_manager.get_treasure_manager():clear_friend_treasure()
	end
end
