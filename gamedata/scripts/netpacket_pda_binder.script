-- original idea by Monnoroch
-- base script by Malandrinus
-- scripting by Shadowman

function init(obj)
    local new_binder = my_binder(obj)
    obj:bind_object(new_binder)
end

class "my_binder" (object_binder)
function my_binder:__init(obj) super(obj)
--    get_console():execute("load netpacket_pda~: my_binder:__init")
end 

function my_binder:reload(section)
--    get_console():execute("load netpacket_pda~: my_binder:reload")
    object_binder.reload(self, section)
end

function my_binder:reinit()
--    get_console():execute("load netpacket_pda~: my_binder:reinit")
    object_binder.reinit(self)
    db.storage[self.object:id()] = {}
    self.object:set_callback(callback.use_object, self.use_callback,   self)
end

--[[function my_binder:update(delta)
    local actor_pos = db.actor:position()
    local obj_pos = self.object:position()
    local dist = actor_pos:distance_to(obj_pos)
--    get_console():execute("load netpacket_pda~: my_binder:update_dist="..dist.."_delta="..delta)
    object_binder.update(self, delta)
end]]

function my_binder:net_spawn(data)
--    get_console():execute("load netpacket_pda~: my_binder:net_spawn")
    db.add_obj(self.object)
    gps_habar.on_game_load() --idler++--
    sak.out_teleport()
	difficulty_manager.deathStatChangeDifficulty()
    return object_binder.net_spawn(self, data)
end

function my_binder:net_destroy()
--    get_console():execute("load netpacket_pda~: my_binder:net_destroy")
    object_binder.net_destroy(self)
end

--[[function my_binder:net_save_relevant()
--    get_console():execute("load netpacket_pda~: my_binder:net_save_relevant")
    return true
end]]

function my_binder:save(packet)
--    get_console():execute("load netpacket_pda~: my_binder:save")

    object_binder.save(self, packet)
    xr_logic.save_obj(self.object, packet)
    -- db.actor:give_game_news("PDA packet size is "..packet:w_tell(), "ui\\ui_iconsTotal", Frect():set(0,658,83,47), 0, 15000)
end

function my_binder:load(reader)
--    get_console():execute("load netpacket_pda~: my_binder:load")
    object_binder.load(self, reader)
    xr_logic.load_obj(self.object, reader)
end

--[[function my_binder:use_callback(obj, who)
--    get_console():execute("load netpacket_pda~: my_binder:use_callback")
end]]