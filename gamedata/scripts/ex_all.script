--[[    **********lsclon**********
Общие и полезные функции:
''''' для функций с рандомом: если min,max не указаны значение выводятся по дефолту(1-хабар, 0-мани), если не указан max - значение = min '''''
actor_barter - вспомогательная: позволяет вставлять transfer_out_rnd и transfer_in_rnd в любую часть диалога
art_cobble - проверка артов из таблицы - шанс превращения - плюс рандомно количество артов из секции (минимальное[0 или 1],максимальное[любое])
check_smart_terrain - проверка корректности смарта у живых объектов, несуществующие или некорректные смарты чистятся
dell_bad_obj - функция удаляющая объект с неверным вертексом(определение на валидность не только game, но и level вертекса)
dell_GG_all - удаление всех предметов, за исключением указанных в таблице(только хеш таблица - {[item1]=n,[item2]=n,...}, где n - количество)
dell_GG_drop - удаление предмета (из открытого инвентаря или окна шмона) через дроп.
dell_GG_item - удаление предмета непосредственно из инвентаря ГГ
dell_GG_num - удаление предмета c заданным количеством - из инвентаря ГГ 
dell_GG_sect - удаление предметов из инвентаря ГГ по названию секции (из индексированной таблицы - {"item1","item2",...})
dell_GG_tabl - удаление предметов c заданным количеством из инвентаря ГГ(только из хеш таблицы - {[item1]=n,[item2]=n,...}, где n - количество)
get_item_name - вспомогательная: определяет название предмета
get_los_item_num - вспомогательная: склонение слов в зависимости от количества
have_GG_item - проверяет наличие предмета у ГГ
have_GG_sect - проверяет наличие предметов в рюкзаке ГГ(из индексированной таблицы - {"item1","item2",...}) 
have_GG_money - проверяет наличие финансов у ГГ
have_item_num - проверяет наличие предмета и его количество
in_GG_item - то же, что и 'spawn_GG_item', только с выдачей сообщения о полученном предмете
in_GG_num - то же, что и 'spawn_GG_num', только с выдачей сообщения о количестве полученных предметах
in_GG_sect - то же, что и 'spawn_GG_sect', только с выдачей сообщения о полученных предметах
in_GG_tabl - то же, что и 'spawn_GG_tabl', только с выдачей сообщения о полученных предметах
item_in_a_thing - проверяет наличие предмета, его количество и выдаётся хабар - количество рандомно
item_in_a_tabl - проверяет наличие предмета, его количество и выдаётся хабар из таблицы - количество рандомно 
item_in_rnd - на получение предмета - количество рандомно (предмет спавнится в рюкзак ГГ)
item_out_rnd - на удаление предмета - количество рандомно (предмет изчезает из рюкзака ГГ)
money_min_max - выводит рандомный результат для деньжат (по дефолту 0)
news_item_in - выдаёт сообщение о названии и количестве полученного предмета
news_item_out - выдаёт сообщение о названии и количестве потерянного предмета
news_money_in - выдаёт сообщение о полученной сумме
news_money_out - выдаёт сообщение о потерянной сумме
out_GG_item - то же, что и 'dell_GG_item', только с выдачей сообщения о потерянном предмете
out_GG_num - то же, что и 'dell_GG_num', только с выдачей сообщения о потерянных предметах
out_GG_sect - то же, что и 'dell_GG_sect', только с выдачей сообщения о потерянных предметах
search_double_name - поиск объектов с одинаковыми именами
search_vec - находит(от позиции, заданной в таблице 'pos_all') ближайшие - координату на сетке, game и level вертекс
spawn_GG_item - спавн предмета в рюкзак ГГ
spawn_GG_num - спавн предмета c заданным количеством - в рюкзак ГГ
spawn_GG_sect - спавн предметов в рюкзак ГГ (из индексированной таблицы - {"item1","item2",...})
spawn_GG_tabl - спавн предметов c заданным количеством в рюкзак ГГ(только из хеш таблицы - {[item1]=n,[item2]=n,...}, где n - количество)
spawn_NPC_item - спавн предмета в рюкзак NPC
spawn_valid_obj - простая функция спавна объекта с проверкой вертексов(определение на валидность не только game, но и level вертекса)
tabl_in_rnd - на получение рандомно предмета из заданной таблицы - количество рандомно
tabl_update - апдейд таблицы(пример: t={1,2} - tabl_update(t,_,3,4) - t={1,3,4}), игнорирует аргументы(nil,...,_)
thing_min_max - выводит рандомный результат для хабара (по дефолту 1)
transfer_OUT_sect - перемещает предмет(либо предметы из таблицы - {"item1","item2",...}) от ГГ - НПСу 
transfer_in_rnd - проверяет наличие предмета у НПС, его количество и перемещает от НПСу - ГГ (недостающее количество спавнит в рюкзак ГГ)
transfer_money_in_rnd - проверяет наличие денег у НПС и перемещает от НПСа - ГГ (недостающее количество спавнит в кошелёк ГГ)
transfer_money_out_rnd - проверяет наличие денег у ГГ и перемещает от ГГ - НПСу
transfer_out_rnd - проверяет наличие предмета у ГГ, его количество и перемещает от ГГ - НПСу 
--]]
--[[--------------------------------------------------------------------]]

function actor_barter(speak,reply)
	local actor = db.actor
	local npc
	if actor and actor:id() == speak:id() then
		actor = speak
		npc = reply
	else
		actor = reply
		npc = speak
	end
	return actor,npc
end

function art_cobble(tabl,min,max)
	local actor = db.actor
	local art = 0
	local count,number
	for a,v in pairs(tabl) do
		if math.random() < v then
			count = 0
			actor:iterate_inventory(function (actor,item)
				if item:section() == a then
					count = count + 1
				end
			end)
			number = math.random(min,count)
			if number >= max then
				number = max
			end
			if count >= 1 and number ~= 0 then
				ex_all.item_out_rnd(a,number,number)
				art = art + number 
			end
		end
	end
	if art ~= 0 then
		ex_all.item_in_rnd("af_buliz",art,art)
	end
end

function dell_bad_obj(obj)
	local dell_obj = false
	local obj_lvl
	local obj_lname
	if obj then
		local gg = game_graph()
		local obj_gv = obj.m_game_vertex_id
		if not gg:valid_vertex_id(obj_gv) then
			dell_obj = true
		else
			obj_lvl = gg:vertex(obj_gv):level_id()
			obj_lname = ex_level.lid_lname[obj_lvl]
			if obj.parent_id == 65535 then
				local obj_lv = obj.m_level_vertex_id
				if obj_lv > ex_level.vertex_setting[obj_lvl][3] and obj_lv < 4294967295 then
					local obj_ini = xr_logic.get_customdata_or_ini_file(obj,'<customdata>')
					if obj_ini and obj_ini:section_exist("logic") then
						get_console():execute(string.format('%s %s %s %s %s%s','load ~ex_all.dell_bad_obj:','объект с ЛОГИКОЙ:',obj:name(),'имеет неверный левел_вертекс для',obj_level,'-й локации'))
					else
						dell_obj = true
					end
				end
			end
		end
		if dell_obj then
			get_console():execute(string.format('%s %s %s %s','load ~ex_all.dell_bad_obj:','УДАЛЕН объект:',obj:name(),'с невалидным вертексом'))
			alife():release(obj,true)
		end
	end	
	return dell_obj,obj_lvl,obj_lname
end

function dell_GG_all(thing)
	local actor = db.actor
	local sim = alife()
	local id,item,sect,sobj
	local count = actor:object_count()
	for i = 0, count - 1 do
		item = actor:object(i)
		sect = item and item:section()
		if sect then
			if thing[sect] and thing[sect] > 0 then
				thing[sect] = thing[sect] - 1
			elseif not thing[sect] or thing[sect] == 0 then
				id = (item:id() or item.id)
				sobj = id and sim:object(id)
				if sobj then
					sim:release(sobj,true)
				end
			end
		end
	end
end

function dell_GG_drop(obj)
	local sim = alife()
	local id,sobj
	if obj and sim then
		db.actor:drop_item(obj)
		id = obj:id()
		sobj = id and sim:object(id)
		if sobj then
			sim:release(sobj, true)
		end
	end
end

function dell_GG_item(thing)
	local sim = alife()
	local item = db.actor:object(thing)
	local id = item and (item:id() or item.id)
	local sobj = id and sim:object(id)
	if sobj then
		sim:release(sobj)
	end
end

function dell_GG_num(thing,num)
	local actor = db.actor
	local sim = alife()
	local id,item,sect,sobj
	local count = actor:object_count()
	for i = 0, count - 1 do
		if num == 0 then
			break
		end
		item = actor:object(i)
		sect = item and item:section()
		if sect and sect == thing then
			id = item:id() or item.id
			sobj = id and sim:object(id)
			if sobj then
				num = num - 1
				sim:release(sobj)
			end
		end
	end
end

function dell_GG_sect(tabl)
	local actor = db.actor
	local sim = alife()
	local id,item,sobj
	for i = 1, #tabl do
		item = actor:object(tabl[i])
		id = item and (item:id() or item.id)
		sobj = id and sim:object(id)
		if sobj then
			sim:release(sobj,true)
		end
	end
end

function dell_GG_tabl(tabl)
	local actor = db.actor
	local sim = alife()
	local id,item,sect,sobj
	local count = actor:object_count()
	local num = 0
	for i, v in pairs(tabl) do
		num = num + v
	end
	for i = 0, count - 1 do
		if num == 0 then
			break
		end
		item = actor:object(i)
		sect = item and item:section()
		if sect and tabl[sect] and tabl[sect] > 0 then
			id = (item:id() or item.id)
			sobj = id and sim:object(id)
			if sobj then
				tabl[sect] = tabl[sect] - 1
				num = num - 1
				sim:release(sobj,true)
			end
		end
	end
end

function get_item_name(thing)
	return getIniValueStringSimple(thing,'inv_name')
end

function get_los_item_num(number)
	local get = 'Получено: '
	local loss = 'Потеряно: ' 
	local item = 'предметов'
	local size = string.len (number)
	local unit = tonumber(string.sub(number,size))
	local tens = tonumber(string.sub(number,size-1)) 
	if number == 1 then 
		get = 'Получен'
		loss = 'Потерян'
		item = 'предмет:'
		number = ''
	elseif number >= 21 and tens ~= 11 and unit == 1 then 
		get = 'Получен: '
		loss = 'Потерян: '
		item = 'предмет'
	elseif unit >= 2 and unit <= 4 then
		item = 'предмета'
	end
	return get,loss,item,number
end

function have_GG_item(thing)
	return db.actor and db.actor:object(thing)
end

function have_GG_sect(tabl)
	local flag = true
	local item
	for i = 1, #tabl do
		item = db.actor:object(tabl[i])
		if not item then
			flag = false
			break
		end
	end
	return flag
end

function have_GG_tabl(tabl)
	local actor = db.actor
	local flag = false
	local item,sect
	local count = actor:object_count()
	local num = 0
	for i, v in pairs(tabl) do
		num = num + v
	end
	for i = 0, count - 1 do
		if num == 0 then
			flag = true
			break
		end
		item = actor:object(i)
		sect = item and item:section()
		if sect and tabl[sect] and tabl[sect] > 0 then
			tabl[sect] = tabl[sect] - 1
			num = num - 1
		end
	end
	return flag
end

function have_GG_money(money)
	return db.actor and db.actor:money() >= money
end

function have_item_num(thing,number)
	return amk_utils.inventory_search(thing, number) ~= false
end

function in_GG_item(thing)
	local actor = db.actor
	local sim = alife()
	if actor and sim then
		sim:create(thing,actor:position(),actor:level_vertex_id(),actor:game_vertex_id(),actor:id())
	end
	ex_all.news_item_in(actor,thing,1)
end

function in_GG_num(thing,num)
	local actor = db.actor
	local sim = alife()
	if actor and sim then
		for i = 1, num do
			sim:create(thing,actor:position(),actor:level_vertex_id(),actor:game_vertex_id(),actor:id())
		end
	end
	ex_all.news_item_in(actor,thing,num)
end

function in_GG_sect(tabl)
	local actor = db.actor
	local sim = alife()
	local sect
	if actor and sim then
		for i = 1, #tabl do
			sect = tabl[i]
			sim:create(sect,actor:position(),actor:level_vertex_id(),actor:game_vertex_id(),actor:id())
			ex_all.news_item_in(actor,sect,1)
		end
	end
end

function in_GG_tabl(tabl)
	local actor = db.actor
	local sim = alife()
	if actor and sim then
		for k,v in pairs(tabl) do
			if v and v > 0 then
				for i = 1, v do
					sim:create(k,actor:position(),actor:level_vertex_id(),actor:game_vertex_id(),actor:id())
				end
				ex_all.news_item_in(actor,k,v)
			end
		end
	end
end

function item_in_a_thing(thing,number,item,min,max)
if ex_all.have_item_num(thing,number) then ex_all.item_in_rnd(item,min,max)
else return false
end end

function item_in_a_tabl(thing,number,tabl,min,max)
if ex_all.have_item_num(thing,number)~=false then ex_all.tabl_in_rnd(tabl,min,max)
else return false
end end

function item_in_rnd(thing,min,max)
	local number = ex_all.thing_min_max(min,max)
	local actor = db.actor
	if actor then
		for i = 1, number do
			alife():create(thing,actor:position(),actor:level_vertex_id(),actor:game_vertex_id(),actor:id())
		end
	end
	ex_all.news_item_in(actor,thing,number)
end

function item_out_rnd(thing,min,max)
	local number = ex_all.thing_min_max(min,max)
	local count
	if number ~= 0 and ex_all.have_item_num(thing,number) ~= false then
		count = 0
		db.actor:iterate_inventory(function(actor,item)
			if item:section() == thing and count < number then
				alife():release(alife():object(item:id()),true)
				count = count + 1
			end
		end, db.actor)
		ex_all.news_item_out(db.actor,thing,number)
	end
end

function money_min_max(min,max)
	if min == nil or min < 0 then
		min = 0
	end
	if max == nil or max <= min then
		max = min
	end
	local number = math.random(min,max)
	return number
end

function news_item_in(actor,thing,number)
	local actor = db.actor
	if actor == nil then return false end
	local get,loss,item,number = ex_all.get_los_item_num(number)
	local task_texture,task_rect = get_texture_info('ui_iconsTotal_found_thing')
	local news_text = '%c[255,160,160,160]'..get..number..' '..item..'\\n'..'%c[default]'..game.translate_string(get_item_name(thing))
	if actor:is_talking() then
		actor:give_talk_message(news_text,task_texture,task_rect,'iconed_answer_item')
	else
		actor:give_game_news(news_text,task_texture,task_rect,0,3000)  
	end
end

function news_item_out(actor,thing,number)
	local actor = db.actor
	if actor == nil then return false end
	local get,loss,item,number = ex_all.get_los_item_num(number)
	local task_texture,task_rect = get_texture_info('ui_iconsTotal_lost_thing')
	local news_text = '%c[255,160,160,160]'..loss..number..' '..item..'\\n'..'%c[default]'..game.translate_string(get_item_name(thing))
	if actor:is_talking() then
		actor:give_talk_message(news_text,task_texture,task_rect,'iconed_answer_item')
	else
		actor:give_game_news(news_text,task_texture,task_rect,0,3000)  
	end
end

function news_money_in(actor,number)
	local actor = db.actor
	if actor == nil then return false end
	local task_texture,task_rect = get_texture_info('ui_iconsTotal_found_money')
	local news_text = '%c[255,160,160,160]'..game.translate_string('general_in_money')..'\\n'..'%c[default]'..game.translate_string(tostring(number))
	if actor:is_talking() then
		actor:give_talk_message(news_text,task_texture,task_rect,'iconed_answer_item')
	else
		actor:give_game_news(news_text,task_texture,task_rect,0,3000)  
	end
end

function news_money_out(actor,number)
	local actor = db.actor
	if actor == nil then return false end
	local task_texture,task_rect = get_texture_info('ui_iconsTotal_lost_money')
	local news_text = '%c[255,160,160,160]'..game.translate_string('general_out_money')..'\\n'..'%c[default]'..game.translate_string(tostring(number))
	if actor:is_talking() then
		actor:give_talk_message(news_text,task_texture,task_rect,'iconed_answer_item')
	else
		actor:give_game_news(news_text,task_texture,task_rect,0,3000)  
	end
end

function out_GG_item(thing)
	local actor = db.actor
	local sim = alife()
	local item = actor:object(thing)
	if item then
		local id = item:id() or item.id
		local sobj = id and sim:object(id)
		if sobj then
			sim:release(sobj)
			ex_all.news_item_out(actor,thing,1)
		end
	end
end

function out_GG_num(thing,num)
	local actor = db.actor
	local sim = alife()
	local id,item,sect,sobj
	local count = actor:object_count()
	local ind1,ind2 = 0,num
	for i = 0, count - 1 do
		if ind2 == 0 then
			break
		end
		item = actor:object(i)
		sect = item and item:section()
		if sect and sect == thing then
			id = item:id() or item.id
			sobj = id and sim:object(id)
			if sobj then
				ind2 = ind2 - 1
				ind1 = ind1 + 1
				sim:release(sobj)
			end
		end
	end
	if ind1 ~= num then
		return false
	end
	ex_all.news_item_out(actor,thing,ind1)
	return true
end

function out_GG_sect(tabl)
	local actor = db.actor
	local sim = alife()
	local id,item,sect,sobj
	for i = 1, #tabl do
		sect = tabl[i]
		item = actor:object(sect)
		id = item and item:id() or item.id
		sobj = id and sim:object(id)
		if sobj then
			sim:release(sobj,true)
			ex_all.news_item_out(actor,sect,1)
		end
	end
end

function search_double_name(max)
	if not max then
		max = 65535
	end
	local sim = alife()
	local gg = game_graph()
	local lid
	local gv
	local tabl1 = {}
	local tabl2 = {}
	local tabl3 = {}
	local tabl4 = {}
	local tabl5 = {}
	for i = 0, max do
		local sobj = sim:object(i)
		if sobj then
			gv = sobj.m_game_vertex_id
			lid = gg:vertex(gv):level_id()
			local sobj_name = sobj:name()
			local sobj_sect = sobj:section_name()
			tabl1[i] = sobj_name or 'nil'
			if tabl2[sobj_name..'_на_'..lid..'_локации'] == true then
				tabl3[i] = sobj_name..'_'..sobj_sect..'_на_'..lid..'_локации'
			else
			tabl2[sobj_name..'_на_'..lid..'_локации'] = true
			end
			if tabl4[sobj_name] == true then
				tabl5[i] = sobj_name..'_на_'..lid..'_локации'
			else
			tabl4[sobj_name] = true
			end
		end
	end
	amk.dump_table(tabl3,1,"tabl3")
	amk.dump_table(tabl5,1,"tabl5")
end

local pos_all = {
--[[ Заполнение:
{Имя точки = {Координаты - X,Y,Z,Ид локации}},
{aes2_monolit_look3_1 = {150.175918579102,29.6597957611084,160.745895385742,19}},
--]]
}

function search_vec()
	local actor = db.actor
	local actor_gv = actor:game_vertex_id()
	local gg = game_graph()
	local lvl_id = gg:vertex(actor_gv):level_id()
	local gv_pos, lv_pos, new_lv, new_gv, new_pos, pos, x,y,z = 0, 0, 0, 0, 0, 0,0,0
	for i = 1, #pos_all do
		for key,value in pairs(pos_all[i]) do
			local lid = value[4]
			if lid and lid == lvl_id then
				local gv_min = ex_level.vertex_setting[lid][1]
				local gv_max = ex_level.vertex_setting[lid][2]
				local gvm_dist = 1000
				local lv_max = ex_level.vertex_setting[lid][3]
				local lvm_dist = 1000
				pos = vector():set(value[1],value[2],value[3])
				for lv = 1, lv_max do
					lv_pos = level.vertex_position(lv)
					if lv_pos:distance_to(pos) < lvm_dist then
						lvm_dist = lv_pos:distance_to(pos)
						new_lv = lv
					end
				end
				new_pos = level.vertex_position(new_lv)
				for gv = gv_min, gv_max do
					gv_pos = gg:vertex(gv):level_point()
					if gv_pos:distance_to(new_pos) < gvm_dist then
						gvm_dist = gv_pos:distance_to(new_pos)
						new_gv = gv
					end
				end
				x = new_pos.x
				y = new_pos.y
				z = new_pos.z
				get_console():execute(string.format('%s %s %s %s%s%s%s%s %s %s','load ~ex_all.search_vec:',lvm_dist,key,x,',',y,',',z,new_gv,new_lv))
			end
		end
	end
end

function spawn_GG_item(thing)
	local actor = db.actor
	local sim = alife()
	if actor and sim then
		sim:create(thing,actor:position(),actor:level_vertex_id(),actor:game_vertex_id(),actor:id())
	end
end

function spawn_GG_num(thing,num)
	local actor = db.actor
	local sim = alife()
	if actor and sim then
		for i = 1, num do
			sim:create(thing,actor:position(),actor:level_vertex_id(),actor:game_vertex_id(),actor:id())
		end
	end
end

function spawn_GG_sect(tabl)
	local actor = db.actor
	local sim = alife()
	if actor and sim then
		for i = 1, #tabl do
			sim:create(tabl[i],actor:position(),actor:level_vertex_id(),actor:game_vertex_id(),actor:id())
		end
	end
end

function spawn_GG_tabl(tabl)
	local actor = db.actor
	local sim = alife()
	if actor and sim then
		for k,v in pairs(tabl) do
			if v and v > 0 then
				for i = 1, v do
					sim:create(k,actor:position(),actor:level_vertex_id(),actor:game_vertex_id(),actor:id())
				end
			end
		end
	end
end

function spawn_NPC_item(thing,npc)
	local sim = alife()
	if npc and sim then
		sim:create(thing,nps:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
	end
end

function spawn_valid_obj(obj,pos,lv,gv)
	local sim = alife()
	local gg = game_graph()
	if gg:valid_vertex_id(gv) then
		local level_id = gg:vertex(gv):level_id()
		if lv <= ex_level.vertex_setting[level_id][3] then
			return sim:create(obj,pos,lv,gv)
		else
			get_console():execute(string.format('%s %s','load ~ex_all.spawn_valid_obj:','Задан неверный левел_вертекс'))
		end
	else
		get_console():execute(string.format('%s %s','load ~ex_all.spawn_valid_obj:','Задан неверный гейм_вертекс'))
	end	
end

function tabl_in_rnd(tabl, min, max)
local thing = tabl[math.random(#tabl)]
ex_all.item_in_rnd(thing, min, max)
end

function tabl_update(tab,...)
	local t = {...}
	for i = 1, #t do
		if t[i] ~= _ then
			tab[i] = t[i]
		end
	end
end

function thing_min_max(min,max)
	if min == nil then
		min = 1
	end
	if max == nil or max <= min then
		max = min
	end
	local number = math.random(min,max)
	return number
end

function transfer_OUT_sect(speak,reply,thing,news)
	local actor,npc = ex_all.actor_barter(speak,reply)
	local item,sect
	if type(thing) ~= 'table' then
		thing = {thing}
	end
	for i = 1, #thing do
		sect = thing[i]
		item = actor:object(sect)
		if item then
			actor:transfer_item(item,npc)
			if news then
				ex_all.news_item_out(actor,sect,1)
			end
		end
	end
end

function transfer_in_rnd(speak,reply,thing,min,max)
local number=math.random(min,max)
if number~=0 then
local count=number
local actor,npc=ex_all.actor_barter(speak,reply)
npc:iterate_inventory(function (dummy,item) if item:section()==thing and count>0 then 
npc:transfer_item(item,db.actor) count=count-1 end end,nil)
if count~=0 then local balance=count
for i=1,balance do
alife():create(thing,db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),db.actor:id())
end end
ex_all.news_item_in(db.actor,thing,number)
end end

function transfer_money_in_rnd(speak,reply,min,max)
	local number = ex_all.money_min_max(min,max)
	if number ~= 0 then
		local actor,npc = ex_all.actor_barter(speak,reply)
		if npc:money() >= number then
			npc:transfer_money(number,actor)
			game_stats.money_quest_update(number)
		else 
			local balance = npc:money()
			local count = number-balance
			npc:transfer_money(balance,actor)
			actor:give_money(count)
			game_stats.money_quest_update(number)
		end
		ex_all.news_money_in(actor,number)
	end
end

function transfer_money_out_rnd(speak,reply,min,max)
	local number = ex_all.money_min_max(min,max)
	if number ~= 0 then
		local actor,npc = ex_all.actor_barter(speak,reply)
		if actor:money() >= number then
			actor:transfer_money(number,npc)
			game_stats.money_quest_update(-number)
			ex_all.news_money_out(actor,number)
		else
			news_manager.send_tip(actor,'%c[255,160,160,160]'..'СИСТЕМА:'..'\\n'..'%c[255,255,128,128]У вас недостаточно средств.',nil,nil,10000)
		end
	end
end

function transfer_out_rnd(speak,reply,thing,min,max)
local number=math.random(min,max)
if number~=0 and ex_all.have_item_num(thing,number)~=false then 
local actor,npc=ex_all.actor_barter(speak,reply)
local count=number
db.actor:iterate_inventory(function (dummy,item) if item:section()==thing and count>0 then  
db.actor:transfer_item(item,npc) count=count-1 end end,nil)
ex_all.news_item_out(db.actor,thing,number)
end end

--[[--------------------------------------------------------------------]]