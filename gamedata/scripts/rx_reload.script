---- Rulix aka Bak --- 2.7.2009

local math_random = math.random
local scheme_enabled = rx_utils.read_from_ini(rx_ai.rx_ini,"reload","enabled",true,0)
local reload_one = rx_utils.read_from_ini(rx_ai.rx_ini,"reload","reload_one",true,0)
local elapsed_percent = rx_utils.read_from_ini(rx_ai.rx_ini,"reload","elapsed_percent",80)/100
local clean_gun = rx_utils.read_from_ini(rx_ai.rx_ini,"reload","clean_gun",10)/100

class "evaluator_reload" (property_evaluator)
function evaluator_reload:__init(npc,name,storage) super (nil,name) counterAdd("rx_reload.evaluator_reload:__init")
	self.st = storage
end
function evaluator_reload:evaluate() counterAdd("rx_reload.evaluator_reload:evaluate")
	local npc = self.object
	if npc:best_enemy() then
		self.st.do_id = nil
		self.st.do_cnt = 0
		self.enemy = true
		return false
	end
	local tg = time_global()
	if self.enemy then
		self.enemy = nil
		self.delay = tg+math_random(12000)
	end
	if self.delay and self.delay > tg then
		return false
	end
	local state = state_mgr.get_state(npc)
	local anim = state_lib.states[state] and state_lib.states[state].animation
	if (anim ~= nil and anim ~= "idle") or xr_wounded.is_wounded(npc) then
		self.delay = tg+math_random(3000,6000)
		return false
	end
	if rx_wmgr and rx_wmgr.wm_modes.enabled == true then
		local wm = rx_wmgr.get_wm(npc)
		if wm.reloadc then
			return true
		end
	else
		local cwpn = npc:best_weapon()
		if cwpn then
			local inmag = cwpn:get_ammo_in_magazine()
			if rx_utils.IAmAWeaponFA[cwpn:clsid()] and inmag < get_mag_size(cwpn:section()) and inmag < cwpn:get_ammo_total() then
				return true
			end
		end
	end
	self.st.do_id = nil
	return false
end

function get_weapon_to_reload(npc,active_only,stock)
	local active,active_id = npc:active_item()
	if active and rx_utils.item_is_fa(active) then
		local mag_size = rx_utils.get_mag_size(active:section())
		local aminmag = active:get_ammo_in_magazine()
		if aminmag < mag_size*elapsed_percent and active:get_ammo_total() > (stock and aminmag*2 or aminmag) then
			return active,mag_size
		end
		active_id = active:id()
	end
	if active_only then
		return
	end
	if reload_one then
		local wpn = rx_utils.get_weapon(npc)
		if not wpn or wpn:id() == active_id then
			return
		end
		local mag_size = rx_utils.get_mag_size(wpn:section())
		local aminmag = wpn:get_ammo_in_magazine()
		return aminmag < mag_size*elapsed_percent and wpn:get_ammo_total() > (stock and aminmag*2 or aminmag) and wpn,mag_size
	end
	local wm = npc:get_wm(true)
	local wpns = {}
	if wm then
		if wm.pr_state == true then	-- оружие ещё не возвращено
			return
		end
		wpns = wm.weapons
	else
		local types = {}
		for i=0,npc:object_count()-1 do
			local item = npc:object(i)
			if rx_utils.item_is_fa(item) then
				local typ = rx_utils.get_wpn_type(item:section())
				if not types[typ] then
					types[typ] = true
					wpns[#wpns+1] = item
				end
			end
		end
	end
	for i=1,#wpns do
		if (wm and wpns[i].id or wpns[i]:id()) ~= active_id then
			local wpn = wm and level.object_by_id(wpns[i].id) or wpns[i]
			local mag_size = rx_utils.get_mag_size(wpn:section())
			local aminmag = wpn:get_ammo_in_magazine()
			if aminmag < mag_size*elapsed_percent and wpn:get_ammo_total() > (stock and aminmag*2 or aminmag) then
				return wpn,mag_size
			end
		end
	end
end

class "action_reload" (action_base)
function action_reload:__init (npc,action_name,storage) super (nil,action_name) counterAdd("rx_reload.action_reload:__init")
	self.st = storage
end
function action_reload:initialize() counterAdd("rx_reload.action_reload:initialize")
	action_base.initialize(self)
	local npc = self.object
	if npc:body_state() ~= move.crouch then
		npc:clear_animations()
	end
	local state = state_mgr.get_state(npc)
	if state_lib.states[state].weapon ~= "unstrapped" then
		state_mgr.set_state(npc,"patrol")
	end
end
function action_reload:execute() counterAdd("rx_reload.action_reload:execute")
	action_base.execute(self)
	local npc = self.object
	local wpn = rx_utils.get_weapon(npc)
	if wpn and rx_utils.IAmAWeaponFA[wpn:clsid()] then
		local id = wpn:id()
		local magsize = get_mag_size(wpn:section())
		local elapsed = wpn:get_ammo_in_magazine()
		if elapsed == magsize then
			return
		elseif elapsed > 0 and not self.st.do_id or self.st.do_id ~= id then
			wpn:unload_magazine()
		end
		if self.st.do_id and self.st.do_id == id then
			self.st.do_cnt = (self.st.do_cnt or 0)+1
			local ucnt = 44
			if self.shotgun then
				ucnt = 66
			end
			if self.cr then
				ucnt = ucnt*2
			end
			if self.st.do_cnt > ucnt then
				wpn:set_ammo_elapsed(magsize)
				npc:set_item(object.idle,wpn)
				self.st.do_id = nil
			end
		else
			self.st.do_id = id
			self.st.do_cnt = 0
			if wpn:clsid() == clsid.wpn_shotgun_s then
				self.shotgun = true
			else
				self.shotgun = nil
			end
			if npc:body_state() == move.crouch then
				self.cr = true
			else
				self.cr = nil
			end
		end
		npc:set_item(object.aim1,wpn)
	else
		self.st.do_id = nil
	end
end

evid_reload = rx_ai.base_id+5
actid_reload = evid_reload

function add_to_binder(npc,ini,scheme,section,storage) counterAdd("rx_reload.add_to_binder")
	local manager = npc:motivation_action_manager()
	if npc:character_community() == "zombied" then
		manager:add_evaluator(evid_reload,property_evaluator_const(false))
		return
	else
		manager:add_evaluator(evid_reload,evaluator_reload(npc,"eva_reload",storage))
	end
	local action = action_reload(npc,"act_reload",storage)
	action:add_precondition(world_property(stalker_ids.property_alive,true))
	action:add_precondition(world_property(stalker_ids.property_danger,false))
	action:add_precondition(world_property(stalker_ids.property_enemy,false))
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
--	action:add_precondition(world_property(xr_actions_id.stohe_meet_base+1,false))
--	action:add_precondition(world_property(xr_evaluators_id.stohe_kamp_base+2,false))
	if rx_bandage then
		action:add_precondition(world_property(rx_bandage.evid_bandage,false))
	end
	if rx_gl then
		action:add_precondition(world_property(rx_gl.evid_gl_reload,false))
	end
	if post_combat_idle then
		action:add_precondition(world_property(post_combat_idle.evid_post_combat,false))
	end
	if xr_help_wounded then
		action:add_precondition(world_property(xr_help_wounded.evid_wounded_exist,false))
	end
	if xrs_grenade and xrs_grenade.evid_aaa_grenade then
		action:add_precondition(world_property(xrs_grenade.evid_aaa_grenade,false))
	end
	if xrs_medic and xrs_medic.evid_self_medic then
		action:add_precondition(world_property(xrs_medic.evid_self_medic,false))
	end
	if watcher_act then
		action:add_precondition(world_property(watcher_act.evid_see_stuff,false))
		action:add_precondition(world_property(watcher_act.evid_near_stuff,false))
	end
	if blowout_scheme and blowout_scheme.evid_outside then
		action:add_precondition(world_property(blowout_scheme.evid_outside,false))
	end
	action:add_precondition(world_property(evid_reload,true))
	action:add_effect(world_property(evid_reload,false))
	manager:add_action(actid_reload,action)
	local atbl = {xr_actions_id.alife,xr_actions_id.stohe_meet_base+1,xr_actions_id.stohe_kamp_base+3,xr_actions_id.stohe_kamp_base+5}
	for i = 1, #atbl do
		action = manager:action(atbl[i])
		action:add_precondition(world_property(evid_reload,false))
	end
end

function set_scheme(npc,ini,scheme,section) counterAdd("rx_reload.set_scheme")
	local st = xr_logic.assign_storage_and_bind(npc,ini,scheme,section)
end

function disable_scheme(npc, scheme) counterAdd("rx_reload.disable_scheme")
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end

function get_mag_size(section) counterAdd("rx_reload.get_mag_size")
	return (rx_wmgr and rx_wmgr.read_wpn_params(section).mag) or rx_utils.read_from_ini_new(nil,section,"ammo_mag_size",1)
end
