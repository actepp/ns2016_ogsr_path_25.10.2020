---' revision and adaptation for NS_2012 lsclon 20.01.12 '---
-- в игре применяется три вида боя: 1.движковый, 2.кемперский, 3.зомбированный
-- если в логике нпс есть монолитовский вид боя он обниляется данным скриптом

---' -------------------------------------------------------------------------------
-- Переключение боевых схем
---' -------------------------------------------------------------------------------
function set_combat_type(npc,actor,t)
	local st_id = db.storage[npc:id()]
	-- чтение оверайда 'combat_type' из активной секции
	local script_combat_type = xr_logic.pick_section_from_condlist(actor,npc,t.combat_type.condlist)
	if script_combat_type == 'nil' or script_combat_type == 'monolith' then
		script_combat_type = nil
	end
	-- запись в стораж непися типа боя
	st_id.script_combat_type = script_combat_type
	-- запись в стораж непися реального врага - для функций в xr_conditions.script
	st_id.enemy = npc:best_enemy() and npc:best_enemy():id()
	-- на выходе true или false
	return script_combat_type ~= nil
end

---' -------------------------------------------------------------------------------
-- Эвалуатор переключения между скриптовым и движковым боем
-- false - engine combat, true - script combat
---' -------------------------------------------------------------------------------
class "evaluator_check_combat" (property_evaluator)

function evaluator_check_combat:__init(name,storage) super (nil,name)
	self.st = storage
end

function evaluator_check_combat:evaluate()
	local actor = db.actor
	-- если схема включена и у объекта есть враг
	if actor and self.st.enabled and self.object:best_enemy() then
		-- если есть активная секция
		if db.storage[self.object:id()].active_scheme then
			local overrides = xr_logic.generic_scheme_overrides(self.object)
			if overrides and overrides.on_combat then
				xr_logic.pick_section_from_condlist(actor,self.object,overrides.on_combat.condlist)
			end
			if not xr_logic.try_switch_to_another_section(self.object,self.st,actor) then
				-- взять из overrides, иначе из секции on_combat
				if overrides and overrides.combat_type then
					return set_combat_type(self.object,actor,overrides)
				else
					return self.st.combat_type and set_combat_type(self.object,actor,self.st)
				end
			end
		else
			-- если нет активной секции, то тип боя взять из секции on_combat
			return self.st.combat_type and set_combat_type(self.object,actor,self.st)
		end
	end
	return false
end

---' -------------------------------------------------------------------------------
-- Дублирующий эвалуатор врагов для планировщика скриптового боя
---' -------------------------------------------------------------------------------
class "evaluator_enemy" (property_evaluator)

function evaluator_enemy:__init(name) super (nil,name)
end

function evaluator_enemy:evaluate()
	return self.object:best_enemy() ~= nil
	--local be = self.object:best_enemy()
	--return be ~= nil and (be:id() ~= db.actor:id() or xr_conditions.actor_inviz(self.object))
end

---' -------------------------------------------------------------------------------
-- binder
---' -------------------------------------------------------------------------------
function add_to_binder(npc,ini,scheme,section,storage)
	local manager = npc:motivation_action_manager()
		manager:add_evaluator(xr_evaluators_id.script_combat,this.evaluator_check_combat("script_combat",storage))

	local action = manager:action(stalker_ids.action_combat_planner)
		action:add_precondition(world_property(xr_evaluators_id.script_combat,false))

	xr_combat_zombied.add_to_binder(npc,ini,storage,manager)
	--xr_combat_monolith.add_to_binder(npc,ini,storage,manager)
	xr_combat_camper.add_to_binder(npc,ini,storage,manager)
end

function set_combat_checker(npc,ini,scheme,section)
	-- для правильного определения зомбированных(вчастности респавно и скриптово заспавненных) - выделим их по коммъюнити
	local is_zombied = npc:character_community() == 'zombied'
	local fresh_profile = string.find(npc:profile_name(),'fresh')
	if section or is_zombied then
		local st = xr_logic.assign_storage_and_bind(npc,ini,scheme,section)
		st.logic = xr_logic.cfg_get_switch_conditions(ini,section,npc)
		st.enabled = true
		st.combat_type = xr_logic.cfg_get_condlist(ini,section,'combat_type',npc)
		-- зомбированным задать родную боевую схему:
		if not st.combat_type and is_zombied then
			-- исключим 'stalker_fresh_zombied' - всё равно нет анимации зомби
			if fresh_profile then
				st.combat_type = {condlist = xr_logic.parse_condlist( 'monolith', npc, section, '' )}
			else
				st.combat_type = {condlist = xr_logic.parse_condlist( 'zombied', npc, section, '' )}
			end
		end
		if st.combat_type then
			set_combat_type(npc,db.actor,st)
		end
	end
end

function disable_scheme(npc,scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end